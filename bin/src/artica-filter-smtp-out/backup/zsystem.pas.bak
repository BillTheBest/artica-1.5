unit zsystem;
{$MODE DELPHI}
//{$mode objfpc}{$H+}
{$LONGSTRINGS ON}

interface

uses
Classes, SysUtils,Process,strutils,IniFiles,unix,linux,BaseUnix,Logs,RegExpr in 'RegExpr.pas',md5,users,DATEUTILS;

  type
  Tsystem=class


private
       GLOBAL_INI:TIniFile;
        ArticaDirectory,jour,heure:string;
        ArticaBuildPath:string;
        version:string;

       function ReadFileIntoString(path:string):string;
       function COMMANDLINE_PARAMETERS(FoundWhatPattern:string):boolean;
       function MD5FromString(value:string):string;
       function PROCESS_MEMORY_SINGLE(PID:string):integer;
       function GIDFromName(group_name:string):Integer;
       function UIDFromName(username:string):Integer;


public
      constructor Create();
      procedure Free;
      PLISTPID:TstringList;
      function DU_PATH():string;
        procedure BuildArticaFiles();
       function IsGroupExists(groupname:string):boolean;
       function SystemUserID(username:string):string;
       function SystemGroupID(group_name:string):string;
       function DirectoryGroupOwner(path:string):string;
       function SystemGroupName(group_id:dword):string;
       function IsUserExists(username:string):boolean;
       procedure CreateGroup(Groupname:string);
       procedure AddUserToGroup(username:string;groupname:string;xshell:string;sHome:string);
       function DirectoryCountFiles(FilePath: string):integer;
       function ScanArticaFiles(FilePath:string):integer;
       procedure ShowScreen(line:string);
       function ScanINIArticaFiles(key:string):string;
       function ScanINIArticaFilesSave(key:string;Value:string):string;
       function DirFiles(FilePath: string;pattern:string):TstringList;
       DirListFiles:TstringList;
       function DirDir(FilePath: string):TstringList;
       function SearchFilesInPath(path: string;filter:string):TstringList;
       function GetDirectorySize(path:string):longint;
       function GetDirectoryList(path:string):longint;
       function DirDirRecursive(FilePath: string):TstringList;
       procedure FindDirs(ADir: string);
       function RecusiveListFiles(path:string):TstringList;
       function zGetUsername(gid:string):string;
       function MembersList(groupname:string):TstringList;
       function NetBiosName():string;
       function FILE_TIME_BETWEEN_MIN(filepath:string):LongInt;
       function GET_PID_FROM_PATH(pidPath:string):string;
       function PROCESS_EXIST(pid:string):boolean;
       function PROCESS_MEMORY(PID:string):integer;
       function PROCESS_STATUS(PID:string):string;
       function FILE_CHOWN(username:string;groupname:string;path:string):boolean;
       function PROCESS_LIST_PID(processname:string):string;
       procedure RemoveService(servicename:string);
       function FOLDER_SIZE(path:string):integer;
       function sudo_path():string;
END;

implementation

constructor Tsystem.Create();
begin
   DirListFiles:=TstringList.Create();
end;
PROCEDURE Tsystem.Free();
begin
DirListFiles.Clear;
DirListFiles.Free;
end;
//##############################################################################
function Tsystem.IsGroupExists(groupname:string):boolean;
begin
 result:=False;
     try
        if GetGroupId(groupname)>0 then exit(true);
     except
     exit();
     end;
end;
//##############################################################################
function Tsystem.SystemUserID(username:string):string;
begin
 result:='';
 
  try
     result:=IntToSTr(GetUserId(username));
  except
  exit();
  end;
end;
//##############################################################################
function Tsystem.SystemGroupID(group_name:string):string;
begin
 try
    result:=IntToStr(GetGroupId(group_name));
     except
     exit();
     end;
end;
//##############################################################################
function Tsystem.GIDFromName(group_name:string):Integer;
begin
result:=0;
 try
    result:=GetGroupId(group_name);
     except
     exit();
     end;
end;
//##############################################################################
function Tsystem.UIDFromName(username:string):Integer;
begin
 result:=0;

  try
     result:=GetUserId(username);
  except
  exit();
  end;
end;
//##############################################################################
function Tsystem.DirectoryGroupOwner(path:string):string;
var info:stat;
var Guid:dword;
begin

if fpstat(path,info)=0 then  begin

//  writeln ('uid     : ',info.st_uid);
  Guid:=info.st_gid;
  Result:=SystemGroupName(Guid);
end;
end;
//##############################################################################
function Tsystem.SystemGroupName(group_id:dword):string;
begin
 result:='';

  try
     result:=GetGroupName(group_id);
  except
  exit();
  end;
end;
//##############################################################################
function Tsystem.NetBiosName():string;
var
   txt:string;
   RegExpr:TRegExpr;
begin
fpsystem('/bin/hostname >/opt/artica/logs/hostname.txt');
    txt:=ReadFileIntoString('/opt/artica/logs/hostname.txt');
    txt:=trim(result);
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='(.+?)\.';
    if RegExpr.Exec(txt) then result:=RegExpr.Match[1] else result:=trim(txt);
    RegExpr.free;
end;
//##############################################################################

procedure Tsystem.RemoveService(servicename:string);
begin
 if FileExists('/usr/sbin/update-rc.d') then begin
    fpsystem('/usr/sbin/update-rc.d -f '+servicename+' remove >/dev/null 2>&1');
 end;

  if FileExists('/sbin/chkconfig') then begin
     fpsystem('/sbin/chkconfig --delete '+servicename+' >/dev/null 2>&1');
  end;

end;

//##############################################################################
function Tsystem.DU_PATH():string;
begin
    if FileExists('/usr/bin/du') then exit('/usr/bin/du');

end;
//#########################################################################################
function Tsystem.FOLDER_SIZE(path:string):integer;
var
   tempfile:string;
   dupath:string;
   Logs:Tlogs;
   l:TstringList;
   RegExpr:TRegExpr;
   i:integer;
begin
dupath:=DU_PATH();
tempfile:='/opt/artica/logs/' + MD5FromString(path);
if not DirectoryExists(path) then exit(0);
logs:=Tlogs.Create;
if not FileExists(dupath) then begin
   logs.logs('SYSTEM_FOLDER_SIZE() unable to stat du path tool');
   exit(0);
end;
fpsystem(dupath + ' -s ' + path + ' >' + tempfile + ' 2>&1');
RegExpr:=TRegExpr.Create;
RegExpr.Expression:='([0-9]+)';
if FileExists(tempfile) then begin
    l:=TstringList.Create;
    l.LoadFromFile(tempfile);
    For i:=0 to l.Count-1 do begin
        if RegExpr.Exec(l.Strings[i]) then begin
           result:=StrToInt(RegExpr.Match[1]);
           RegExpr.free;
           L.free;
           break;
        end;

    end;
end;
end;
//#########################################################################################
function Tsystem.FILE_TIME_BETWEEN_MIN(filepath:string):LongInt;
var
   fa   : Longint;
   S    : TDateTime;
   maint:TDateTime;
begin
if not FileExists(filepath) then exit(0);
    fa:=FileAge(filepath);
    maint:=Now;
    S:=FileDateTodateTime(fa);
    result:=MinutesBetween(maint,S);
end;
//##############################################################################


function Tsystem.MembersList(groupname:string):TstringList;
var
   l:Tstringlist;
   i:integer;
begin
     l:=TstringList.Create;
     result:=l;
try
   GetGroupMembers(groupname,l);
   
   for i:=0 to l.count-1  do begin
       writeln(l.Strings[i]);
   end;

except
writeln('fatal error');
end;
result:=l;
l.free;
exit;
end;


function Tsystem.IsUserExists(username:string):boolean;
var s:string;
begin
result:=false;
s:=SystemUserID(username);
if length(s)>0 then exit(true);
end;

procedure Tsystem.CreateGroup(Groupname:string);
begin
  if FileExists('/usr/sbin/groupadd') then Shell('/usr/sbin/groupadd ' + Groupname + ' >/tmp/groupadd.' + Groupname + ' 2>&1');
end;

procedure Tsystem.AddUserToGroup(username:string;groupname:string;xshell:string;sHome:string);
var
   cmd:string;
   logs:Tlogs;
begin
    logs:=Tlogs.Create;
     if IsGroupExists(groupname) then begin
        if IsUserExists(username) then begin
           logs.Debuglogs('Tsystem.AddUserToGroup:: /usr/sbin/usermod -a -G '+ groupname + ' '+ username);
           fpsystem('/usr/sbin/usermod -a -G '+ groupname + ' '+ username);
           exit;
        end
     end;


    if not IsGroupExists(groupname) then CreateGroup(groupname);

    
    logs.Debuglogs('Tsystem.AddUserToGroup::' + username +'->' + groupname);
    if FileExists('/usr/sbin/useradd') then begin
           if length(groupname)>0 then   begin
              if IsUserExists(username) then begin
                     logs.Debuglogs('Tsystem.AddUserToGroup:: /usr/sbin/usermod ' + username + ' -g ' + groupname + ' 2>&1');
                     fpsystem('/usr/sbin/usermod ' + username + ' -g ' + groupname + ' 2>&1');
                     exit;
              end else begin
                   cmd:='-g ' + groupname + ' ' ;
              end;
           end;
           if length(xshell)>0 then   cmd:=cmd + '-s ' + xshell+ ' ';
           if length(sHome)>0 then   cmd:=cmd + '-d ' + sHome+ ' ';
           cmd:=cmd + username;
           logs.Debuglogs('Tsystem.AddUserToGroup:: /usr/sbin/useradd ' + cmd + ' >/tmp/useradd.' +username + '.' + groupname + ' 2>&1');
           fpsystem('/usr/sbin/useradd ' + cmd + ' >/tmp/useradd.' +username + '.' + groupname + ' 2>&1');
    end;
end;


function Tsystem.ReadFileIntoString(path:string):string;
         const
            CR = #$0d;
            LF = #$0a;
            CRLF = CR + LF;
var
   Afile:text;
   i:integer;
   datas:string;
   datas_file:string;
begin

      if not FileExists(path) then begin
        writeln('Error:thProcThread.ReadFileIntoString -> file not found (' + path + ')');
        exit;

      end;
      TRY
     assign(Afile,path);
     reset(Afile);
     while not EOF(Afile) do
           begin
           readln(Afile,datas);
           datas_file:=datas_file + datas +CRLF;
           end;

close(Afile);
             EXCEPT
              writeln('Error:thProcThread.ReadFileIntoString -> unable to read (' + path + ')');
           end;
result:=datas_file;


end;
//#########################################################################################
function Tsystem.DirectoryCountFiles(FilePath: string):integer;
Var Info : TSearchRec;
    Count : Longint;

Begin
  Count:=0;
  If FindFirst (FilePath+'/*',faAnyFile and faDirectory,Info)=0 then
    begin
    Repeat
      if Info.Name<>'..' then begin
         if Info.Name <>'.' then begin
              if Info.Attr=48 then count:=count +  DirectoryCountFiles(FilePath + '/' +Info.Name);
              if Info.Attr=16 then count:=count +  DirectoryCountFiles(FilePath + '/' +Info.Name);
              if Info.Attr=32 then Inc(Count);
              //Writeln (Info.Name:40,Info.Size:15);
         end;
      end;

    Until FindNext(info)<>0;
    end;
  FindClose(Info);
  exit(count);
end;
//#########################################################################################
function Tsystem.DirFiles(FilePath: string;pattern:string):TstringList;
Var Info : TSearchRec;
    D:boolean;
Begin
  DirListFiles.Clear;
  D:=COMMANDLINE_PARAMETERS('debug');
  if D then ShowScreen('DirFiles:: ' + FilePath + ' ' + pattern );
  If FindFirst (FilePath+'/'+ pattern,faAnyFile,Info)=0 then begin
    Repeat
      if Info.Name<>'..' then begin
         if Info.Name <>'.' then begin
           if D then ShowScreen('DirFiles:: Found ' + Info.Name );
           DirListFiles.Add(Info.Name);

         end;
      end;

    Until FindNext(info)<>0;
    end;
  FindClose(Info);
  DirFiles:=DirListFiles;
  exit();
end;
//#########################################################################################
function Tsystem.DirDir(FilePath: string):TstringList;
Var Info : TSearchRec;
    D:boolean;
Begin
  D:=COMMANDLINE_PARAMETERS('debug');
  if D then ShowScreen('DirDir:: ' + FilePath + ' *' );
   DirListFiles:=TstringList.Create();
  If FindFirst (FilePath+'/*',faDirectory,Info)=0 then begin
    Repeat
      if Info.Name<>'..' then begin
         if Info.Name <>'.' then begin
           if info.Attr=48 then begin
              if D then ShowScreen('DirDir:: Found ' + Info.Name  + ' ' + IntToStr(info.Attr));
              DirListFiles.Add(Info.Name);
           end;

         end;
      end;

    Until FindNext(info)<>0;
    end;
  FindClose(Info);
  DirDir:=DirListFiles;
  exit();
end;
//#########################################################################################
function Tsystem.DirDirRecursive(FilePath: string):TstringList;
Var Info : TSearchRec;
    D:boolean;
Begin
  D:=COMMANDLINE_PARAMETERS('debug');
  if D then ShowScreen('DirDir:: ' + FilePath + ' *' );
  If FindFirst (FilePath+'/*',faDirectory,Info)=0 then begin
    Repeat
      if Info.Name<>'..' then begin
         if Info.Name <>'.' then begin
           if info.Attr=48 then begin
              if D then ShowScreen('DirDir:: Found ' + Info.Name  + ' ' + IntToStr(info.Attr));
              DirListFiles.Add(FilePath + '/'+Info.Name);
              DirDirRecursive(FilePath + '/'+Info.Name);
           end;

         end;
      end;

    Until FindNext(info)<>0;
    end;
  FindClose(Info);
  DirDirRecursive:=DirListFiles;
  exit();
end;
//#########################################################################################
function Tsystem.SearchFilesInPath(path: string;filter:string):TstringList;
Var Info : TSearchRec;
    D:boolean;
Begin
  D:=COMMANDLINE_PARAMETERS('debug');
  if D then ShowScreen('FoundLatestFiles:: ' + path + '(' + filter + ')' );
   DirListFiles:=TstringList.Create();
  If FindFirst (path+ '/'+ filter ,faAnyFile,Info)=0 then begin
    Repeat
      if Info.Name<>'..' then begin
         if Info.Name <>'.' then begin
           if D then ShowScreen('FoundLatestFiles:: Found ' + path + '/' + Info.Name );
           DirListFiles.Add(path + '/' + Info.Name);

         end;
      end;

    Until FindNext(info)<>0;
    end;
  FindClose(Info);
  exit(DirListFiles);
  exit();
end;
//#########################################################################################

procedure Tsystem.BuildArticaFiles();
var
    BackupSrc:string;
begin



    
  if DirectoryExists(ArticaBuildPath + '/bin/src') then begin
       ShowScreen('ScanArticaFiles:: move source files...');
       BackupSrc:='/tmp/src_' + version;
       fpsystem('/bin/mv ' + ArticaBuildPath + '/bin/src' + ' ' +  BackupSrc);
    end;
    ShowScreen('ScanArticaFiles:: remove unecessary source files...');
    if DirectoryExists(ArticaBuildPath + '/bin') then begin
       fpsystem('/bin/rm ' + ArticaBuildPath + '/bin/*.o');
       fpsystem('/bin/rm ' + ArticaBuildPath + '/bin/*.ppu');
       fpsystem('/bin/rm -rf ' + ArticaBuildPath + '/ressources/settings.inc');
       fpsystem('/bin/rm -rf ' + ArticaBuildPath + '/img/01cpu*.png');
       fpsystem('/bin/rm -rf ' + ArticaBuildPath + '/img/02loadavg*.png');
       fpsystem('/bin/rm -rf ' + ArticaBuildPath + '/img/03mem*.png');
       fpsystem('/bin/rm -rf ' + ArticaBuildPath + '/img/04hddio*.png');
       fpsystem('/bin/rm -rf ' + ArticaBuildPath + '/img/05hdd*.png');
       fpsystem('/bin/rm -rf ' + ArticaBuildPath + '/img/06proc*.png');
       fpsystem('/bin/rm -rf ' + ArticaBuildPath + '/img/10net*.png');
       fpsystem('/bin/rm -rf ' + ArticaBuildPath + '/img/mailgraph_*.png');
       fpsystem('/bin/rm -rf ' + ArticaBuildPath + '/ressources/databases/postfix-queue-cache.conf');
       fpsystem('/bin/rm -rf ' + ArticaBuildPath + '/ressources/databases/queue.list.*.cache');
       fpsystem('/bin/rm  ' + ArticaBuildPath + '/ressources/settings.inc');
       fpsystem('/usr/bin/strip -s ' + ArticaBuildPath + '/bin/artica-install');
       fpsystem('/usr/bin/strip -s ' + ArticaBuildPath + '/bin/artica-postfix');
    end;
    
    ShowScreen('ScanArticaFiles:: Compresss source folder...');
    fpsystem('cd ' + BackupSrc + ' && tar -czf /tmp/artica_src_' + version + '.tgz *');
    ShowScreen('ScanArticaFiles:: Compresss application folder...=>cd ' + ArticaBuildPath + ' && tar -czf /tmp/artica_' + version + '.tgz *');
    fpsystem('cd ' + ArticaBuildPath + ' && tar -czf /tmp/artica_' + version + '.tgz *');

    fpsystem('/bin/rm -rf ' + ArticaBuildPath);
    fpsystem('/bin/rm -rf ' + BackupSrc);
    
    ShowScreen('ScanArticaFiles::Done...');
    
end;






function Tsystem.ScanArticaFiles(FilePath:string):integer;
Var
   Info : TSearchRec;
    Count : Longint;
    Directory:string;
    PathTo:string;
    PathFrom:string;
    PathTime:integer;
    FileDateNum:Longint;
    Ini:TiniFile;
    IniDateNum:longint;
    DateMD5String:string;
    IniDateMD5String,snap:string;
    TMD5 : TMD5Digest;
    major:integer;
    minor:integer;
    build:integer;
    NewBuild:integer;
    FileMD5:string;
Begin
  Count:=0;
  result:=0;
  
  
  
  if length(ArticaDirectory)=0 then begin
     ArticaDirectory:=ExtractFileDir(ParamStr(0));
     ArticaDirectory:=AnsiReplaceText(ArticaDirectory,'/bin','');
     ShowScreen('ScanArticaFiles:: ArticaDirectory="' + ArticaDirectory + '"');
  end;
  
  if length(ArticaBuildPath)=0 then begin
     if COMMANDLINE_PARAMETERS('build')=true then begin
      Ini:=TiniFile.Create(ArticaDirectory + '/version.ini');
      NewBuild:=ini.ReadInteger('VERSION','build',0);
      NewBuild:=NewBuild+1;
      ini.WriteInteger('VERSION','build',NewBuild);
      snap:='snapshot';
     end else begin
      Ini:=TiniFile.Create(ArticaDirectory + '/version.ini');
      NewBuild:=ini.ReadInteger('VERSION','minor',0);
      NewBuild:=NewBuild+1;
      ini.WriteInteger('VERSION','minor',NewBuild);
      fpsystem('/bin/rm /etc/artica-postfix/Builder.ini');
      snap:='full';
     end;
    version:= snap + '.' + IntToStr(ini.ReadInteger('VERSION','major',0)) + '.' +IntToStr(ini.ReadInteger('VERSION','minor',0)) + '.' + IntToStr(ini.ReadInteger('VERSION','build',0));
    ArticaBuildPath:='/tmp/artica-postfix_' + version;
    ShowScreen('ScanArticaFiles:: ArticaBuildDirectory="' + ArticaBuildPath + '"');
  end;

  if length(FilePath)=0 then FilePath:=ArticaDirectory;
  Directory:=AnsiReplaceText(FilePath,ArticaDirectory,'');


  
  If FindFirst (FilePath+'/*',faAnyFile and faDirectory,Info)=0 then
    begin
    Repeat
      if Info.Name<>'..' then begin
         if Info.Name <>'.' then begin
              if Info.Attr=48 then begin
                 ScanArticaFiles(FilePath + '/' +Info.Name);
              end;
                 
              if Info.Attr=16 then begin

                  ScanArticaFiles(FilePath + '/' +Info.Name);
              end;

              if Info.Attr=32 then begin
                 PathTo:=Directory + '/' +Info.Name;
                 PathFrom:=FilePath + '/' +Info.Name;
                 FileDateNum:=FileAge(PathFrom);
                 if Copy(PathTo,0,1)='/' then PathTo:=Copy(PathTo,2,length(PathTo)-1);
                 PathTo:=ArticaBuildPath + '/' + PathTo;
                 PathTime:=info.Time;
                 TMD5:=MD5String(IntToSTr(FileDateNum));
                 DateMD5String:=MD5Print(TMD5);

                 
                 TMD5:=MD5String(PathFrom);
                 FileMD5:=MD5Print(TMD5);
                 
                 IniDateMD5String:=ScanINIArticaFiles(FileMD5);

                if DateMD5String<>IniDateMD5String then begin
                   ShowScreen('ScanArticaFiles:: ' + FileMD5 + '("' + DateMD5String + '" <> "' +IniDateMD5String + '")');
                   ForceDirectories(ExtractFileDir(PathTo));
                   fpsystem('/bin/cp ' + PathFrom + ' ' + PathTo);
                   ScanINIArticaFilesSave(FileMD5,DateMD5String);
                end;

              end;
              
         end;
      end;

    Until FindNext(info)<>0;
    end;
  FindClose(Info);




end;
function Tsystem.ScanINIArticaFiles(key:string):string;
var
   Ini:TStringList;
   RegExpr:TRegExpr;
   i:integer;
  begin
  if not FileExists('/etc/artica-postfix/Builder.ini') then exit;
  Ini:=TStringList.Create;
  Ini.LoadFromFile('/etc/artica-postfix/Builder.ini');
  RegExpr:=TRegExpr.create;
  RegExpr.Expression:=key+'=([a-z0-9]+)';
  for i:=0 to ini.Count-1 do begin;
  if RegExpr.Exec(ini.Strings[i]) then begin
     result:=RegExpr.Match[1];
     RegExpr.Free;
     Ini.Free;
     exit();
  end;
  end;
 RegExpr.Free;
     Ini.Free;

end;
function Tsystem.ScanINIArticaFilesSave(key:string;Value:string):string;
var     Ini:TiniFile;
  begin
  Ini:=TiniFile.Create('/etc/artica-postfix/Builder.ini');
   ini.WriteString('BUILD',key,Value);
  ini.Free;
  exit
end;
//#########################################################################################
function Tsystem.GetDirectoryList(path:string):longint;
var
   Dir:string;
   mSize:longint;
   Info : TSearchRec;
   D:boolean;
begin
    D:=COMMANDLINE_PARAMETERS('debug');
    result:=0;
    path:=AnsiReplaceText(path,'//','/');
    if Copy(path,length(path),1)='/' then path:=Copy(path,0,length(path)-1);
    if Not DirectoryExists(path) then exit;

If FindFirst (path+'/*',(faAnyFile and faDirectory),Info)=0 then begin
    Repeat
       if info.Name<>'..' then begin
          if info.name<>'.' then begin
             dir:=path + '/' + info.Name;
             result:=result+info.Size;
             

             //writeln('[' + IntTostr(info.Size) + ' attr=' + IntToStr(info.Attr) +' ] ' + dir);
             If info.Attr=48 then result:=result+GetDirectoryList(dir);
             //list.AddStrings(GetDirectoryList(dir));
          end;
       end;
    Until FindNext(info)<>0;
end;

if D then writeln(Path + '=' + IntToStr(result) );
end;
//#########################################################################################
function Tsystem.RecusiveListFiles(path:string):TstringList;
var
   l:TstringList;
   i:integer;
   malist:TstringList;
   D:boolean;
begin
   DirListFiles.Clear;
   l:=TstringList.Create;
   D:=COMMANDLINE_PARAMETERS('--ls');
   if not D then d:=COMMANDLINE_PARAMETERS('debug');

   if D then writeln('RecusiveListFiles:: search path: ' + path);
   FindDirs(path);
   l.AddStrings(DirListFiles);
   if D then writeln('RecusiveListFiles:: ',l.Count,' rows');
   DirListFiles.Clear;
   malist:=TStringList.Create;
   result:=malist;
   
    if l.Count=0 then begin
       malist.AddStrings(SearchFilesInPath(path,'*'));
       exit(malist);
    end;
       
       
     for i:=0 to l.Count-1 do begin
         malist.AddStrings(SearchFilesInPath(l.Strings[i],'*'));
     end;
    DirListFiles.AddStrings(malist);
    
    result:=malist;

end;





//#########################################################################################
function Tsystem.GetDirectorySize(path:string):longint;
Var Info : TSearchRec;
    Count : Longint;
    DirectorySize:longint;
Begin
  Count:=0;
  DirectorySize:=0;
  If FindFirst (path+'/*',faAnyFile and faDirectory,Info)=0 then
    begin
    Repeat
      Inc(Count);
      With Info do
        begin
        If (Attr and faDirectory) = faDirectory then
          Write('Dir : ');
        Writeln (Name:40,Size:15);
        DirectorySize:=DirectorySize+Size;
        end;
    Until FindNext(info)<>0;
    end;
  FindClose(Info);
  Writeln ('Finished search. Found ' + IntTostr(Count) +' matches ' + IntToStr(DirectorySize) + ' size');
end;




procedure Tsystem.ShowScreen(line:string);
 var  logs:Tlogs;
 begin
    logs:=Tlogs.Create();
    writeln('Tsystem::' + line);
    logs.Enable_echo_install:=True;
    logs.Logs('Tsystem::' + line);
    logs.free;

 END;
//#########################################################################################
function Tsystem.COMMANDLINE_PARAMETERS(FoundWhatPattern:string):boolean;
var
   i:integer;
   s:string;
   RegExpr:TRegExpr;

begin
 result:=false;
 if ParamCount>1 then begin
     for i:=2 to ParamCount do begin
        s:=s  + ' ' +ParamStr(i);
     end;
 end;
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:=FoundWhatPattern;
   if RegExpr.Exec(s) then begin
      RegExpr.Free;
      result:=True;
   end;


end;
//##############################################################################
function Tsystem.zGetUsername(gid:string):string;
begin
try
   result:=GetUserName(StrToInt(gid));
except
      exit;
end;
end;

procedure Tsystem.FindDirs(ADir: string);

  procedure DoRest(_ADir: string);
  var
    sr: TSearchRec;
    e: LongInt;
    Strs: TStrings;
    i: integer;
    D: boolean;
  begin
  D:=false;
  D:=COMMANDLINE_PARAMETERS('debug');
  if D then writeln(Adir);
  if Copy(_ADir,length(_ADir),1)<>'/' then _ADir:=_ADir +'/';
    if D then writeln('_ADir=',_ADir);
    if SetCurrentDir(_ADir) then begin
      if D then writeln('initialize strs');
      Strs := TStringList.Create;
      try
        e := FindFirst('*',faDirectory, sr);
        while e = 0 do begin
          if D then writeln(sr.Name[1],'=',sr.Attr);
          if (sr.Attr=48) and (sr.Name[1] <> '.') then begin
             Strs.Add(_ADir + sr.Name);
          end;
          e := FindNext(sr);
        end;
        FindClose(sr);
        if Strs.Count > 0 then
          with Strs do
            for i:=Count-1 downto 0 do begin
              DirListFiles.Add(Strs.Strings[i]);
              FindDirs(Strings[i]);
            end;
      finally
        Strs.Free;
      end;
    end;
  end;
var
  sr: TSearchRec;
  e: LongInt;
  Strs: TStrings;
  i: integer;
begin
 // ADir := AddSlash(ADir);
 
if Copy(ADir,length(ADir),1)<>'/' then ADir:=ADir +'/';

 
  if SetCurrentDir(ADir) then
  begin
    Strs := TStringList.Create;
    try
      e := FindFirst('*', faDirectory, sr);
      while e = 0 do begin
        if (sr.Attr=48) and (sr.Name[1] <> '.') then begin
          Strs.Add(ADir + sr.Name);
        end;
          e := FindNext(sr);
      end;
      FindClose(sr);
      if Strs.Count > 0 then
           for i:=Strs.Count-1 downto 0 do begin
            DirListFiles.Add(Strs.Strings[i]);
            DoRest(Strs.Strings[i]);
          end;
    finally
      Strs.Free;
    end;
  end;
end;
//#############################################################################
function Tsystem.GET_PID_FROM_PATH(pidPath:string):string;
var
   RegExpr:TRegExpr;
   Files:TStringList;
   logs:Tlogs;
   D:Boolean;
begin
 D:=COMMANDLINE_PARAMETERS('debug');

result:='0';
if not FileExists(pidPath) then exit;
 RegExpr:=TRegExpr.Create;
 RegExpr.Expression:='([0-9]+)';
 logs:=Tlogs.Create;
 Files:=TStringList.Create;
 Files.LoadFromFile(pidPath);
try
   if RegExpr.Exec(Files.Strings[0]) then result:=RegExpr.Match[1];
except
   logs.Debuglogs('Error while read ' + pidPath);
end;
   RegExpr.Free;
Files.Free;
 if D then writeln('SYSTEM_GET_PID ->',result, ' for ' ,pidPath);
end;
//#############################################################################
function Tsystem.PROCESS_EXIST(pid:string):boolean;
var
RegExpr:TRegExpr;
begin

  result:=false;
  pid:=trim(pid);
  if pid='0' then exit(false);
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='^([0-9]+)';
  if not RegExpr.Exec(pid) then exit;
  pid:=RegExpr.Match[1];
  if not fileExists('/proc/' + pid + '/exe') then begin
     exit(false)
  end else begin
      exit(true);
  end;
end;
//#############################################################################
function Tsystem.PROCESS_MEMORY(PID:string):integer;
var
   l:TstringList;
   RegExpr:TRegExpr;
   i:Integer;
   FATHER:integer;
   D:Boolean;
   tempfile:string;
begin
D:=COMMANDLINE_PARAMETERS('debug');
result:=0;

PID:=trim(PID);
if PID='0' then begin
   if D then writeln('PROCESS_MEMORY PID=',PID, ' aborting...');
   exit;
end;

if length(PID)=0 then begin
  if D then writeln('PROCESS_MEMORY PID=NULL aborting...');
   exit;
end;

if D then writeln('PROCESS_MEMORY PID=',PID);
l:=TstringList.Create;

  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='^([0-9]+)';
  if not RegExpr.Exec(PID) then begin
     exit;
  end else begin
      PID:=RegExpr.Match[1];
      if D then writeln('PROCESS_MEMORY FATHER PID after regex=',PID);
  end;


  FATHER:=PROCESS_MEMORY_SINGLE(PID);


 if D then writeln('SYSTEM_PROCESS_MEMORY_FATHER FATHER ',PID,'=',FATHER);

tempfile:='/opt/artica/logs/'+MD5FromString(PID);
if D then writeln('PROCESS_MEMORY -> tempfile=',tempfile);
if D then writeln('PROCESS_MEMORY -> /bin/ps -aeo "%p;%P;%a" --cols 500 >'+tempfile +' 2>&1');

fpsystem('/bin/ps -aeo "%p;%P;%a" --cols 500 >'+tempfile +' 2>&1');
if not FileExists(tempfile) then exit;

try
l.LoadFromFile(tempfile);
RegExpr.Expression:='([0-9]+);\s+'+PID+';.+';
if D then writeln('PROCESS_MEMORY Lines=',l.Count);
for i:=0 to l.Count -1 do begin
    if RegExpr.Exec(l.Strings[i]) then begin
          if D then writeln('FOUND ->',RegExpr.Match[1]);
          FATHER:=FATHER+PROCESS_MEMORY_SINGLE(RegExpr.Match[1]);
    end else begin
       // if D then writeln('Could not parse ' + l.Strings[i] + ' regex ' + RegExpr.Expression);
    end;
end;
except
   writeln('PROCESS_MEMORY FATHER error on PID ',PID);
end;
DeleteFile(tempfile);
result:=FATHER;

end;
//##############################################################################
function Tsystem.PROCESS_MEMORY_SINGLE(PID:string):integer;
var
   S:Tstringlist;
   RegExpr:TRegExpr;
   I:INTEGER;
   D:boolean;
begin
     result:=0;
     D:=False;
     if length(PID)=0 then exit;
     if PID='0' then exit;
     D:=COMMANDLINE_PARAMETERS('debug');
     if D then writeln('SYSTEM_PROCESS_MEMORY_SINGLE::->',PID);

     if not FileExists('/proc/' + trim(PID) + '/status') then begin
        if D then writeln('SYSTEM_PROCESS_MEMORY_SINGLE:: Could not find /proc/' + trim(PID) + '/status');
        exit(0);
     end;
     s:=TStringList.Create;
     S.LoadFromFile('/proc/' + trim(PID) + '/status');
     if D then writeln('SYSTEM_PROCESS_MEMORY_SINGLE:: /proc/' + trim(PID) + '/status');
     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='^VmRSS:\s+([0-9]+)';
     for i:=0 to s.Count-1 do begin
       if RegExpr.Exec(s.Strings[i]) then begin
          if D then writeln('SYSTEM_PROCESS_MEMORY_SINGLE :',PID,'=',RegExpr.Match[1],': ',s.Strings[i]);
          result:=StrToInt(trim(RegExpr.Match[1]));
          break;
       end;
     end;

s.free;
RegExpr.free;

end;
//##############################################################################
function Tsystem.MD5FromString(value:string):string;
var
Digest:TMD5Digest;
begin
Digest:=MD5String(value);
exit(MD5Print(Digest));
end;
//##############################################################################
function Tsystem.sudo_path():string;
begin
if FileExists('/usr/bin/sudo') then exit('/usr/bin/sudo');
end;
//##############################################################################




function Tsystem.PROCESS_STATUS(PID:string):string;
var
   S:Tstringlist;
   RegExpr:TRegExpr;
   I:INTEGER;
   D:boolean;
begin
     result:='';
     RegExpr:=TRegExpr.Create;

     if length(PID)=0 then exit;
     PID:=trim(PID);
     RegExpr.Expression:='^([0-9]+)';
     if PID='0' then exit;
     D:=False;
     D:=COMMANDLINE_PARAMETERS('debug');


     if D then writeln('SYSTEM_PROCESS_STATUS::->',PID);

     if RegExpr.Exec(PID) then begin
        PID:=RegExpr.Match[1];
        if D then writeln('SYSTEM_PROCESS_STATUS:: AFTER REGEX ->',PID);
     end else begin
        if D then writeln('SYSTEM_PROCESS_STATUS:: BAD MATCH REGEX ->',PID);
        exit;
     end;


     if not FileExists('/proc/' + trim(PID) + '/status') then begin
        if D then writeln('SYSTEM_PROCESS_STATUS:: Could not find /proc/' + trim(PID) + '/status');
        exit('0');
     end;
     s:=TStringList.Create;
     S.LoadFromFile('/proc/' + trim(PID) + '/status');
     if D then writeln('SYSTEM_PROCESS_STATUS:: /proc/' + trim(PID) + '/status');

     RegExpr.Expression:='^State:\s+([A-Z])\s+\(([a-zA-Z]+)\)';
     for i:=0 to s.Count-1 do begin
       if RegExpr.Exec(s.Strings[i]) then begin
          if D then writeln('SYSTEM_PROCESS_STATUS :',PID,'=',RegExpr.Match[2],': ',RegExpr.Match[1],' ',s.Strings[i]);
          result:=trim(RegExpr.Match[2]);
          break;
       end;
     end;

s.free;
RegExpr.free;

end;
//##############################################################################
function Tsystem.FILE_CHOWN(username:string;groupname:string;path:string):boolean;
var
   logs:Tlogs;
begin
   logs:=Tlogs.Create;
   logs.Debuglogs('Tsystem.FILE_CHOWN /bin/chown -R '+ username + ':' + groupname + ' ' + path);
   fpsystem('/bin/chown -R '+ username + ':' + groupname + ' ' + path);
end;
//##############################################################################
function Tsystem.PROCESS_LIST_PID(processname:string):string;
var
   S:TStringList;
   RegExpr:TRegExpr;
   RegExpr2:TRegExpr;
   i:integer;
   D:boolean;
   pids:string;
begin
     PLISTPID:=TstringList.Create;
     PLISTPID.Clear;
     pids:='';
     D:=COMMANDLINE_PARAMETERS('debug');
     if not D then D:=COMMANDLINE_PARAMETERS('mysql-ps');
     if not fileexists('/bin/ps') then begin
        writeln('Unable to locate /bin/ps');
        end;

     RegExpr:=TRegExpr.create;
     RegExpr2:=TRegExpr.create;
     RegExpr2.Expression:='^([0-9]+)\s+';
     S:=TstringList.Create;
     if D then writeln('/bin/ps -ax >/opt/artica/logs/ps.tmp 2>&1');
     fpsystem('/bin/ps -ax >/opt/artica/logs/ps.tmp 2>&1');
     S.LoadFromFile('/opt/artica/logs/ps.tmp');
     RegExpr.expression:=processname;

     for i:=0 to S.Count -1 do begin

         if RegExpr.Exec(S.Strings[i]) then begin
            // if D then writeln(S.Strings[i]);
             if RegExpr2.Exec(trim(S.Strings[i])) then begin
                   if PROCESS_EXIST(RegExpr2.Match[1]) then begin
                      PLISTPID.Add(RegExpr2.Match[1]);
                      pids:=pids + RegExpr2.Match[1] + ' ';
                      if D then writeln(RegExpr2.Match[1],'-> ',trim(S.Strings[i]));
                   end;
              end else begin
                  if D then writeln('Line ',i, ' Failed RegExpr2 "' + S.Strings[i]+ '"');
              end;

         end else begin
            // if D then writeln('Line ',i, ' Failed');
         end;

     end;

RegExpr.Free;
S.free;
exit(pids);
end;
//##############################################################################


end.
