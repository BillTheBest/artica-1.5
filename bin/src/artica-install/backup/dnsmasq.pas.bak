unit dnsmasq;

{$MODE DELPHI}
{$LONGSTRINGS ON}

interface

uses
    Classes, SysUtils,variants,strutils,IniFiles, Process,logs,unix,
    RegExpr in 'RegExpr.pas',
    zsystem in '/home/dtouzeau/developpement/artica-postfix/bin/src/artica-install/zsystem.pas',
    bind9   in '/home/dtouzeau/developpement/artica-postfix/bin/src/artica-install/bind9.pas';

  type
  tdnsmasq=class


private
     LOGS:Tlogs;
     artica_path:string;
     SYS:Tsystem;
     bind9:Tbind9;



public
    procedure   Free;
    constructor Create(const zSYS:Tsystem);
      function  DNSMASQ_SET_VALUE(key:string;value:string):string;
      function  DNSMASQ_GET_VALUE(key:string):string;
      function  DNSMASQ_BIN_PATH():string;
      function  DNSMASQ_VERSION:string;
      procedure DNSMASQ_START_DAEMON();
      procedure DNSMASQ_STOP_DAEMON();
      function  DNSMASQ_PID():string;
      function  STATUS():string;
      function  Forwarders():string;


END;

implementation

constructor tdnsmasq.Create(const zSYS:Tsystem);
begin
       forcedirectories('/etc/artica-postfix');
       LOGS:=tlogs.Create();
       SYS:=zSYS;

       if not DirectoryExists('/usr/share/artica-postfix') then begin
              artica_path:=ParamStr(0);
              artica_path:=ExtractFilePath(artica_path);
              artica_path:=AnsiReplaceText(artica_path,'/bin/','');

      end else begin
          artica_path:='/usr/share/artica-postfix';
      end;
end;
//##############################################################################
procedure tdnsmasq.free();
begin
    logs.Free;
end;
//##############################################################################
function tdnsmasq.DNSMASQ_GET_VALUE(key:string):string;
var
    RegExpr:TRegExpr;
    FileDatas:TStringList;
    i:integer;
    ValueResulted:string;
begin
   if not FileExists('/etc/dnsmasq.conf') then  exit;
   FileDatas:=TStringList.Create;
   FileDatas.LoadFromFile('/etc/dnsmasq.conf');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='^'+key+'([="''\s]+)(.+)';
   for i:=0 to FileDatas.Count -1 do begin
           if RegExpr.Exec(FileDatas.Strings[i]) then begin
              FileDatas.Free;
              ValueResulted:=RegExpr.Match[2];
              if ValueResulted='"' then ValueResulted:='';
              RegExpr.Free;
              exit(ValueResulted);
           end;

   end;
   FileDatas.Free;
   RegExpr.Free;

end;
//#############################################################################
function tdnsmasq.Forwarders():string;
var
    RegExpr:TRegExpr;
    FileDatas:TStringList;
    i:integer;
begin
   if not FileExists('/etc/dnsmasq.resolv.conf') then  exit;
   FileDatas:=TStringList.Create;
   FileDatas.LoadFromFile('/etc/dnsmasq.resolv.conf');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='^nameserver\s+(.+)';
   for i:=0 to FileDatas.Count -1 do begin
           if RegExpr.Exec(FileDatas.Strings[i]) then begin
              result:=result + RegExpr.Match[1]+';';
           end;

   end;
   FileDatas.Free;
   RegExpr.Free;

end;
//#############################################################################
function tdnsmasq.DNSMASQ_SET_VALUE(key:string;value:string):string;
var
    RegExpr:TRegExpr;
    FileDatas:TStringList;
    i:integer;
    FileToEdit:string;
begin
   FileToEdit:='/etc/dnsmasq.conf';
   if not FileExists(FileToEdit) then  fpsystem('/bin/touch ' + FileToEdit);
   FileDatas:=TStringList.Create;
   FileDatas.LoadFromFile(FileToEdit);
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='^'+key+'([="''\s]+)(.+)';
   for i:=0 to FileDatas.Count -1 do begin
           if RegExpr.Exec(FileDatas.Strings[i]) then begin
                FileDatas.Strings[i]:=key + '=' + value;
                FileDatas.SaveToFile(FileToEdit);
                FileDatas.Free;
                RegExpr.Free;
                exit;

           end;

   end;

  FileDatas.Add(key + '=' + value);
  FileDatas.SaveToFile(FileToEdit);
  FileDatas.Free;
  RegExpr.Free;
  result:='';

end;
//#############################################################################
function tdnsmasq.DNSMASQ_BIN_PATH():string;
begin
    if FileExists('/usr/sbin/dnsmasq') then exit('/usr/sbin/dnsmasq');
    if FileExists('/usr/local/sbin/dnsmasq') then exit('/usr/local/sbin/dnsmasq');
end;
//#############################################################################
function tdnsmasq.DNSMASQ_VERSION:string;
var
   binPath:string;
    mem:TStringList;
    commandline:string;
    tmp_file:string;
    RegExpr:TRegExpr;
    i:integer;
begin
    binPath:=DNSMASQ_BIN_PATH;

    if not FileExists(binpath) then begin
       exit;
    end;

    if not FIleExists('/etc/dnsmasq.conf') then exit;

    tmp_file:='/tmp/dnsmasq-ver';
    commandline:=binPath+' -v >'+tmp_file +' 2>&1';
    fpsystem(commandline);
    mem:=TStringList.Create;
    if not FileExists(tmp_file) then exit;
    mem.LoadFromFile(tmp_file);



    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='Dnsmasq version\s+([0-9\.]+)';

     for i:=0 to mem.Count-1 do begin
       if RegExpr.Exec(mem.Strings[i]) then begin
          result:=RegExpr.Match[1];
          break;
       end;

     end;
     mem.Free;
     RegExpr.Free;

end;
//#############################################################################
procedure tdnsmasq.DNSMASQ_START_DAEMON();
var bin_path,pid,cache,cachecmd:string;
begin
    bind9:=tbind9.Create(SYS);
    if FileExists(bind9.bin_path()) then begin
       logs.DebugLogs('DNSMASQ_START_DAEMON() bind9 exists and replace dnsmasq features...');
       DNSMASQ_STOP_DAEMON();
       exit;
    end;

    
    
    cache:=DNSMASQ_GET_VALUE('cache-size');
    bin_path:=DNSMASQ_BIN_PATH();
    if not FileExists(bin_path) then begin
      // logs.DebugLogs('Starting......: dnsmasq is not installed ('+bin_path+')...');
       exit;
    end;
    pid:=DNSMASQ_PID();
    if SYS.PROCESS_EXIST(pid) then begin
       logs.DebugLogs('Starting......: dnsmasq already exists using pid ' + pid+ '...');
       exit;
    end;
     if not FIleExists('/etc/dnsmasq.conf') then exit;
    if FileExists('/etc/init.d/dnsmasq') then begin
       fpsystem('/etc/init.d/dnsmasq start');
       exit;
    end;

    if length(cache)=0 then begin
       cachecmd:=' --cache-size=1000';
    end;
    forceDirectories('/var/log/dnsmasq');
    logs.DebugLogs('Starting......: dnsmasq daemon...');
    fpsystem(bin_path + ' --pid-file=/var/run/dnsmasq.pid --conf-file=/etc/dnsmasq.conf --user=root --log-facility=/var/log/dnsmasq/dnsmasq.log' + cachecmd);
end;
//##############################################################################
function tdnsmasq.DNSMASQ_PID():string;
begin
result:='';
if not FileExists('/var/run/dnsmasq.pid') then exit();
result:=SYS.GET_PID_FROM_PATH('/var/run/dnsmasq.pid');
end;
//##############################################################################
procedure tdnsmasq.DNSMASQ_STOP_DAEMON();
var bin_path,pid:string;
begin

    bin_path:=DNSMASQ_BIN_PATH();
    if not FileExists(bin_path) then exit;
    pid:=DNSMASQ_PID();
    if not SYS.PROCESS_EXIST(pid) then begin
       writeln('Stopping dnsmasq.........: Already stopped');
       exit;
    end;

    if FileExists('/etc/init.d/dnsmasq') then begin
       fpsystem('/etc/init.d/dnsmasq stop');
       exit;
    end;
    writeln('Stopping dnsmasq.........: ' + pid + ' PID');
    fpsystem('kill ' + pid);
end;
//##############################################################################
function tdnsmasq.STATUS():string;
var
   ini:TstringList;
   pid:string;
   bind9:tbind9;
   service_disabled:string;
begin
if not FileExists(DNSMASQ_BIN_PATH()) then exit;
ini:=TstringList.Create;
pid:=DNSMASQ_PID();
bind9:=tbind9.Create(SYS);


service_disabled:='1';
if not FileExists('/etc/dnsmasq.conf') then service_disabled:='0';
if FileExists(bind9.bin_path()) then  service_disabled:='0';
   bind9.free;


   ini.Add('[DNSMASQ]');
   ini.Add('service_name=APP_DNSMASQ');
   ini.Add('service_cmd=dnsmasq');
   ini.Add('service_disabled='+service_disabled);
   ini.Add('master_version='+DNSMASQ_VERSION());

     if service_disabled='0' then begin
         result:=ini.Text;
         ini.free;
         SYS.MONIT_DELETE('APP_DNSMASQ');
         exit;
     end;

      if SYS.MONIT_CONFIG('APP_DNSMASQ','/var/run/dnsmasq.pid','dnsmasq') then begin
         ini.Add('monit=1');
         result:=ini.Text;
         ini.free;
         exit;
      end;


   if SYS.PROCESS_EXIST(pid) then ini.Add('running=1') else  ini.Add('running=0');
   ini.Add('application_installed=1');
   ini.Add('master_pid='+ pid);
   ini.Add('master_memory=' + IntToStr(SYS.PROCESS_MEMORY(pid)));
   ini.Add('status='+SYS.PROCESS_STATUS(pid));

   result:=ini.Text;
   ini.free;


end;
//#########################################################################################
end.

