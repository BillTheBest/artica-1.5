unit postfix_class;

{$MODE DELPHI}
{$LONGSTRINGS ON}

interface

uses
    Classes, SysUtils,variants,strutils,IniFiles, Process,md5,logs,unix,RegExpr in 'RegExpr.pas',zsystem,openldap;

  type
  tpostfix=class


private
     LOGS:Tlogs;
     D:boolean;
     GLOBAL_INI:TiniFIle;
     SYS:TSystem;
     artica_path:string;
     postfixServices:TstringList;
    dbg:boolean;
    PROCEDURE SET_LDAP_COMPLIANCE();
    procedure POSTFIX_CHECK_LDAP();
    procedure LOAD_MASTERCF_SERVICES();
    function  VERIF_MASTERCF_SERVICES(service:string):boolean;
    procedure ARTICA_WHITELIST_MASTERCF_SERVICE();
    procedure ARTICA_BLACKLIST_MASTERCF_SERVICE();
    procedure POSTFIX_ENABLE_SMTP_SASL();
public
    procedure   Free;
    constructor Create(const zSYS:Tsystem);
    procedure   SAVE_CERTIFICATE();
    function    READ_CONF(key:string):string;
    procedure   POSTFIX_STOP();
    function    STATUS():string;
    function    MAIN_CONF_PATH():string;
    function    WRITE_CONF(key:string;value:string):string;
    function    SOCKET_PATH():string;
    procedure   POSTFIX_START();
    function    POSTFIX_PID():string;
    function    POSTFIX_PID_PATH():string;
    function    POSFTIX_POSTCONF_PATH():string;
    function    POSFTIX_MASTER_CF_PATH:string;
    function    POSTFIX_VERSION():string;
    procedure   POSTFIX_CHECK_SASLDB2();
    function    SASLPASSWD_PATH():string;
    function    POSTFIX_QUEUE_DIRECTORY():string;
    procedure   POSTFIX_INITIALIZE_FOLDERS();
    function    POSTFIX_STATUS():string;
    function    POSTFIX_INT_VERSION(string_version:string):integer;
    procedure   POSTFIX_INI_TD();
    function    POSTFIX_LDAP_COMPLIANCE():boolean;
    procedure   POSFTIX_VERIFY_MAINCF();
    procedure   POSTFIX_RELOAD();
    function    POSFTIX_READ_QUEUE(queuename:string):string;
    function    POSTFIX_READ_QUEUE_MESSAGE(MessageID:string):string;
    function    POSTFIX_EXTRACT_MAINCF(key:string):string;
    procedure   POSTFIX_MOVE_CORRUPTED_QUEUE();
    function    master_path:string;
    function    Is_CYRUS_enabled_in_master_cf():boolean;
    function    postfix_path():string;
    function    FIX_RETRY_DAEMON():boolean;
    procedure   ENABLE_SSL(add:boolean);
    procedure   GENERATE_CERTIFICATE();
    procedure   CONFORMITE_MASTERCF();
    function    QUEUE_PATH():string;
    procedure   VERIFY_BOUNCE_TEMPLATE();
    procedure   ENABLE_SUBMISSION(add:boolean);
    function    MSMTP_VERSION():string;
    function    PFLOGSUMM_VERSION():string;
    procedure   unrestricted_senders();
    procedure   postmap_standard_db();

    function    MON():string;



    procedure    MYSQMAIL_START();
    procedure    MYSQMAIL_STOP();
    function     MYSQMAIL_STATUS():string;
                 MYSQMAIL_STARTUP:string;
    function     MYSQMAIL_PID():string;


    function     gnarwl_VERSION():string;
    function     gnarwl_path():string;
    procedure    gnarwl_set_config();
    procedure    gnarwl_MASTERCF_SERVICE();

END;

implementation

constructor tpostfix.Create(const zSYS:Tsystem);
begin
       forcedirectories('/etc/artica-postfix');
       forcedirectories('/opt/artica/tmp');
       LOGS:=tlogs.Create();
       SYS:=zSYS;
       dbg:=LOGS.COMMANDLINE_PARAMETERS('debug');
       MYSQMAIL_STARTUP:=SYS.LOCATE_PHP5_BIN()+' /usr/share/artica-postfix/exec.maillog.php';

       if not DirectoryExists('/usr/share/artica-postfix') then begin
              artica_path:=ParamStr(0);
              artica_path:=ExtractFilePath(artica_path);
              artica_path:=AnsiReplaceText(artica_path,'/bin/','');

      end else begin
          artica_path:='/usr/share/artica-postfix';
      end;
end;
//##############################################################################
procedure tpostfix.free();
begin
    logs.Free;
    postfixServices.free;
end;
//##############################################################################
function tpostfix.MAIN_CONF_PATH():string;
begin
    if FileExists('/etc/dkim-filter.conf') then exit('/etc/dkim-filter.conf');
    if FileExists('/etc/mail/dkim-filter.conf') then exit('/etc/mail/dkim-filter.conf');

end;
//##############################################################################
function tpostfix.SASLPASSWD_PATH():string;
begin
  if FileExists('/opt/artica/bin/saslpasswd2') then exit('/opt/artica/bin/saslpasswd2');
  if FileExists('/usr/sbin/saslpasswd2') then exit('/usr/sbin/saslpasswd2');
end;
//##############################################################################
function tpostfix.master_path:string;
begin
if FIleExists('/usr/lib/postfix/master') then exit('/usr/lib/postfix/master');
end;
//##############################################################################
function tpostfix.postfix_path():string;
begin
if FIleExists('/usr/sbin/postfix') then exit('/usr/sbin/postfix');
end;
//##############################################################################
function tpostfix.gnarwl_path():string;
begin
if FIleExists('/usr/bin/gnarwl') then exit('/usr/bin/gnarwl');
end;
//##############################################################################
function tpostfix.gnarwl_VERSION():string;
var
    path,ver:string;
    tmp:string;
    RegExpr:TRegExpr;
    l:Tstringlist;
    i:integer;
    D:boolean;
begin
D:=false;
D:=SYS.COMMANDLINE_PARAMETERS('--verbose');
result:=trim(SYS.GET_CACHE_VERSION('APP_GNARWL'));
  if not D then if length(result)>0 then exit;
   tmp:=logs.FILE_TEMP();
   RegExpr:=TRegExpr.Create;
   if not FileExists(gnarwl_path()) then exit;
   if d then writeln(gnarwl_path() +' -h >' + tmp + ' 2>&1');
   fpsystem(gnarwl_path() +' -h >' + tmp + ' 2>&1');
   if not fileExists(tmp) then begin
      writeln('unable to stat ' + tmp);
      exit;
   end;

   l:=Tstringlist.Create;
   l.LoadFromFile(tmp);
   RegExpr.Expression:='^GNARWL\(v([0-9\.]+)';
   for i:=0 to l.Count-1 do begin
       writeln(l.Strings[i]);
       if RegExpr.Exec(l.Strings[i]) then begin
          result:=trim(RegExpr.Match[1]);
          break;
       end;
   end;


   l.free;
   logs.DeleteFile(tmp);

   SYS.SET_CACHE_VERSION('APP_GNARWL',result);

end;
//#############################################################################
procedure tpostfix.gnarwl_set_config();
var
l:TstringList;
xldap:topenldap;

begin

l:=Tstringlist.Create;
xldap:=topenldap.Create;

l.Add('map_sender $sender');
l.Add('map_receiver $recepient');
l.Add('map_subject $subject');
l.Add('map_field $begin vacationStart');
l.Add('map_field $end vacationEnd ');
l.Add('map_field $fullname cn');
l.Add('map_field $deputy vacationForward');
l.Add('server '+xldap.ldap_settings.servername);
l.Add('port '+xldap.ldap_settings.Port);
l.Add('scope sub');
l.Add('login cn='+xldap.ldap_settings.admin+','+xldap.ldap_settings.suffix);
l.Add('password '+xldap.ldap_settings.password);
l.Add('protocol 3');
l.Add('base '+xldap.ldap_settings.suffix);
l.Add('queryfilter (&(mail=$recepient)(vacationActive=TRUE))');
l.Add('result vacationInfo');
l.Add('blockfiles /var/lib/gnarwl/block/');
l.Add('umask 0644');
l.Add('blockexpire 48');
l.Add('mta '+artica_path+'/bin/artica-msmtp --syslog=on --host=127.0.0.1 --read-envelope-from --read-recipients --');
l.Add('maxreceivers 64');
l.Add('maxheader 512');
l.Add('charset ISO8859-1');
l.Add('badheaders /var/lib/gnarwl/badheaders.db');
l.Add('blacklist /var/lib/gnarwl/blacklist.db');
l.Add('forceheader /var/lib/gnarwl/header.txt');
l.Add('forcefooter /var/lib/gnarwl/footer.txt');
l.Add('recvheader To Cc');
l.Add('# 0 - Critical messages only. Anything, gnarwl cannot continue afterwards.');
l.Add('# 1 - Warnings. Gnarwl can continue, but with reduced functionality.');
l.Add('# 2 - Info. General information on gnarwl''s status.');
l.Add('# 3 - Debug. ');
l.Add('loglevel 1');

try
   l.SaveToFile('/etc/gnarwl.cfg');
except
   logs.Syslogs('tpostfix.gnarwl_set_config():: FATAL ERROR While saving /etc/gnarwl.cfg');
end;

Logs.OutputCmd('/bin/chown gnarwl:gnarwl /etc/gnarwl.cfg');
Logs.OutputCmd('/bin/chmod 644 /etc/gnarwl.cfg');

l.free;
xldap.free;

end;
//#############################################################################

function tpostfix.POSTFIX_VERSION():string;
var
    path,ver:string;
    tmp:string;
    RegExpr:TRegExpr;

begin
result:=SYS.GET_CACHE_VERSION('APP_POSTFIX');
   if length(result)>0 then exit;
   tmp:=logs.FILE_TEMP();
   RegExpr:=TRegExpr.Create;
   if not FileExists(POSFTIX_POSTCONF_PATH()) then exit;
   fpsystem(POSFTIX_POSTCONF_PATH() +' -h mail_version >' + tmp + ' 2>&1');
   if not fileExists(tmp) then exit;
   ver:=logs.ReadFromFile(tmp);
   RegExpr.Expression:='([0-9\.]+)';
   RegExpr.Exec(ver);
   
   logs.DeleteFile(tmp);
   result:=trim(RegExpr.Match[1]);
   SYS.SET_CACHE_VERSION('APP_POSTFIX',result);

end;
//#############################################################################
function tpostfix.MSMTP_VERSION():string;
var
    path,ver:string;
    tmp:string;
    RegExpr:TRegExpr;
    l:TstringList;
    i:integer;
begin
result:=SYS.GET_CACHE_VERSION('APP_MSMTP');
   if length(result)>0 then exit;
   tmp:=logs.FILE_TEMP();
   RegExpr:=TRegExpr.Create;
   if not FileExists('/usr/share/artica-postfix/bin/artica-msmtp') then exit;
   fpsystem('/usr/share/artica-postfix/bin/artica-msmtp --version >' + tmp + ' 2>&1');
   if not fileExists(tmp) then exit;

   l:=TstringList.Create;
   l.LoadFromFile(tmp);
   RegExpr.Expression:='^msmtp version\s+([0-9\.]+)';
   for i:=0 to l.Count-1 do begin
       if RegExpr.Exec(l.Strings[i]) then begin
          result:=RegExpr.Match[1];
          break;
       end;
   end;

   if length(result)>0 then SYS.SET_CACHE_VERSION('APP_MSMTP',result);
   l.free;
   RegExpr.free;

end;
//#############################################################################
function tpostfix.PFLOGSUMM_VERSION():string;
var
    path,ver:string;
    tmp:string;
    RegExpr:TRegExpr;
    l:TstringList;
    i:integer;
begin



result:=SYS.GET_CACHE_VERSION('APP_PFLOGSUMM');
   if length(result)>0 then exit;
   tmp:=logs.FILE_TEMP();
   RegExpr:=TRegExpr.Create;
   if not FileExists('/usr/sbin/pflogsumm') then exit;
   fpsystem('/usr/sbin/pflogsumm --version >' + tmp + ' 2>&1');
   if not fileExists(tmp) then exit;

   l:=TstringList.Create;
   l.LoadFromFile(tmp);
   RegExpr.Expression:='^pflogsumm.pl\s+([0-9\.]+)';
   for i:=0 to l.Count-1 do begin
       if RegExpr.Exec(l.Strings[i]) then begin
          result:=RegExpr.Match[1];
          break;
       end;
   end;

   if length(result)>0 then SYS.SET_CACHE_VERSION('APP_PFLOGSUMM',result);
   l.free;
   RegExpr.free;

end;
//#############################################################################
function tpostfix.POSTFIX_INT_VERSION(string_version:string):longint;
var
    ver,vercompile:string;
    int:longint;
    RegExpr:TRegExpr;

begin
   result:=0;
   int:=0;
   RegExpr:=TRegExpr.Create;
   writeln(string_version);
   RegExpr.Expression:='([0-9]+)\.([0-9]+)\.([0-9]+)';
   if RegExpr.Exec(string_version) then begin
      vercompile:=RegExpr.Match[1]+RegExpr.Match[2]+RegExpr.Match[3];
     if not TryStrToint(vercompile,int) then writeln('failed');
     result:=int;
      exit;
   end;


   RegExpr.Expression:='([0-9]+)\.([0-9]+)-([0-9]+)';
   if RegExpr.Exec(string_version) then begin
      vercompile:=RegExpr.Match[1]+RegExpr.Match[2]+'0';
      TryStrToint(vercompile,result);
      exit;
   end;

   RegExpr.free;

end;
//#############################################################################
function tpostfix.POSTFIX_QUEUE_DIRECTORY():string;
var
    path,ver:string;
    tmp:string;
begin
   if not FileExists(POSFTIX_POSTCONF_PATH()) then exit;
   tmp:=logs.FILE_TEMP();
   fpsystem(POSFTIX_POSTCONF_PATH() +' -h queue_directory >'+tmp+' 2>&1');
   if not FileExists(tmp) then exit;
   ver:=logs.ReadFromFile(tmp);
   logs.DeleteFile(tmp);
   exit(trim(ver));

end;
//#############################################################################

function tpostfix.READ_CONF(key:string):string;
var
    RegExpr:TRegExpr;
    FileDatas:TStringList;
    i:integer;
begin
 if not FileExists(MAIN_CONF_PATH()) then exit;
 FileDatas:=TstringList.Create;
 FileDatas.LoadFromFile(MAIN_CONF_PATH());
 RegExpr:=TRegExpr.Create;
 RegExpr.Expression:='^'+key+'\s+(.+)';
 for i:=0 to FileDatas.Count-1 do begin
     if RegExpr.Exec(FileDatas.Strings[i]) then begin
         result:=RegExpr.Match[1];
         break;
     end;

 end;
         FileDatas.Free;
         RegExpr.Free;

end;
//##############################################################################
function tpostfix.SOCKET_PATH():string;
begin
exit('/var/run/dkim-filter/dkim-filter.sock');
end;
//##############################################################################
function tpostfix.WRITE_CONF(key:string;value:string):string;
var
    RegExpr:TRegExpr;
    FileDatas:TStringList;
    i:integer;
    found:boolean;
    main_path:string;
begin
 found:=false;
 main_path:=MAIN_CONF_PATH();
 if not FileExists(main_path) then exit;
 FileDatas:=TstringList.Create;
 FileDatas.LoadFromFile(main_path);
 RegExpr:=TRegExpr.Create;
 RegExpr.Expression:='^'+key+'\s+(.+)';
 for i:=0 to FileDatas.Count-1 do begin
     if RegExpr.Exec(FileDatas.Strings[i]) then begin
         FileDatas.Strings[i]:=key+chr(9)+value;
         FileDatas.SaveToFile(main_path);
         found:=true;
         break;
     end;

 end;

         if not found then begin
            FileDatas.Add(key+chr(9)+value);
            FileDatas.SaveToFile(main_path);
         end;


         FileDatas.Free;
         RegExpr.Free;

end;
//##############################################################################
PROCEDURE tpostfix.SET_LDAP_COMPLIANCE();
begin
  if not FileExists(POSFTIX_POSTCONF_PATH()) then exit;
  if POSTFIX_LDAP_COMPLIANCE() then begin
         logs.set_INFOS('postfix_ldap_compliance','1');
         exit;
  end;

  logs.set_INFOS('postfix_ldap_compliance','0');

end;
//##############################################################################
procedure tpostfix.POSTFIX_CHECK_LDAP();

begin

if not POSTFIX_LDAP_COMPLIANCE() then begin
   if FileExists('/home/artica/packages/postfix-ldap.deb') then begin
       if FIleExists('/usr/bin/dpkg') then begin
            fpsystem('/usr/bin/dpkg -i /home/artica/packages/postfix-ldap.deb');
       end;
   end;

end;

end;
//##############################################################################
procedure tpostfix.POSFTIX_VERIFY_MAINCF();


var
   inet_interfaces,mailbox_transport:string;
   D:boolean;
   list2:Tstringlist;
begin

       if not FileExists(POSFTIX_POSTCONF_PATH()) then begin
           logs.Debuglogs('POSFTIX_VERIFY_MAINCF() -> POSFTIX_POSTCONF_PATH !! null !!');
           exit;
        end;


        if FileExists('/etc/postfix/post-install') then begin
           if D then writeln('POSFTIX_VERIFY_MAINCF() -> /etc/postfix/post-install create-missing');
           fpsystem('/etc/postfix/post-install create-missing');
        end;


         if FileExists('/etc/artica-postfix/settings/Daemons/PostfixMainCfFile') then begin
            fpsystem('/bin/cp /etc/artica-postfix/settings/Daemons/PostfixMainCfFile /etc/postfix/main.cf');
         end;


  logs.DebugLogs('Starting......: postfix creating /etc/postfix/sasl/smtpd.conf');
  list2:=Tstringlist.Create;
  list2.Add('pwcheck_method: saslauthd');
  list2.Add('mech_list: PLAIN LOGIN CRAM-MD5 DIGEST-MD5');
  list2.Add('log_level: 5');
  forcedirectories('/etc/postfix/sasl');
  try
     list2.SaveToFile('/etc/postfix/sasl/smtpd.conf');
  except
  logs.Syslogs('tpostfix.POSFTIX_VERIFY_MAINCF():: unable to write /etc/postfix/sasl/smtpd.conf');
  end;


  if not FileExists('/usr/lib/sasl2/smtpd.conf') then logs.OutputCmd('/bin/ln -s /etc/postfix/sasl/smtpd.conf  /usr/lib/sasl2/smtpd.conf');



        if D then writeln('POSFTIX_VERIFY_MAINCF() -> POSTFIX_EXTRACT_MAINCF(inet_interfaces)');
        inet_interfaces:=POSTFIX_EXTRACT_MAINCF('inet_interfaces');
        logs.Debuglogs('POSFTIX_VERIFY_MAINCF:inet_interfaces=' + inet_interfaces);

        if length(inet_interfaces)=0 then begin
           logs.Debuglogs('POSFTIX_VERIFY_MAINCF:inet_interfaces is null change to "inet_interfaces=all"');
           fpsystem(POSFTIX_POSTCONF_PATH() + ' -e "inet_interfaces=all"');
        end;

        if inet_interfaces=', localhost' then begin
           logs.Debuglogs('POSFTIX_VERIFY_MAINCF:inet_interfaces is ", localhost" change to "inet_interfaces=all"');
           fpsystem(POSFTIX_POSTCONF_PATH() +' -e "inet_interfaces=all"');
        end;

        if FileExists('/etc/postfix/bounce.template.cf') then fpsystem('/bin/chown root:root /etc/postfix/bounce.template.cf >/dev/null 2>&1');


        mailbox_transport:=POSTFIX_EXTRACT_MAINCF('mailbox_transport');
        logs.Debuglogs('POSFTIX_VERIFY_MAINCF:mailbox_transport=' + mailbox_transport);



end;
//#####################################################################################
procedure tpostfix.MYSQMAIL_START();
var
   pid:string;
   log_path:string;
   count:integer;
   cmd:string;
   stime:string;
begin



log_path:=SYS.MAILLOG_PATH();


pid:=MYSQMAIL_PID();
if SYS.PROCESS_EXIST(pid) then begin
      logs.DebugLogs('Starting......: artica-postfix realtime logs already running with pid '+pid);
      exit;
end;



if not FileExists(log_path) then begin
   logs.Syslogs('Starting......: artica-postfix realtime logs unable to locate mail logs !!');
   exit;
end;
logs.DebugLogs('Starting......: artica-postfix realtime logs path: '+log_path);



stime:=logs.DateTimeNowSQL();
stime:=AnsiReplaceText(stime,' ','-');
stime:=AnsiReplaceText(stime,':','-');
cmd:='/usr/bin/tail -f -n 0 '+log_path+'|'+MYSQMAIL_STARTUP+' >/var/log/artica-postfix/postfix-logger-start-'+stime+' 2>&1 &';
logs.Debuglogs(cmd);
fpsystem(cmd);
pid:=SYS.PIDOF_PATTERN(MYSQMAIL_STARTUP);
count:=0;
while not SYS.PROCESS_EXIST(pid) do begin

        sleep(100);
        inc(count);
        if count>40 then begin
           logs.DebugLogs('Starting......: artica-postfix realtime logs (timeout)');
           break;
        end;
        pid:=SYS.PIDOF_PATTERN(MYSQMAIL_STARTUP);
  end;


  pid:=SYS.PIDOF_PATTERN(MYSQMAIL_STARTUP);
if SYS.PROCESS_EXIST(pid) then begin
      logs.DebugLogs('Starting......: artica-postfix realtime logs success with pid '+pid);
      exit;
end else begin
    logs.DebugLogs('Starting......: artica-postfix realtime logs failed');
end;
end;
//#####################################################################################
function tpostfix.MYSQMAIL_STATUS():string;
var
ini:TstringList;
pid:string;
begin
   pid:=MYSQMAIL_PID();
   ini:=TstringList.Create;
   ini.Add('[ARTICA_MYSQMAIL]');
      if SYS.PROCESS_EXIST(pid) then ini.Add('running=1') else  ini.Add('running=0');
      ini.Add('application_installed=1');
      ini.Add('master_pid='+ pid);
      ini.Add('master_memory=' + IntToStr(SYS.PROCESS_MEMORY(pid)));
      ini.Add('master_version=' + SYS.ReadFileIntoString(artica_path+'/VERSION'));
      ini.Add('status='+SYS.PROCESS_STATUS(pid));
      ini.Add('service_name=APP_ARTICA_MYSQMAIL');
      ini.Add('service_cmd=postfix-logger');

   result:=ini.Text;
   ini.free;
end;
//#####################################################################################
function tpostfix.MYSQMAIL_PID():string;
var
   pid:string;
begin

if FileExists('/etc/artica-postfix/exec.maillog.php.pid') then begin
   pid:=SYS.GET_PID_FROM_PATH('/etc/artica-postfix/exec.maillog.php.pid');
   if SYS.PROCESS_EXIST(pid) then result:=pid;
   exit;
end;


result:=SYS.PIDOF_PATTERN(MYSQMAIL_STARTUP);
end;
//#####################################################################################



procedure tpostfix.MYSQMAIL_STOP();
var
   pid:string;
   log_path:string;
begin
log_path:=SYS.MAILLOG_PATH();
pid:=MYSQMAIL_PID();

if SYS.PROCESS_EXIST(pid) then begin
      writeln('artica-postfix realtime logs.: Stopping pid '+pid);
      while SYS.PROCESS_EXIST(pid) do begin
           fpsystem('/bin/kill '+pid);
           sleep(100);
           pid:=MYSQMAIL_PID();
      end;
end else begin
      writeln('artica-postfix realtime logs.: Already stopped');
      exit;
end;

pid:=SYS.PIDOF_PATTERN(MYSQMAIL_STARTUP);
if not SYS.PROCESS_EXIST(pid) then begin
      writeln('artica-postfix realtime logs.: stopped');
end else begin
      writeln('artica-postfix realtime logs.: Failed to stop');
end;

end;
//#####################################################################################

function tpostfix.POSTFIX_EXTRACT_MAINCF(key:string):string;
var
   List:TstringList;
   RegExpr:TRegExpr;
   i:integer;

begin

    if not FileExists('/etc/postfix/main.cf') then exit;


    try
    list:=TstringList.Create;
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='^' + key + '[=\s]+(.+)';

    list.LoadFromFile('/etc/postfix/main.cf');
    For i:=0 to list.Count -1 do begin

         if RegExpr.Exec(list.Strings[i]) then begin
            result:=RegExpr.Match[1];
            break;
         end;
    end;

    finally
    RegExpr.Free;
    List.free;
    end;

end;
//#####################################################################################
procedure tpostfix.VERIFY_BOUNCE_TEMPLATE();
var bounce_template_file:string;

begin
  bounce_template_file:=POSTFIX_EXTRACT_MAINCF(bounce_template_file);
  if length(bounce_template_file)=0 then exit;
  if not FileExists(bounce_template_file) then begin
        logs.DebugLogs('Starting......: Postfix daemon load default bounce template file');
        logs.OutputCmd('/bin/cp '+artica_path+'/bin/install/postfix/bounce.cf.default '+bounce_template_file);
  end;
end;
//#####################################################################################

procedure tpostfix.POSTFIX_RELOAD();
var pid:string;
begin

        logs.Debuglogs('POSTFIX_START:: Start POSTFIX service server ');
        logs.Debuglogs('POSTFIX_START:: Pid path="'+POSTFIX_PID_PATH()+'"');
        logs.Debuglogs('POSTFIX_START:: Version="'+POSTFIX_VERSION()+'"');
        logs.Debuglogs('POSTFIX_START:: queue directory="'+POSTFIX_QUEUE_DIRECTORY()+'"');

pid:=POSTFIX_PID();

POSTFIX_INI_TD();

POSTFIX_CHECK_LDAP();

SET_LDAP_COMPLIANCE();

POSTFIX_INITIALIZE_FOLDERS();

POSTFIX_CHECK_SASLDB2();

POSFTIX_VERIFY_MAINCF();

VERIFY_BOUNCE_TEMPLATE();

gnarwl_set_config();

gnarwl_MASTERCF_SERVICE();

CONFORMITE_MASTERCF();

ARTICA_WHITELIST_MASTERCF_SERVICE();

ARTICA_BLACKLIST_MASTERCF_SERVICE();

GENERATE_CERTIFICATE();

MYSQMAIL_STOP();

MYSQMAIL_START();

POSTFIX_ENABLE_SMTP_SASL();

unrestricted_senders();

postmap_standard_db();

if FIleExists('/etc/init.d/sendmail') then begin
    logs.Debuglogs('POSTFIX_START:: stopping sendmail.. ');
    logs.OutputCmd('/etc/init.d/sendmail stop >/dev/null 2>&1');
end;


        SYS.AddShell('postfix');

if SYS.PROCESS_EXIST(pid) then begin
   if fileExists('/usr/sbin/postfix') then begin
      fpsystem('/usr/sbin/postfix reload >/dev/null 2>&1');
      exit;
   end;
end;

if fileExists('/usr/sbin/postfix') then begin
   fpsystem('/usr/sbin/postfix start >/dev/null 2>&1');
   exit;
end;

end;
//#####################################################################################
procedure tpostfix.postmap_standard_db();
begin
 if FileExists('/etc/postfix/local_domains') then begin
    logs.DebugLogs('Starting......: postmap local_domains');
    logs.OutputCmd('postmap hash:/etc/postfix/local_domains');
 end;

 if FileExists('/etc/postfix/unrestricted_senders') then begin
    logs.DebugLogs('Starting......: postmap unrestricted_senders');
    logs.OutputCmd('postmap hash:/etc/postfix/unrestricted_senders');
 end;

end;
//#####################################################################################
procedure tpostfix.POSTFIX_MOVE_CORRUPTED_QUEUE();
var
   queue:string;
   postfix_queue:string;
begin
postfix_queue:=POSTFIX_QUEUE_DIRECTORY();
queue:=postfix_queue+'/corrupt';

if DirectoryExists(queue) then begin
   writeln('move ',SYS.DirectoryCountFiles(queue),' email(s)');
   logs.OutputCmd('/bin/mv '+queue+'/* '+postfix_queue+'/maildrop/',true);
end else begin
    writeln('Unable to stat '+queue);
    exit;
end;

writeln('Strage area store ',SYS.DirectoryCountFiles(queue),' emails after operation');

end;
//#####################################################################################



function tpostfix.POSTFIX_LDAP_COMPLIANCE():boolean;
var
   LIST:TstringList;
   i:integer;
   D:Boolean;
begin
  result:=false;
 if not FileExists(POSFTIX_POSTCONF_PATH()) then exit;
 if FileExists('/etc/artica-postfix/postconf-m.conf') then begin
    if SYS.FILE_TIME_BETWEEN_MIN('/etc/artica-postfix/postconf-m.conf')>5 then logs.DeleteFile('/etc/artica-postfix/postconf-m.conf');
 end;
 
 
 
 if not FileExists('/etc/artica-postfix/postconf-m.conf') then fpsystem(POSFTIX_POSTCONF_PATH()+' -m >/etc/artica-postfix/postconf-m.conf 2>&1');
 if not FileExists('/etc/artica-postfix/postconf-m.conf')then exit;
 LIST:=TStringList.Create;
 LIST.LoadFromFile('/etc/artica-postfix/postconf-m.conf');
 for i:=0 to LIST.Count -1 do begin
     if trim(list.Strings[i])='ldap' then begin
        if D then logs.Debuglogs('POSTFIX_LDAP_COMPLIANCE:: ->TRUE');
        result:=true;
        list.free;
        exit;
     end;

 end;
end;
//##############################################################################
procedure tpostfix.unrestricted_senders();
var
   AllowedSMTPTroughtInternet:integer;
   tmpstr:string;
   smtpd_recipient_restrictions:string;
   smtpd_restriction_classes:string;
   RegExpr:TRegExpr;
   ToEnabled:boolean;
   reject_unauth_destination:boolean;
   unrestricted_senders_add:boolean;
   disabled:boolean;
begin
   if not FileExists(POSFTIX_POSTCONF_PATH()) then exit;
   disabled:=false;
   logs.Debuglogs('tpostfix.unrestricted_senders() EnableBlockUsersTroughInternet -> '+SYS.GET_INFO('EnableBlockUsersTroughInternet'));
   if not tryStrToInt(SYS.GET_INFO('EnableBlockUsersTroughInternet'),AllowedSMTPTroughtInternet) then AllowedSMTPTroughtInternet:=0;


   if AllowedSMTPTroughtInternet=0 then begin
      disabled:=true;
   end;

     RegExpr:=TRegExpr.Create;
   tmpstr:=logs.FILE_TEMP();
   fpsystem(POSFTIX_POSTCONF_PATH()+' -h smtpd_recipient_restrictions >'+tmpstr+' 2>&1');
   smtpd_recipient_restrictions:=trim(logs.ReadFromFile(tmpstr));
   logs.DeleteFile(tmpstr);
  if not disabled then
     logs.Debuglogs('Starting......: Postfix filtering Internet user is enabled');

     ToEnabled:=false;
     reject_unauth_destination:=false;
     unrestricted_senders_add:=false;

     RegExpr.Expression:='\/unrestricted_senders';
     if not RegExpr.Exec(smtpd_recipient_restrictions) then begin unrestricted_senders_add:=true;
     RegExpr.Expression:='reject_unauth_destination';
     if not RegExpr.Exec(smtpd_recipient_restrictions) then reject_unauth_destination:=true;
     if unrestricted_senders_add then smtpd_recipient_restrictions:='hash:/etc/postfix/unrestricted_senders,'+smtpd_recipient_restrictions;
     if reject_unauth_destination then smtpd_recipient_restrictions:=smtpd_recipient_restrictions+',reject_unauth_destination';

  end;


   tmpstr:=logs.FILE_TEMP();
   fpsystem(POSFTIX_POSTCONF_PATH()+' -h smtpd_restriction_classes >'+tmpstr+' 2>&1');
   smtpd_restriction_classes:=trim(logs.ReadFromFile(tmpstr));
   if not disabled then begin
      RegExpr.Expression:='auth_relay';
      if not RegExpr.Exec(smtpd_restriction_classes) then begin
            if length(smtpd_restriction_classes)=0 then begin
               smtpd_restriction_classes:='auth_relay';
            end else begin
                smtpd_restriction_classes:=smtpd_restriction_classes+',auth_relay';
            end;
      end;
   end else begin
      RegExpr.Expression:='auth_relay';
      if RegExpr.Exec(smtpd_restriction_classes) then begin
          smtpd_restriction_classes:=AnsiReplaceText(smtpd_restriction_classes,'auth_relay','');
      end;
   end;

   smtpd_restriction_classes:=AnsiReplaceText(smtpd_restriction_classes,',,','');
   if trim(smtpd_restriction_classes)=',' then smtpd_restriction_classes:='';



if disabled then begin
   logs.Debuglogs('Starting......: Postfix filtering Internet user is not enabled');
    smtpd_recipient_restrictions:=AnsiReplaceText(smtpd_recipient_restrictions,'hash:/etc/postfix/unrestricted_senders','');
end;

RegExpr.free;
logs.OutputCmd(POSFTIX_POSTCONF_PATH()+' -e "smtpd_recipient_restrictions='+smtpd_recipient_restrictions+'"');
logs.OutputCmd(POSFTIX_POSTCONF_PATH()+' -e "smtpd_restriction_classes='+smtpd_restriction_classes+'"');
logs.OutputCmd(POSFTIX_POSTCONF_PATH()+' -e "auth_relay=check_recipient_access hash:/etc/postfix/local_domains, reject"');
end;
//##############################################################################





procedure tpostfix.SAVE_CERTIFICATE();
var
   cert:string;
   selector:string;
   setgid:string;
   D:boolean;
   cmd:string;
begin
    D:=false;
    D:=logs.COMMANDLINE_PARAMETERS('html');

    selector:=READ_CONF('Selector');
    forcedirectories('/etc/mail');
    WRITE_CONF('PidFile','/var/run/dkim-filter/dkim-filter.pid');
    WRITE_CONF('Socket','local:/var/run/dkim-filter/dkim-filter.sock');
    WRITE_CONF('KeyFile','/etc/mail/mail.filter.private');
    WRITE_CONF('Domain','/etc/mail/localdomains.txt');
    WRITE_CONF('Selector','mail');
    WRITE_CONF('Syslog','yes');
    WRITE_CONF('AutoRestart','yes');
    WRITE_CONF('X-Header','yes');
    WRITE_CONF('SendReports','yes');
    WRITE_CONF('InternalHosts','/etc/mail/localNetworks.txt');



    fpsystem(artica_path + '/bin/artica-ldap -localdomains /etc/mail/localdomains.txt');
    fpsystem(artica_path + '/bin/artica-ldap -pnetworks /etc/mail/localNetworks.txt');

    fpsystem('/bin/chown postfix:postfix /etc/mail/localdomains.txt'+ ' >/dev/null 2>&1');
    fpsystem('/bin/chown postfix:postfix /etc/mail/localNetworks.txt'+ ' >/dev/null 2>&1');

    cert:=READ_CONF('KeyFile');

   GENERATE_CERTIFICATE();

end;
//##############################################################################
procedure tpostfix.POSTFIX_INI_TD();
var
   myFile : TStringList;
begin
  if FileExists('/etc/init.d/postfix.old') then exit;


  myFile:=TstringList.Create;
  myFile.Add('#!/bin/sh');
  myFile.Add('#Begin /etc/init.d/postfix');

 if fileExists('/sbin/chkconfig') then begin
    myFile.Add('# chkconfig: 2345 11 89');
    myFile.Add('# description: postfix Daemon');
 end;

    myFile.Add('#Begin /etc/init.d/postfix');
    myFile.Add('case "$1" in');
    myFile.Add(' start)');
    myFile.Add('    /usr/share/artica-postfix/bin/artica-install -watchdog postfix-single $2 $3');
    myFile.Add('    ;;');
    myFile.Add('');
    myFile.Add('  stop)');
    myFile.Add('    /usr/share/artica-postfix/bin/artica-install -shutdown postfix-single $2 $3');
    myFile.Add('    ;;');
    myFile.Add('');
    myFile.Add(' restart)');
    myFile.Add('     /usr/share/artica-postfix/bin/artica-install -shutdown postfix-single $2 $3');
    myFile.Add('     sleep 3');
    myFile.Add('     /usr/share/artica-postfix/bin/artica-install -watchdog postfix-single $2 $3');
    myFile.Add('    ;;');
    myFile.Add('');
    myFile.Add(' reload)');
    myFile.Add('     /usr/share/artica-postfix/bin/artica-install --postfix-reload $2 $3');
    myFile.Add('    ;;');
    myFile.Add('');
    myFile.Add('  *)');
    myFile.Add('    echo "Usage: $0 {start|stop|restart|reload} (+ debug or --verbose for more infos)"');
    myFile.Add('    exit 1');
    myFile.Add('    ;;');
    myFile.Add('esac');
    myFile.Add('exit 0');

    fpsystem('/bin/mv /etc/init.d/postfix /etc/init.d/postfix.old');
    logs.WriteToFile(myfile.Text,'/etc/init.d/postfix');
    myFile.free;
  LOGS.debuglogs('install postfix init.d scripts........:OK');
  LOGS.debuglogs('install init.d scripts........:Adding startup scripts to the system OK');
  fpsystem('/bin/chmod +x /etc/init.d/postfix');

 if FileExists('/usr/sbin/update-rc.d') then begin
    fpsystem('/usr/sbin/update-rc.d -f postfix defaults >/dev/null 2>&1');
 end;

  if FileExists('/sbin/chkconfig') then begin
     fpsystem('/sbin/chkconfig --add postfix >/dev/null 2>&1');
     fpsystem('/sbin/chkconfig --level 2345 postfix on >/dev/null 2>&1');
  end;


end;


//##############################################################################
procedure tpostfix.GENERATE_CERTIFICATE();
var
   CertificateIniFile:string;
   certini:Tinifile;
   tmpstr,cmd:string;
   smtpd_tls_key_file:string;
   smtpd_tls_cert_file:string;
   smtpd_tls_CAfile:string;
   openssl_path:string;
   POSFTIX_POSTCONF:string;
   l:TstringList;
   generate:boolean;
   i:integer;
   CertificateMaxDays:string;
begin

  POSFTIX_POSTCONF:=POSFTIX_POSTCONF_PATH();

  if not FileExists(POSFTIX_POSTCONF) then begin
     logs.Syslogs('Starting......: Unable to stat postconf tool path');
     exit;
  end;

  l:=TstringList.Create;
  l.Add('server.key');
  l.Add('ca.key');
  l.add('ca.csr');
  l.add('ca.crt');

    CertificateMaxDays:=SYS.GET_INFO('CertificateMaxDays');
    if length(CertificateMaxDays)=0 then CertificateMaxDays:='730';

  generate:=false;
  for i:=0 to l.Count-1 do begin
       if not FileExists('/etc/ssl/certs/postfix/' +l.Strings[i]) then begin
          generate:=true;
          break;
       end else begin
          logs.DebugLogs('Starting......: /etc/ssl/certs/postfix/' +l.Strings[i] + ' OK');
       end;
  end;

  if generate then begin
     SYS.OPENSSL_CERTIFCATE_CONFIG();
     CertificateIniFile:=SYS.OPENSSL_CONFIGURATION_PATH();
     if not FileExists(CertificateIniFile) then begin
        logs.Syslogs('tpostfix.GENERATE_CERTIFICATE():: FATAL ERROR, unable to find any ssl configuration path');
        exit;
     end;
  
     if not fileExists(SYS.LOCATE_OPENSSL_TOOL_PATH()) then begin
        logs.Syslogs('tpostfix.GENERATE_CERTIFICATE():: FATAL ERROR, unable to stat openssl');
        exit;
     end;
  
     tmpstr:=LOGS.FILE_TEMP();
     fpsystem('/bin/cp '+CertificateIniFile+' '+tmpstr);
     certini:=TiniFile.Create(tmpstr);
  
     logs.Debuglogs('Settings certificate file...');
     certini.WriteString('req_distinguished_name','organizationalUnitName_default','Mailserver');
     certini.UpdateFile;
     forcedirectories('/etc/ssl/certs/postfix');
     logs.Debuglogs('Generate server certificate');
  
  
     cmd:=SYS.LOCATE_OPENSSL_TOOL_PATH()+' genrsa -out /etc/ssl/certs/postfix/server.key 1024';
     logs.OutputCmd(cmd);
     cmd:=SYS.LOCATE_OPENSSL_TOOL_PATH()+' req -new -key /etc/ssl/certs/postfix/server.key -batch -config '+tmpstr+' -out /etc/ssl/certs/postfix/server.csr';
     logs.OutputCmd(cmd);
     cmd:=SYS.LOCATE_OPENSSL_TOOL_PATH()+' genrsa -out /etc/ssl/certs/postfix/ca.key 1024 -batch -config '+tmpstr;
     logs.OutputCmd(cmd);
     cmd:=SYS.LOCATE_OPENSSL_TOOL_PATH()+' req -new -x509 -days '+CertificateMaxDays+' -key /etc/ssl/certs/postfix/ca.key -batch -config '+tmpstr+' -out /etc/ssl/certs/postfix/ca.csr';
     logs.OutputCmd(cmd);
     cmd:=SYS.LOCATE_OPENSSL_TOOL_PATH()+' x509 -x509toreq -days '+CertificateMaxDays+' -in /etc/ssl/certs/postfix/ca.csr -signkey /etc/ssl/certs/postfix/ca.key -out /etc/ssl/certs/postfix/ca.req';
     logs.OutputCmd(cmd);
     cmd:=SYS.LOCATE_OPENSSL_TOOL_PATH()+' x509 -req -days '+CertificateMaxDays+' -in /etc/ssl/certs/postfix/ca.req -signkey /etc/ssl/certs/postfix/ca.key -out /etc/ssl/certs/postfix/ca.crt';
     logs.OutputCmd(cmd);
     logs.DeleteFile(tmpstr);

  end;

     logs.OutputCmd(POSFTIX_POSTCONF +' -e ''smtpd_tls_key_file = /etc/ssl/certs/postfix/ca.key''');
     logs.OutputCmd(POSFTIX_POSTCONF +' -e ''smtpd_tls_cert_file = /etc/ssl/certs/postfix/ca.crt''');
     logs.OutputCmd(POSFTIX_POSTCONF +' -e ''smtpd_tls_CAfile = /etc/ssl/certs/postfix/ca.csr''');



end;
//##############################################################################


function tpostfix.POSTFIX_STATUS():string;
var pid,mail_version:string;
begin
result:='-1;0.0.0;' ;
pid:=POSTFIX_PID();
if not FileExists(POSFTIX_POSTCONF_PATH()) then exit;

if FileExists('/proc/' + pid + '/exe') then result:='1' else result:='0';
mail_version:=POSTFIX_VERSION();
result:=result + ';' + mail_version + ';' +pid
end;
//##############################################################################

function tpostfix.STATUS:string;
var
ini:TstringList;
pid:string;
begin
   ini:=TstringList.Create;
   ini.Add('[POSTFIX]');
   if FileExists(POSFTIX_POSTCONF_PATH()) then  begin
      pid:=POSTFIX_PID();
      if SYS.PROCESS_EXIST(pid) then ini.Add('running=1') else  ini.Add('running=0');
      ini.Add('application_installed=1');
      ini.Add('master_pid='+ pid);
      ini.Add('master_memory=' + IntToStr(SYS.PROCESS_MEMORY(pid)));
      ini.Add('master_version='+POSTFIX_VERSION());
      ini.Add('status='+SYS.PROCESS_STATUS(pid));
      ini.Add('service_name=APP_POSTFIX');
      ini.Add('service_cmd=postfix');
   end;

   result:=ini.Text;
   ini.free;

end;
//##############################################################################
procedure tpostfix.POSTFIX_START();
var pid:string;

begin

 if not FileExists(POSFTIX_POSTCONF_PATH()) then begin
    logs.Debuglogs('POSTFIX_START:: Postfix is not installed');
    exit;
 end;
 MYSQMAIL_START();
 pid:=POSTFIX_PID();

 if not SYS.PROCESS_EXIST(pid) then begin
        logs.Syslogs('starting Postfix main MTA');
        POSTFIX_RELOAD();
        
        
         if not SYS.PROCESS_EXIST(POSTFIX_PID()) then begin
            logs.DebugLogs('Starting......: Postfix daemon failed...');
            logs.NOTIFICATION('[ARTICA]: Warning: Unable to start postfix daemon !!','Please come back quickly, the postfix daemon did not want to start !','system');
         end;
        
  end;

 logs.DebugLogs('Starting......: Postfix daemon is already running using PID ' + pid + '...');
end;
//##############################################################################
procedure tpostfix.POSTFIX_ENABLE_SMTP_SASL();
var
   PostFixSmtpSaslEnable:integer;
   postconf_path:string;
begin
     PostFixSmtpSaslEnable:=0;
     TryStrToInt(SYS.GET_INFO('PostFixSmtpSaslEnable'),PostFixSmtpSaslEnable);

     if PostFixSmtpSaslEnable<>1 then begin
        logs.Debuglogs('Starting......: POSTFIX SASL is not enabled in daemon mode...');
        exit;
     end;

     logs.Debuglogs('Starting......: POSTFIX SASL is enabled in daemon mode...');
     postconf_path:=POSFTIX_POSTCONF_PATH();
     logs.OutputCmd(postconf_path+ ' -e "smtpd_sasl_auth_enable = yes"');
     logs.OutputCmd(postconf_path+ ' -e "broken_sasl_auth_clients = yes"');
     logs.OutputCmd(postconf_path+ ' -e "smtpd_sasl_security_options = noanonymous"');
     logs.OutputCmd(postconf_path+ ' -e "smtpd_sasl_local_domain = \$myhostname"');
     logs.OutputCmd(postconf_path+ ' -e "smtpd_sasl_authenticated_header = yes"');
     logs.OutputCmd(postconf_path+ ' -e "smtpd_tls_security_level = may"');
     logs.OutputCmd(postconf_path+ ' -e "smtpd_tls_auth_only = yes"');
     logs.OutputCmd(postconf_path+ ' -e "smtpd_tls_received_header = yes"');
     logs.OutputCmd(postconf_path+ ' -e "smtpd_use_tls = yes"');
     logs.OutputCmd(postconf_path+ ' -e "smtpd_sasl_path = smtpd"');
     logs.OutputCmd(postconf_path+ ' -e "smtpd_tls_session_cache_database = btree:\$data_directory/smtpd_tls_cache"');
     logs.OutputCmd(postconf_path+ ' -e "smtpd_tls_key_file = /etc/ssl/certs/postfix/ca.key"');
     logs.OutputCmd(postconf_path+ ' -e "smtpd_tls_cert_file = /etc/ssl/certs/postfix/ca.crt"');
     logs.OutputCmd(postconf_path+ ' -e "smtpd_tls_CAfile = /etc/ssl/certs/postfix/ca.csr"');

end;
//##############################################################################





procedure tpostfix.POSTFIX_INITIALIZE_FOLDERS();
var
   queue:string;
   l:TstringList;
   i:integer;
begin

queue:=POSTFIX_QUEUE_DIRECTORY();
if length(queue)=0 then begin
   logs.Syslogs('POSTFIX_INITIALIZE_FOLDERS():: Queue directory is null');
   exit;
end;

  forcedirectories(queue + '/pid');
   forcedirectories(queue + '/corrupt');
   forcedirectories(queue + '/trace');
   forcedirectories(queue + '/saved');
   forcedirectories(queue + '/private');
   forcedirectories(queue + '/etc');
   forcedirectories(queue + '/incoming');
   forcedirectories(queue + '/defer');
   forcedirectories(queue + '/maildrop');
   forcedirectories(queue + '/public');
   forcedirectories(queue + '/active');
   forcedirectories(queue + '/hold');
   forcedirectories(queue + '/flush');
   forcedirectories(queue + '/bounce');
   forcedirectories(queue + '/public');

   Logs.OutputCmd('/bin/chmod -R 0755 '+queue);
   Logs.OutputCmd('/bin/chmod -R 0755 '+queue+'/etc');
   Logs.OutputCmd('/bin/chown -R root:root '+queue+'/etc');

   Logs.OutputCmd('/bin/chown -R root:root /usr/libexec/postfix');
   Logs.OutputCmd('/bin/chmod -R 0755 /usr/libexec/postfix/*');



   Logs.OutputCmd('/bin/chown -R postfix:postdrop '+queue+'/public');


   Logs.OutputCmd('/bin/chown -R root:root '+queue+'/pid');
   Logs.OutputCmd('/bin/chmod -R 0755 '+queue+'/pid');


   Logs.OutputCmd('/bin/chown root:postdrop /usr/sbin/postqueue');
   Logs.OutputCmd('/bin/chmod 2755 /usr/sbin/postqueue');

   Logs.OutputCmd('/bin/chown root:postdrop /usr/sbin/postdrop');
   Logs.OutputCmd('/bin/chmod 2755 /usr/sbin/postdrop');
   Logs.OutputCmd('/bin/cp /etc/services '+queue+'/etc/services');
   Logs.OutputCmd('/bin/cp /etc/resolv.conf '+queue+'/etc/resolv.conf');
   Logs.OutputCmd('/bin/cp /etc/hosts '+queue+'/etc/hosts');
   Logs.OutputCmd('/bin/cp /etc/localtime '+queue+'/etc/localtime');
   Logs.OutputCmd('/bin/cp /etc/nsswitch.conf '+queue+'/etc/nsswitch.conf');
   


   
   
        logs.DebugLogs('Starting......: Fixing main.cf permissions...');
        logs.OutputCmd('/bin/chmod 644 /etc/postfix/main.cf');
        logs.OutputCmd('/bin/chown root:root /etc/postfix/main.cf');
   
l:=TstringList.Create;
l.add('/usr/lib/postfix/dict_cdb.so');
l.add('/usr/lib/postfix/dict_mysql.so');
l.add('/usr/lib/postfix/dict_sdbm.so');
l.add('/usr/lib/postfix/dict_pcre.so');
l.add('/etc/postfix/TLS_LICENSE');
l.add('/etc/postfix/LICENSE');
l.add('/etc/postfix/access');
l.add('/etc/postfix/aliases');
l.add('/etc/postfix/bounce.cf.default');
l.add('/etc/postfix/canonical');
l.add('/etc/postfix/generic');
l.add('/etc/postfix/header_checks');
l.add('/etc/postfix/main.cf.default');
l.add('/etc/postfix/makedefs.out');
l.add('/etc/postfix/relocated');
l.add('/etc/postfix/transport');
l.add('/etc/postfix/virtual');
l.add('/usr/share/man/man1/mailq.1');
l.add('/usr/share/man/man1/newaliases.1');
l.add('/usr/share/man/man1/postalias.1');
l.add('/usr/share/man/man1/postcat.1');
l.add('/usr/share/man/man1/postconf.1');
l.add('/usr/share/man/man1/postdrop.1');
l.add('/usr/share/man/man1/postfix.1');
l.add('/usr/share/man/man1/postkick.1');
l.add('/usr/share/man/man1/postlock.1');
l.add('/usr/share/man/man1/postlog.1');
l.add('/usr/share/man/man1/postmap.1');
l.add('/usr/share/man/man1/postqueue.1');
l.add('/usr/share/man/man1/postsuper.1');
l.add('/usr/share/man/man1/sendmail.1');
l.add('/usr/share/man/man5/access.5');
l.add('/usr/share/man/man5/aliases.5');
l.add('/usr/share/man/man5/body_checks.5');
l.add('/usr/share/man/man5/bounce.5');
l.add('/usr/share/man/man5/canonical.5');
l.add('/usr/share/man/man5/cidr_table.5');
l.add('/usr/share/man/man5/generic.5');
l.add('/usr/share/man/man5/header_checks.5');
l.add('/usr/share/man/man5/ldap_table.5');
l.add('/usr/share/man/man5/master.5');
l.add('/usr/share/man/man5/mysql_table.5');
l.add('/usr/share/man/man5/nisplus_table.5');
l.add('/usr/share/man/man5/pcre_table.5');
l.add('/usr/share/man/man5/pgsql_table.5');
l.add('/usr/share/man/man5/postconf.5');
l.add('/usr/share/man/man5/regexp_table.5');
l.add('/usr/share/man/man5/relocated.5');
l.add('/usr/share/man/man5/tcp_table.5');
l.add('/usr/share/man/man5/transport.5');
l.add('/usr/share/man/man5/virtual.5');
l.add('/usr/share/man/man8/bounce.8');
l.add('/usr/share/man/man8/cleanup.8');
l.add('/usr/share/man/man8/anvil.8');
l.add('/usr/share/man/man8/defer.8');
l.add('/usr/share/man/man8/discard.8');
l.add('/usr/share/man/man8/error.8');
l.add('/usr/share/man/man8/flush.8');
l.add('/usr/share/man/man8/lmtp.8');
l.add('/usr/share/man/man8/local.8');
l.add('/usr/share/man/man8/master.8');
l.add('/usr/share/man/man8/oqmgr.8');
l.add('/usr/share/man/man8/pickup.8');
l.add('/usr/share/man/man8/pipe.8');
l.add('/usr/share/man/man8/proxymap.8');
l.add('/usr/share/man/man8/qmgr.8');
l.add('/usr/share/man/man8/qmqpd.8');
l.add('/usr/share/man/man8/scache.8');
l.add('/usr/share/man/man8/showq.8');
l.add('/usr/share/man/man8/smtp.8');
l.add('/usr/share/man/man8/smtpd.8');
l.add('/usr/share/man/man8/spawn.8');
l.add('/usr/share/man/man8/tlsmgr.8');
l.add('/usr/share/man/man8/trace.8');
l.add('/usr/share/man/man8/trivial-rewrite.8');
l.add('/usr/share/man/man8/verify.8');
l.add('/usr/share/man/man8/virtual.8');

forceDirectories('/usr/share/man/man8');
forceDirectories('/usr/share/man/man5');
forceDirectories('/usr/share/man/man1');

for i:=0 to l.Count-1 do begin
    if Not FileExists(l.Strings[i]) then begin
       logs.syslogs('Starting......: postfix Fixing '+l.Strings[i]);
       logs.OutputCmd('/bin/touch ' + l.Strings[i]);
    end;
end;

       logs.OutputCmd(postfix_path() + ' set-permissions');
       logs.DebugLogs('Starting......: Fixing maildrops permissions...');
       Logs.OutputCmd('/bin/chmod -R 1733 '+queue+'/maildrop');
       Logs.OutputCmd('/bin/chown -R postfix:postdrop '+queue+'/maildrop');
       Logs.OutputCmd('/usr/bin/killall -9 postdrop');
       Logs.OutputCmd('/bin/chgrp -R postdrop /var/spool/postfix/public');
       Logs.OutputCmd('/bin/chgrp -R postdrop /var/spool/postfix/maildrop/');

end;
//##############################################################################

procedure tpostfix.POSTFIX_CHECK_SASLDB2();
begin
   if not FileExists(SASLPASSWD_PATH()) then begin
   logs.Debuglogs('POSTFIX_CHECK_SASLDB2:: saslpasswd2 doesn''t exists');
   exit;
   end;

   if not DirectoryExists('/var/spool/postfix/etc') then begin
      logs.Debuglogs('POSTFIX_CHECK_SASLDB2:: Creating /var/spool/postfix/etc');
      ForceDirectories('/var/spool/postfix/etc');
   end;
   

   if not FileExists('/var/spool/postfix/etc/sasldb2') then begin
      logs.Debuglogs('POSTFIX_CHECK_SASLDB2:: /var/spool/postfix/etc/sasldb2 doesn''t exists start procedure');
      if not FileExists('/etc/sasldb2') then begin
         logs.OutputCmd('/bin/echo cyrus|'  + SASLPASSWD_PATH() + ' -c cyrus');
       end;

      if FileExists('/etc/sasldb2') then begin
         logs.OutputCmd('/bin/mv /etc/sasldb2 /var/spool/postfix/etc/sasldb2');
         logs.OutputCmd('/bin/ln -s /var/spool/postfix/etc/sasldb2 /etc/sasldb2');
      end;
   end;

    logs.OutputCmd('/bin/chown root:root /var/spool/postfix/etc/sasldb2');
    logs.OutputCmd('/bin/chmod 755 /var/spool/postfix/etc/sasldb2');

end;
//##############################################################################
function tpostfix.MON():string;
var
l:TstringList;
begin
 if not FileExists(POSFTIX_POSTCONF_PATH()) then begin
    logs.DebugLogs('Starting......: Postfix is not installed, abort');
    exit;
 end;

l:=TstringList.Create;

l.Add('check process postfix with pidfile '+POSTFIX_PID_PATH());
l.Add('group mail');
l.Add('start program = "/etc/init.d/artica-postfix start postfix"');
l.Add('stop program = "/etc/init.d/postfix stop"');
l.Add('if 5 restarts within 5 cycles then timeout');
l.Add('');
l.Add('check process postfix-logger with pidfile /etc/artica-postfix/exec.maillog.php.pid');
l.Add('group mail');
l.Add('start program = "/etc/init.d/artica-postfix start postfix-logger"');
l.Add('stop program = "/etc/init.d/artica-postfix stop postfix-logger"');
l.Add('if 15 restarts within 5 cycles then timeout');
l.Add('');


result:=l.Text;
l.free;

end;
//##############################################################################


 function tpostfix.POSTFIX_PID():string;
 var pidp:string;
 
begin
   pidp:= POSTFIX_PID_PATH();
   if not FileExists(pidp) then begin
      logs.Debuglogs('POSTFIX_PID():: unable to locate pid path !!!');
      exit;
   end;
   
   result:=SYS.GET_PID_FROM_PATH(pidp);
   
end;
 //##############################################################################
 function tpostfix.POSTFIX_PID_PATH():string;
var queue:string;
begin
   if not FileExists(POSFTIX_POSTCONF_PATH()) then exit;
   fpsystem(POSFTIX_POSTCONF_PATH() + ' -h queue_directory >/opt/artica/tmp/queue_directory');
   queue:=trim(SYS.ReadFileIntoString('/opt/artica/tmp/queue_directory'));
   result:=queue+'/pid/master.pid';
end;
//##############################################################################
function tpostfix.POSFTIX_POSTCONF_PATH:string;
begin

    if FileExists('/usr/sbin/postconf') then exit('/usr/sbin/postconf');
end;
//##############################################################################
function tpostfix.POSFTIX_MASTER_CF_PATH:string;
begin
    if FileExists('/etc/postfix/master.cf') then exit('/etc/postfix/master.cf');
end;
//##############################################################################
procedure tpostfix.POSTFIX_STOP();
var pid:string;
begin
pid:=POSTFIX_PID();
if SYS.PROCESS_EXIST(pid) then begin
   writeln('Stopping Postfix.............: ' + pid + ' PID..');
   if fileExists('/usr/sbin/postfix') then begin
      fpsystem('/usr/sbin/postfix stop >/dev/null 2>&1');
      POSTFIX_INI_TD();
      MYSQMAIL_STOP();
      exit;
   end;
end;

end;
//##############################################################################
function tpostfix.Is_CYRUS_enabled_in_master_cf():boolean;
var
   RegExpr:TRegExpr;
   list:TstringList;
   i:Integer;
begin
   result:=false;
   if not FileExists('/etc/postfix/master.cf') then exit;
   list:=TStringList.Create;
   list.LoadFromFile('/etc/postfix/master.cf');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='flags= user=cyrus argv=(.+)';
   for i:=0 to list.Count-1 do begin
        if RegExpr.Exec(list.Strings[i]) then begin
            result:=true;
            break;
        end;
   end;
   RegExpr.free;
   list.free;
end;
//##############################################################################
function tpostfix.FIX_RETRY_DAEMON():boolean;
var
   RegExpr:TRegExpr;
   list:TstringList;
   i:Integer;
   t:integer;
begin
   result:=false;
   if not FileExists('/etc/postfix/master.cf') then exit;
   list:=TStringList.Create;
   list.LoadFromFile('/etc/postfix/master.cf');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='retry\s+unix';
   for i:=0 to list.Count-1 do begin
        if RegExpr.Exec(list.Strings[i]) then begin
             RegExpr.Expression:='\s+flags=DRhu\s+user=vmail';
             t:=i+1;
             if RegExpr.Exec(list.Strings[t]) then begin
                list.Delete(t);
                list.SaveToFile('/etc/postfix/master.cf');
                result:=true;
                break;
             end;
        end;
   end;
   RegExpr.free;
   list.free;
end;
//##############################################################################
function tpostfix.QUEUE_PATH():string;
var tmp:string;
begin
  if Not FileExists(POSFTIX_POSTCONF_PATH()) then exit;
  tmp:=LOGS.FILE_TEMP();
  fpsystem(POSFTIX_POSTCONF_PATH()+ ' -h queue_directory >'+tmp+' 2>&1');
  result:=trim(logs.ReadFromFile(tmp));
  logs.DeleteFile(tmp);
end;
//##############################################################################
procedure tpostfix.CONFORMITE_MASTERCF();
var
l:Tstringlist;
i:integer;
B:boolean;
D:Boolean;
begin
  D:=SYS.COMMANDLINE_PARAMETERS('debug');
       LOAD_MASTERCF_SERVICES();
B:=true;
l:=Tstringlist.Create;
l.add('smtp');
l.add('pickup');
l.add('cleanup');
l.add('qmgr');
l.add('tlsmgr');
l.add('rewrite');
l.add('bounce');
l.add('defer');
l.add('trace');
l.add('verify');
l.add('flush');
l.add('proxymap');
l.add('proxywrite');
l.add('relay');
l.add('showq');
l.add('error');
l.add('discard');
l.add('local');
l.add('virtual');
l.add('lmtp');
l.add('anvil');
l.add('scache');
l.add('scan');
l.add('maildrop');
l.add('retry');
  if D then writeln('postfixServices.Count=',postfixServices.Count);
 for i:=0 to l.Count-1 do begin
      if not VERIF_MASTERCF_SERVICES(l.Strings[i]) then begin
           logs.Syslogs('Starting......: Bad master.cf, missing service "'+l.Strings[i]+'"');
           B:=false;
           break;
      end else begin
          if D then writeln('Check ',l.Strings[i],' ok');
      end;
 end;

 if not B then begin
        if Fileexists(artica_path+'/bin/install/postfix/master.cf.org') then begin
           fpsystem('/bin/cp '+artica_path+'/bin/install/postfix/master.cf.org /etc/postfix/master.cf');
        end else begin
            logs.Syslogs('Starting......: unable to stat '+artica_path+'/bin/install/postfix/master.cf.org');
        end;
 end;


end;
//##############################################################################
function tpostfix.VERIF_MASTERCF_SERVICES(service:string):boolean;
var
i:integer;
D:Boolean;
begin
  D:=SYS.COMMANDLINE_PARAMETERS('debug');
  if postfixServices.Count=0 then LOAD_MASTERCF_SERVICES();


  result:=false;
    for i:=0 to postfixServices.Count-1 do begin

          if trim(service)=trim(postfixServices.Strings[i]) then begin
             result:=true;
             break;
          end;
    end;

end;



//##############################################################################
procedure tpostfix.gnarwl_MASTERCF_SERVICE();
var
   l:Tstringlist;
   RegExpr:TRegExpr;
   i:integer;
   D,trouv:boolean;
begin

  D:=SYS.COMMANDLINE_PARAMETERS('debug');
if not FileExists('/etc/postfix/master.cf') then begin
   if D then writeln('Unable to stat /etc/postfix/master.cf');
   exit;
end;

if not FileExists(gnarwl_path()) then begin
   logs.Syslogs('Starting......: Postfix, gnarwl is not installed.');
   exit;

end;


if not sys.IsUserExists('gnarwl') then sys.AddUserToGroup('gnarwl','gnarwl','/bin/sh','/var/lib/gnarw');
ForceDirectories('/var/lib/gnarwl');
if DirectoryExists('/var/lib/gnarwl') then Logs.OutputCmd('/bin/chown -R gnarwl:gnarwl /var/lib/gnarwl');

trouv:=false;
l:=Tstringlist.Create;
RegExpr:=TRegExpr.Create;
l.LoadFromFile('/etc/postfix/master.cf');
RegExpr.Expression:='^gnarwl\s+';

for i:=0 to l.Count-1 do begin
     if RegExpr.Exec(l.Strings[i]) then begin
        trouv:=true;
     end;
end;

if not trouv then begin
   logs.Syslogs('Starting......: Postfix, Adding new server gnarwl in master.cf');
   l.Add('');
   l.Add('gnarwl    unix  -       n       n       -       -       pipe');
   l.Add('  flags=F  user=gnarwl argv='+gnarwl_path()+' -a ${user}@${nexthop} -s ${sender}');
   try
      logs.WriteToFile(l.Text,'/etc/postfix/master.cf');
   except
       logs.Syslogs('gnarwl_MASTERCF_SERVICE():: warning, unable to write /etc/postfix/master.cf');
   end;
end;

l.free;
RegExpr.free;

end;
//##############################################################################
procedure tpostfix.ARTICA_WHITELIST_MASTERCF_SERVICE();
var
   l:Tstringlist;
   RegExpr:TRegExpr;
   i:integer;
   D,trouv:boolean;
begin

  D:=SYS.COMMANDLINE_PARAMETERS('debug');
if not FileExists('/etc/postfix/master.cf') then begin
   if D then writeln('Unable to stat /etc/postfix/master.cf');
   exit;
end;

trouv:=false;
l:=Tstringlist.Create;
RegExpr:=TRegExpr.Create;
l.LoadFromFile('/etc/postfix/master.cf');
RegExpr.Expression:='^artica-whitelist\s+';

forceDirectories('/var/log/artica-whiteblackList');
forceDirectories('/var/mail');
logs.OutputCmd('/bin/chown mail:mail /var/log/artica-whiteblackList');
logs.OutputCmd('/bin/chown mail:mail /var/mail');

for i:=0 to l.Count-1 do begin
     if RegExpr.Exec(l.Strings[i]) then begin
        trouv:=true;
     end;
end;
if not sys.IsUserExists('mail') then sys.AddUserToGroup('mail','mail','/bin/sh','/var/mail');

if not trouv then begin
   logs.Syslogs('Starting......: Postfix, Adding new server artica-whitelist in master.cf');
   l.Add('');
   l.Add('artica-whitelist    unix  -       n       n       -       -       pipe');
   l.Add('  flags=F  user=mail argv=/usr/share/artica-postfix/bin/artica-whitelist -a ${nexthop} -s ${sender} --white');
   try
      logs.WriteToFile(l.Text,'/etc/postfix/master.cf');
   except
       logs.Syslogs('ARTICA_WHITELIST_MASTERCF_SERVICE():: warning, unable to write /etc/postfix/master.cf');
   end;
end;

l.free;
RegExpr.free;

end;
//##############################################################################
procedure tpostfix.ARTICA_BLACKLIST_MASTERCF_SERVICE();
var
   l:Tstringlist;
   RegExpr:TRegExpr;
   i:integer;
   D,trouv:boolean;
begin

  D:=SYS.COMMANDLINE_PARAMETERS('debug');
if not FileExists('/etc/postfix/master.cf') then begin
   if D then writeln('Unable to stat /etc/postfix/master.cf');
   exit;
end;

trouv:=false;
l:=Tstringlist.Create;
RegExpr:=TRegExpr.Create;
l.LoadFromFile('/etc/postfix/master.cf');
RegExpr.Expression:='^artica-blacklist\s+';

forceDirectories('/var/log/artica-whiteblackList');
forceDirectories('/var/mail');
logs.OutputCmd('/bin/chown mail:mail /var/log/artica-whiteblackList');
logs.OutputCmd('/bin/chown mail:mail /var/mail');

for i:=0 to l.Count-1 do begin
     if RegExpr.Exec(l.Strings[i]) then begin
        trouv:=true;
     end;
end;
if not sys.IsUserExists('mail') then sys.AddUserToGroup('mail','mail','/bin/sh','/var/mail');

if not trouv then begin
   logs.Syslogs('Starting......: Postfix, Adding new server artica-blacklist in master.cf');
   l.Add('');
   l.Add('artica-blacklist    unix  -       n       n       -       -       pipe');
   l.Add('  flags=F  user=mail argv=/usr/share/artica-postfix/bin/artica-whitelist -a ${nexthop} -s ${sender} --black');
   try
      logs.WriteToFile(l.Text,'/etc/postfix/master.cf');
   except
       logs.Syslogs('ARTICA_BLACKLIST_MASTERCF_SERVICE():: warning, unable to write /etc/postfix/master.cf');
   end;
end;

l.free;
RegExpr.free;

end;
//##############################################################################



procedure tpostfix.LOAD_MASTERCF_SERVICES();
var
   l:Tstringlist;
   RegExpr:TRegExpr;
   i:integer;
   D:boolean;
begin
postfixServices:=TstringList.Create;
  D:=SYS.COMMANDLINE_PARAMETERS('debug');


if not FileExists('/etc/postfix/master.cf') then begin
   if D then writeln('Unable to stat /etc/postfix/master.cf');
   exit;
end;


l:=Tstringlist.Create;
RegExpr:=TRegExpr.Create;
l.LoadFromFile('/etc/postfix/master.cf');
if D then writeln('LOAD_MASTERCF_SERVICES PARSING START');
RegExpr.Expression:='^([a-z]+)\s+';
for i:=0 to l.Count-1 do begin
     if RegExpr.Exec(l.Strings[i]) then begin
        postfixServices.Add(trim(RegExpr.Match[1]));
        //if D then writeln('LOAD_MASTERCF_SERVICES Add->',trim(RegExpr.Match[1]));
     end else begin
      //if D then writeln('LOAD_MASTERCF_SERVICES skip "'+l.Strings[i]+'"');
     end;
end;
if D then writeln('LOAD_MASTERCF_SERVICES PARSING END');
RegExpr.Free;
l.free;
end;
//##############################################################################
procedure tpostfix.ENABLE_SSL(add:boolean);
var
   RegExpr:TRegExpr;
   list:TstringList;
   Found:boolean;
   i:Integer;
   t:integer;
   z:integer;
   D:boolean;
begin
    d:=false;
    if ParamStr(1)='--enable-postfix-ssl' then D:=true;
    if not FileExists('/etc/postfix/master.cf') then exit;
    list:=TStringList.Create;
    list.LoadFromFile('/etc/postfix/master.cf');
    Found:=false;
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='^(smtps)\s+inet';
    t:=list.Count-1;
    z:=0;
    for i:=0 to t do begin
       if z>list.Count-1 then break;
       if not found then begin
             if RegExpr.Exec(list.Strings[z]) then begin
                if D then writeln('Delete line: ',z);
                list.Delete(z);
                Found:=true;
             end;
        end;

       if length(trim(list.Strings[z]))=0 then begin
          if D then writeln(z,':Null,continue');
          z:=z+1;

          continue;
       end;
       
       if found then begin
          RegExpr.Expression:='^([a-z]+)\s+(unix|inet|fifo)\s+';
          if RegExpr.Exec(list.Strings[z]) then begin
             if D then writeln(z,':',list.Strings[z],' ',RegExpr.Expression,' =>QUIT');
             break;
          end;
       end;
       
       if found then begin
            RegExpr.Expression:='-o\s+';
            if D then writeln(z,':',list.Strings[z],' ',RegExpr.Expression);
            if RegExpr.Exec(list.Strings[z]) then begin
               writeln(z,':Delete');
               list.Delete(z);
               z:=z-1;
            end else begin
                break;
            end;
       end;
      z:=z+1;
      if z>list.Count-1 then break;
    end;
    
if found then begin
   try
      list.SaveToFile('/etc/postfix/master.cf');
      writeln('/etc/postfix/master.cf => save');
   except
      logs.Syslogs('warning, unable to write /etc/postfix/master.cf');
      exit;
   end;
end;

if add then begin
   list.LoadFromFile('/etc/postfix/master.cf');
   list.Add('smtps'+chr(9)+'inet'+chr(9)+'n'+chr(9)+'-'+chr(9)+'n'+chr(9)+'-'+chr(9)+'-'+chr(9)+'smtpd');
   list.add(' -o smtpd_tls_wrappermode=yes');
   list.add(' -o smtpd_sasl_auth_enable=yes');
   list.add(' -o smtpd_client_restrictions=permit_mynetworks,permit_sasl_authenticated,reject');
   try
      list.SaveToFile('/etc/postfix/master.cf');
      writeln('/etc/postfix/master.cf => save');
   except
      logs.Syslogs('warning, unable to write /etc/postfix/master.cf');
      exit;
   end;
end;
 list.free;

end;
//##############################################################################
procedure tpostfix.ENABLE_SUBMISSION(add:boolean);
var
   RegExpr:TRegExpr;
   list:TstringList;
   Found:boolean;
   i:Integer;
   t:integer;
   z:integer;
   D:boolean;
begin
    d:=false;
    if ParamStr(1)='--enable-postfix-submission' then D:=true;
    if not FileExists('/etc/postfix/master.cf') then exit;
    list:=TStringList.Create;
    list.LoadFromFile('/etc/postfix/master.cf');
    Found:=false;
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='^(submission)\s+inet';
    t:=list.Count-1;
    z:=0;
    for i:=0 to t do begin
       if z>list.Count-1 then break;
       if not found then begin
             if RegExpr.Exec(list.Strings[z]) then begin
                if D then writeln('Delete line: ',z);
                list.Delete(z);
                Found:=true;
             end;
        end;

       if length(trim(list.Strings[z]))=0 then begin
          if D then writeln(z,':Null,continue');
          z:=z+1;

          continue;
       end;

       if found then begin
          RegExpr.Expression:='^([a-z]+)\s+(unix|inet|fifo)\s+';
          if RegExpr.Exec(list.Strings[z]) then begin
             if D then writeln(z,':',list.Strings[z],' ',RegExpr.Expression,' =>QUIT');
             break;
          end;
       end;

       if found then begin
            RegExpr.Expression:='-o\s+';
            if D then writeln(z,':',list.Strings[z],' ',RegExpr.Expression);
            if RegExpr.Exec(list.Strings[z]) then begin
               writeln(z,':Delete');
               list.Delete(z);
               z:=z-1;
            end else begin
                break;
            end;
       end;
      z:=z+1;
      if z>list.Count-1 then break;
    end;

if found then begin
   try
      list.SaveToFile('/etc/postfix/master.cf');
      writeln('/etc/postfix/master.cf => save');
   except
      logs.Syslogs('warning, unable to write /etc/postfix/master.cf');
      exit;
   end;
end;

if add then begin
   list.LoadFromFile('/etc/postfix/master.cf');
   list.Add('submission'+chr(9)+'inet'+chr(9)+'n'+chr(9)+'-'+chr(9)+'n'+chr(9)+'-'+chr(9)+'-'+chr(9)+'smtpd');
   list.add(' -o smtpd_etrn_restrictions=reject');
   list.add(' -o smtpd_enforce_tls=yes');
   list.add(' -o smtpd_sasl_auth_enable=yes');
   list.add(' -o smtpd_client_restrictions=permit_sasl_authenticated,reject');

   try
      list.SaveToFile('/etc/postfix/master.cf');
      writeln('/etc/postfix/master.cf => save');
   except
      logs.Syslogs('warning, unable to write /etc/postfix/master.cf');
      exit;
   end;
end;
 list.free;

end;
//##############################################################################
function tpostfix.POSFTIX_READ_QUEUE(queuename:string):string;
var
   queuepath,path,messageid:string;
   send,i:integer;
   l:TstringList;
begin
   queuepath:=QUEUE_PATH();
   if length(queuepath)=0 then begin
      logs.Debuglogs('tpostfix.POSFTIX_READ_QUEUE:: unable to get queue path');
      exit;
   end;
   path:=queuepath + '/' + queuename;
   logs.Debuglogs('POSFTIX_READ_QUEUE:: requested queue='+path);
   SYS.DirDirRecursive(path);
   
   logs.Debuglogs('POSFTIX_READ_QUEUE:: Files: '+IntToStr(SYS.DirListFiles.Count));
   
   if SYS.DirListFiles.Count>200 then send:=200 else send:=SYS.DirListFiles.Count-1;
   l:=TstringList.Create;
   for i:=0 to send do begin
       if FileExists(SYS.DirListFiles.Strings[i]) then begin
          messageid:=ExtractFileName(SYS.DirListFiles.Strings[i]);
          if length(messageid)>4 then l.Add(POSTFIX_READ_QUEUE_MESSAGE(messageid));
       end;
   end;
   
   result:=l.Text;
   l.Free;
end;
//##############################################################################
function tpostfix.POSTFIX_READ_QUEUE_MESSAGE(MessageID:string):string;
var
    RegExpr,RegExpr2,RegExpr3,RegExpr4,RegExpr5:TRegExpr;
    FileData:TStringList;
    i:integer;
    m_Time,named_attribute,sender,recipient,Subject:string;
    tmpstr:string;
begin
   if not fileExists('/usr/sbin/postcat') then begin
      logs.Debuglogs('POSTFIX_READ_QUEUE_MESSAGE:: unable to stat /usr/sbin/postcat');
      exit;
   end;
    tmpstr:=LOGS.FILE_TEMP();

   fpsystem('/usr/sbin/postcat -q ' + MessageID + ' >'+tmpstr);

   if not fileExists(tmpstr) then begin
       logs.Debuglogs('unable to stat ' +tmpstr);
       exit;
   end;
   FileData:=TStringList.Create;
   FileData.LoadFromFile(tmpstr);
   logs.DeleteFile(tmpstr);
   RegExpr:=TRegExpr.Create;
   RegExpr2:=TRegExpr.Create;
   RegExpr3:=TRegExpr.Create;
   RegExpr4:=TRegExpr.Create;
   RegExpr5:=TRegExpr.Create;
   RegExpr.Expression:='message_arrival_time: (.+)';
   RegExpr2.Expression:='named_attribute: (.+)';
   RegExpr3.Expression:='sender: ([a-zA-Z0-9\.@\-_]+)';
   RegExpr4.Expression:='recipient: ([a-zA-Z0-9\.@\-_]+)';
   RegExpr5.Expression:='Subject: (.+)';
   For i:=0 to FileData.Count-1 do begin
        if RegExpr.Exec(FileData.Strings[i]) then m_Time:=RegExpr.Match[1];
        if RegExpr2.Exec(FileData.Strings[i]) then named_attribute:=RegExpr2.Match[1];
        if RegExpr3.Exec(FileData.Strings[i]) then sender:=RegExpr3.Match[1];
        if RegExpr4.Exec(FileData.Strings[i]) then recipient:=RegExpr4.Match[1];
        if RegExpr5.Exec(FileData.Strings[i]) then Subject:=RegExpr5.Match[1];

        if length(m_Time)>0 then begin
           if  length(named_attribute)>0 then begin
               if length(sender)>0 then begin
                  if length(recipient)>0 then begin
                     if length(subject)>0 then begin
                        break
                     end;
                  end;
               end;
           end;
        end;



   end;
   RegExpr.Free;
   RegExpr2.Free;
   RegExpr3.Free;
   RegExpr4.Free;
   RegExpr5.Free;
   FileData.Free;

  exit('<time>' + m_Time + '</time><named_attr>' + named_attribute + '</named_attr><sender>' + sender + '</sender><recipient>' + recipient + '</recipient><subject>' + subject + '</subject><MessageID>'+MessageID+'</MessageID>');
  
end;






end.
