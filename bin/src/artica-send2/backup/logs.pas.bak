unit logs;

{$mode objfpc}{$H+}

interface

uses
//depreciated oldlinux -> baseunix
Classes, SysUtils,variants,strutils, Process,IniFiles,baseunix,unix,md5,RegExpr in 'RegExpr.pas',systemlog,mysql4;

  type
  Tlogs=class


private
     GLOBAL_INI:TIniFile;
     function GetFileSizeKo(path:string):longint;
     function MaxSizeLimit:integer;
     MaxlogSize:longint;
     PROCEDURE logsModule(zText:string);
     function MYSQL_PORT():string;
     function MYSQL_MYCNF_PATH:string;
     function MYSQL_INFOS(val:string):string;
     function MYSQL_SERVER_PARAMETERS_CF(key:string):string;
     function MYSQL_READ_CF(key:string;mycfpath:string):string;

     function MD5FromString(value:string):string;

     function SearchAndReplace(sSrc, sLookFor, sReplaceWith: string ): string;
     function SYSTEM_FQDN():string;
     function ReadFileIntoString(path:string):string;
     sock : PMYSQL;
     qmysql : TMYSQL;
     qbuf : string [160];
     rowbuf : MYSQL_ROW;
     mquery : string;
     recbuf : PMYSQL_RES;
     alloc : PMYSQL;

     D:boolean;
public
    constructor Create;
    procedure Free;
    procedure logs(zText:string);
    PROCEDURE logsInstall(zText:string);
    PROCEDURE logsPostfix(zText:string);
    PROCEDURE Debuglogs(zText:string);
    PROCEDURE logsStart(zText:string);
    PROCEDURE  mysql_logs(event_id:string;event_type:string;event_text:string);
    PROCEDURE  mysql_notify(error_id:string;daemon:string;event_text:string);
    PROCEDURE  mysql_virus(daemon:string;event_text:string;zDate:string;virusname:string);
    function FormatHeure (value : Int64) : String;
    procedure DeleteLogs();
    Enable_echo:boolean;
    Enable_echo_install:boolean;
    Debug:boolean;
    module_name:string;
    function   GetFileBytes(path:string):longint;
    PROCEDURE logsThread(ThreadName:string;zText:string);
    PROCEDURE ERRORS(zText:string);
    PROCEDURE INSTALL_MODULES(application_name:string;zText:string);
    PROCEDURE Syslogs(text:string);
    function COMMANDLINE_PARAMETERS(FoundWhatPattern:string):boolean;
    FUNCTION TRANSFORM_DATE_MONTH(zText:string):string;
    PROCEDURE mysql_sysev(event_type:string;daemon:string;event_text:string;zDate:string;msg_id:string);
    function getyear():string;
    FUNCTION QUERY_SQL(sql:Pchar;database:string):boolean;
    function Connect():boolean;
    procedure Disconnect();

end;

implementation

//-------------------------------------------------------------------------------------------------------


//##############################################################################
constructor Tlogs.Create;

begin
       forcedirectories('/etc/artica-postfix');
       MaxlogSize:=100;
       if Debug=True then logs('Tlogs.Create [MaxlogSize]=' + IntToStr(MaxlogSize));
       D:=COMMANDLINE_PARAMETERS('-V');

       
end;
//##############################################################################
PROCEDURE Tlogs.Free();
begin
GLOBAL_INI.Free;

end;
//##############################################################################
PROCEDURE Tlogs.logsInstall(zText:string);
      var
        zDate:string;
        myFile : TextFile;
        xText:string;
        TargetPath:string;
        info : stat;
        size:longint;maintenant : Tsystemtime;
        processname:string;
      BEGIN
        if Enable_echo=True then writeln(zText);
        if Enable_echo_install then writeln(zText);
        TargetPath:='/var/log/artica-postfix/artica-install.log';
        processname:=ExtractFileName(ParamStr(0));
        forcedirectories('/var/log/artica-postfix');
        getlocaltime(maintenant);zDate := FormatHeure(maintenant.Year)+'-' +FormatHeure(maintenant.Month)+ '-' + FormatHeure(maintenant.Day)+ chr(32)+FormatHeure(maintenant.Hour)+':'+FormatHeure(maintenant.minute)+':'+ FormatHeure(maintenant.second);
        xText:=zDate + ' [' + processname + '] ' + zText;

        TRY
           if GetFileSizeKo(TargetPath)>MaxlogSize then begin
              ExecuteProcess('/bin/rm','-f ' +  TargetPath);
              xText:=xText + ' (log file was killed before)';
              end;
              EXCEPT
              exit;
        end;

        TRY

           AssignFile(myFile, TargetPath);
           if FileExists(TargetPath) then Append(myFile);
           if not FileExists(TargetPath) then ReWrite(myFile);
            WriteLn(myFile, xText);
           CloseFile(myFile);
        EXCEPT
             writeln(xtext + '-> error writing ' +     TargetPath);
          END;
      END;
//#############################################################################
PROCEDURE Tlogs.logsPostfix(zText:string);
      var
        zDate:string;
        myFile : TextFile;
        xText:string;
        TargetPath:string;
        processname:string;
        info : stat;
        size:longint;maintenant : Tsystemtime;
      BEGIN
        if Enable_echo=True then writeln(zText);
        if Enable_echo_install then writeln(zText);
        TargetPath:='/var/log/artica-postfix/postfix.log';
        processname:=ExtractFileName(ParamStr(0));
        
        
        
        forcedirectories('/var/log/artica-postfix');
        getlocaltime(maintenant);zDate := FormatHeure(maintenant.Year)+'-' +FormatHeure(maintenant.Month)+ '-' + FormatHeure(maintenant.Day)+ chr(32)+FormatHeure(maintenant.Hour)+':'+FormatHeure(maintenant.minute)+':'+ FormatHeure(maintenant.second);
        xText:=zDate + ' ' +processname + ' ' + zText;

        

        TRY
           if GetFileSizeKo(TargetPath)>MaxlogSize then begin
              ExecuteProcess('/bin/rm','-f ' +  TargetPath);
              xText:=xText + ' (log file was killed before)';
              end;
              EXCEPT
              exit;
        end;

        TRY

           AssignFile(myFile, TargetPath);
           if FileExists(TargetPath) then Append(myFile);
           if not FileExists(TargetPath) then ReWrite(myFile);
            WriteLn(myFile, xText);
           CloseFile(myFile);
        EXCEPT
             writeln(xtext + '-> error writing ' +     TargetPath);
          END;
      END;
//#############################################################################


PROCEDURE Tlogs.ERRORS(zText:string);
      var
        zDate:string;
        myFile : TextFile;
        xText:string;
        TargetPath:string;
        info : stat;
        size:longint;maintenant : Tsystemtime;
      BEGIN
        if Enable_echo=True then writeln(zText);
        if Enable_echo_install then writeln(zText);
        TargetPath:='/var/log/artica-postfix/artica-errors.log';

        forcedirectories('/var/log/artica-postfix');
        getlocaltime(maintenant);zDate := FormatHeure(maintenant.Year)+'-' +FormatHeure(maintenant.Month)+ '-' + FormatHeure(maintenant.Day)+ chr(32)+FormatHeure(maintenant.Hour)+':'+FormatHeure(maintenant.minute)+':'+ FormatHeure(maintenant.second);
        xText:=zDate + ' ' + zText;

        TRY
           if GetFileSizeKo(TargetPath)>MaxlogSize then begin
              ExecuteProcess('/bin/rm','-f ' +  TargetPath);
              xText:=xText + ' (log file was killed before)';
              end;
              EXCEPT
              exit;
        end;

        TRY

           AssignFile(myFile, TargetPath);
           if FileExists(TargetPath) then Append(myFile);
           if not FileExists(TargetPath) then ReWrite(myFile);
            WriteLn(myFile, xText);
           CloseFile(myFile);
        EXCEPT
             writeln(xtext + '-> error writing ' +     TargetPath);
          END;
      END;
//#############################################################################
PROCEDURE Tlogs.INSTALL_MODULES(application_name:string;zText:string);
      var
        zDate:string;
        myFile : TextFile;
        xText:string;
        TargetPath:string;
        info : stat;
        size:longint;maintenant : Tsystemtime;

      BEGIN
        D:=COMMANDLINE_PARAMETERS('-verbose');
        if not D then D:=COMMANDLINE_PARAMETERS('setup');
        if not D then D:=COMMANDLINE_PARAMETERS('-install');
        if not D then D:=COMMANDLINE_PARAMETERS('-perl-upgrade');
        if not D then D:=COMMANDLINE_PARAMETERS('addons');
        if not D then D:=COMMANDLINE_PARAMETERS('-web-configure');
        if not D then D:=COMMANDLINE_PARAMETERS('-kav-proxy');
        if not D then D:=COMMANDLINE_PARAMETERS('-install-web-artica');
        if not D then D:=COMMANDLINE_PARAMETERS('-init-postfix');
        if not D then D:=COMMANDLINE_PARAMETERS('-init-cyrus');
        if not D then D:=COMMANDLINE_PARAMETERS('-artica-web-install');
        if not D then D:=COMMANDLINE_PARAMETERS('-php-mysql');
        if not D then D:=COMMANDLINE_PARAMETERS('-php5');
        if not D then D:=COMMANDLINE_PARAMETERS('-mysql-install');
        if not D then D:=COMMANDLINE_PARAMETERS('-mysql-reconfigure');
        if not D then D:=COMMANDLINE_PARAMETERS('-roundcube');
        if not D then D:=COMMANDLINE_PARAMETERS('-squid-install');
        if not D then D:=COMMANDLINE_PARAMETERS('-squid-configure');
        if not D then D:=COMMANDLINE_PARAMETERS('linux-net-dev');
        if not D then D:=COMMANDLINE_PARAMETERS('-squid-security');
        if not D then D:=COMMANDLINE_PARAMETERS('-pure-ftpd');
        if not D then D:=COMMANDLINE_PARAMETERS('-perl-addons');
        if not D then D:=COMMANDLINE_PARAMETERS('-curl-install');
        if not D then D:=COMMANDLINE_PARAMETERS('-perl-db-file');
        if not D then D:=COMMANDLINE_PARAMETERS('-amavis-install');
        if not D then D:=COMMANDLINE_PARAMETERS('-amavisd-install');
        if not D then D:=COMMANDLINE_PARAMETERS('-init-amavis');
        if not D then D:=COMMANDLINE_PARAMETERS('-amavis-sql-reconfigure');
        if not D then D:=COMMANDLINE_PARAMETERS('-amavis-sql-install');
        if not D then D:=COMMANDLINE_PARAMETERS('-amavis-sql-configure');
        if not D then D:=COMMANDLINE_PARAMETERS('-install-perl-cyrus');
        if not D then D:=COMMANDLINE_PARAMETERS('-mailutils-install');
        if not D then D:=COMMANDLINE_PARAMETERS('-mailfromd-install');
        if not D then D:=COMMANDLINE_PARAMETERS('-cyrus-imap-install');
        if not D then D:=COMMANDLINE_PARAMETERS('-lighttp');
        if not D then D:=COMMANDLINE_PARAMETERS('-ligphp5');
        
        





        logs(zText);
        logsInstall('[' + application_name + '] ' + ztext);
        TargetPath:='/var/log/artica-postfix/artica-install-' + application_name + '.log';
        logs(zText);
        Debuglogs(zText);


        if D then writeln(zText);
        forcedirectories('/var/log/artica-postfix');
        getlocaltime(maintenant);zDate := FormatHeure(maintenant.Year)+'-' +FormatHeure(maintenant.Month)+ '-' + FormatHeure(maintenant.Day)+ chr(32)+FormatHeure(maintenant.Hour)+':'+FormatHeure(maintenant.minute)+':'+ FormatHeure(maintenant.second);
        xText:=zDate + ' ' + zText;

        TRY
           if GetFileSizeKo(TargetPath)>MaxlogSize then begin
              ExecuteProcess('/bin/rm','-f ' +  TargetPath);
              xText:=xText + ' (log file was killed before)';
              end;
              EXCEPT
              exit;
        end;

        TRY

           AssignFile(myFile, TargetPath);
           if FileExists(TargetPath) then Append(myFile);
           if not FileExists(TargetPath) then ReWrite(myFile);
            WriteLn(myFile, xText);
           CloseFile(myFile);
        EXCEPT
             writeln(xtext + '-> error writing ' +     TargetPath);
          END;
      END;
//#############################################################################



//##############################################################################
function Tlogs.getyear():string;
var
   maintenant : Tsystemtime;
begin
   getlocaltime(maintenant);
   result:=FormatHeure(maintenant.Year);
end;
//##############################################################################

PROCEDURE Tlogs.logsThread(ThreadName:string;zText:string);
      var
        zDate:string;
        myFile : TextFile;
        xText:string;
        TargetPath:string;
        info : stat;
        size:longint;maintenant : Tsystemtime;
      BEGIN

        TargetPath:='/var/log/artica-postfix/artica-thread-' + ThreadName + '.log';

        forcedirectories('/var/log/artica-postfix');
        getlocaltime(maintenant);zDate := FormatHeure(maintenant.Year)+'-' +FormatHeure(maintenant.Month)+ '-' + FormatHeure(maintenant.Day)+ chr(32)+FormatHeure(maintenant.Hour)+':'+FormatHeure(maintenant.minute)+':'+ FormatHeure(maintenant.second);

        if length(module_name)>0 then logsModule(zText);
        xText:=zDate + ' ' + zText;


        if D=True then writeln(zText);


        TRY
           if GetFileSizeKo(TargetPath)>MaxlogSize then begin
              ExecuteProcess('/bin/rm','-f ' +  TargetPath);
              xText:=xText + ' (log file was killed before)';
              end;
              EXCEPT
              exit;
        end;

        TRY

           AssignFile(myFile, TargetPath);
           if FileExists(TargetPath) then Append(myFile);
           if not FileExists(TargetPath) then ReWrite(myFile);
            WriteLn(myFile, xText);
           CloseFile(myFile);
        EXCEPT
             //writeln(xtext + '-> error writing ' +     TargetPath);
          END;
      END;
//##############################################################################
PROCEDURE Tlogs.logsStart(zText:string);
      var
        zDate:string;
        myFile : TextFile;
        xText:string;
        TargetPath:string;
        info : stat;
        size:longint;maintenant : Tsystemtime;
      BEGIN

        TargetPath:='/var/log/artica-postfix/start.log';

        forcedirectories('/var/log/artica-postfix');
        getlocaltime(maintenant);zDate := FormatHeure(maintenant.Year)+'-' +FormatHeure(maintenant.Month)+ '-' + FormatHeure(maintenant.Day)+ chr(32)+FormatHeure(maintenant.Hour)+':'+FormatHeure(maintenant.minute)+':'+ FormatHeure(maintenant.second);

        if length(module_name)>0 then logsModule(zText);
        xText:=zDate + ' ' + zText;
        TRY
        EXCEPT
        writeln('unable to write /var/log/artica-postfix/start.log');
        END;

        TRY
           if GetFileSizeKo(TargetPath)>MaxlogSize then begin
              ExecuteProcess('/bin/rm','-f ' +  TargetPath);
              xText:=xText + ' (log file was killed before)';
              end;
              EXCEPT
              exit;
        end;

        TRY

           AssignFile(myFile, TargetPath);
           if FileExists(TargetPath) then Append(myFile);
           if not FileExists(TargetPath) then ReWrite(myFile);
            WriteLn(myFile, xText);
           CloseFile(myFile);
        EXCEPT
             //writeln(xtext + '-> error writing ' +     TargetPath);
          END;
      END;
//##############################################################################


PROCEDURE tlogs.Syslogs(text:string);
var
   s:string;
   LogString: array[0..1024] of char;
   LogPrefix: array[0..255] of char;
   
const
  LOG_PID       = $01;
  LOG_CONS      = $02;
  LOG_ODELAY    = $04;
  LOG_NDELAY    = $08;
  LOG_NOWAIT    = $10;
  LOG_PERROR    = $20;
  LOG_EMERG             = 0;
  LOG_ALERT             = 1;
  LOG_CRIT              = 2;
  LOG_ERR               = 3;
  LOG_WARNING           = 4;
  LOG_NOTICE            = 5;
  LOG_INFO              = 6;
  LOG_DEBUG             = 7;
   
begin
   // S := FormatDateTime('yyyy-mm-dd hh:nn:ss', Now)
  s:= ExtractFileName(ParamStr(0));
  s:= s+'['+IntToStr(fpGetPid)+']';
  StrPCopy(LogPrefix, s);
  OpenLog(LogPrefix, LOG_NOWAIT, LOG_INFO);
  StrPCopy( LogString,text);
  SysLog(6, LogString, [0]);
  CloseLog();
end;

PROCEDURE Tlogs.mysql_logs(event_id:string;event_type:string;event_text:string);
var
   zDate      :string;
   processname:string;
   l          :TstringList;
   queuefile  :string;
   maintenant : Tsystemtime;
   hostname   :string;
begin

   {
    event_id
            2 services
            3 update
            4 mailboxes
            5 OBM
            6 backup
            
    event_type
            0 error
            1 success
            2 infos
    }
    

   hostname:=SYSTEM_FQDN();
   getlocaltime(maintenant);
   zDate := FormatHeure(maintenant.Year)+'-' +FormatHeure(maintenant.Month)+ '-' + FormatHeure(maintenant.Day)+ chr(32)+FormatHeure(maintenant.Hour)+':'+FormatHeure(maintenant.minute)+':'+ FormatHeure(maintenant.second);
   processname:=ExtractFileName(ParamStr(0));
   l:=TstringList.Create;
   forcedirectories('/opt/artica/mysql/artica-queue/');
   queuefile:='/opt/artica/mysql/artica-queue/'+MD5FromString(zDate+event_id+event_type+event_text);
   
   event_text:=AnsiReplaceStr(event_text,'''','`');
   event_text:=AnsiReplaceStr(event_text,'\','\\');
   
   l:=TStringList.Create;
   l.Add('INSERT INTO `artica_events`.`events` (');
   l.Add('`ID` ,');
   l.Add('`zDate` ,');
   l.Add('`hostname` ,');
   l.Add('`event_id` ,');
   l.Add('`event_type` ,');
   l.Add('`process` ,');
   l.Add('`text`');
   l.Add(')');
   l.Add('VALUES (');
   l.Add('NULL , '''+zDate+''','''+hostname+''', '''+event_id+''', '''+event_type+''', '''+processname+''', '''+event_text+'''');
   l.Add(');');
   
   if Connect() then begin
        if QUERY_SQL(PChar(l.Text),'artica_events') then begin
           mysql_close(sock);
           l.free;
           exit;
        end;
   end;
   
   l.SaveToFile(queuefile);
   l.free;
end;


//##############################################################################
PROCEDURE Tlogs.mysql_notify(error_id:string;daemon:string;event_text:string);
var
   zDate      :string;
   processname:string;
   l          :TstringList;
   queuefile  :string;
   maintenant : Tsystemtime;
   hostname   :string;
   md5f       :string;
begin



   l:=TstringList.Create;
   forcedirectories('/opt/artica/mysql/artica-queue/');
   md5f:=MD5FromString(error_id+daemon+event_text);
   queuefile:='/opt/artica/mysql/artica-queue/'+md5f;

   event_text:=AnsiReplaceStr(event_text,'''','`');
   event_text:=AnsiReplaceStr(event_text,'\','\\');

   l:=TStringList.Create;
   l.Add('INSERT INTO `artica_events`.`notify` (');
   l.Add('`daemon` ,');
   l.Add('`event_text` ,');
   l.Add('`error_id` ,');
   l.Add('`zMD5`');
   l.Add(')');
   l.Add('VALUES (');
   l.Add(''''+daemon+''','''+event_text+''', '''+error_id+''', '''+md5f+'''');
   l.Add(');');
   

   if Connect() then begin
        if QUERY_SQL(PChar(l.Text),'artica_events') then begin
           mysql_close(sock);
           l.free;
           exit;
        end;
   end;
   l.SaveToFile(queuefile);
   l.free;
end;


//##############################################################################
PROCEDURE Tlogs.mysql_sysev(event_type:string;daemon:string;event_text:string;zDate:string;msg_id:string);
var

   processname:string;
   l          :TstringList;
   queuefile  :string;
   maintenant : Tsystemtime;
   hostname   :string;
   md5f       :string;
begin



   l:=TstringList.Create;
   forcedirectories('/opt/artica/mysql/artica-queue/');
   md5f:=MD5FromString(event_type+daemon+event_text+zDate+msg_id);
   queuefile:='/opt/artica/mysql/artica-queue/'+md5f;

   event_text:=AnsiReplaceStr(event_text,'''','`');
   event_text:=AnsiReplaceStr(event_text,'\','\\');



l.Add('INSERT INTO `artica_events`.`sys_events` (');
l.Add('`md5` ,');
l.Add('`ID` ,');
l.Add('`zDate` ,');
l.Add('`type` ,');
l.Add('`event_text` ,');
l.Add('`daemon` ,');
l.Add('`msg_id`');
l.Add(')');
l.Add('VALUES (');
l.Add(''''+md5f+''', NULL , '''+zDate+''', '''+event_type+''', '''+event_text+''', '''+daemon+''', '''+msg_id+''');');


   if Connect() then begin
        if QUERY_SQL(PChar(l.Text),'artica_events') then begin
           mysql_close(sock);
           l.free;
           exit;
        end;
   end;

l.SaveToFile(queuefile);
l.free;

end;
//##############################################################################
PROCEDURE Tlogs.mysql_virus(daemon:string;event_text:string;zDate:string;virusname:string);
var

   processname:string;
   l          :TstringList;
   queuefile  :string;
   maintenant : Tsystemtime;
   hostname   :string;
   md5f       :string;
begin



   l:=TstringList.Create;
   forcedirectories('/opt/artica/mysql/artica-queue/');
   md5f:=MD5FromString(virusname+daemon+event_text+zDate);
   queuefile:='/opt/artica/mysql/artica-queue/'+md5f;

   event_text:=AnsiReplaceStr(event_text,'''','`');
   event_text:=AnsiReplaceStr(event_text,'\','\\');



l.Add('INSERT INTO `artica_events`.`infected_count` (');
l.Add('`zMD5` ,');
l.Add('`zDate` ,');
l.Add('`event_text` ,');
l.Add('`daemon` ,');
l.Add('`virusname`');
l.Add(')');
l.Add('VALUES (');
l.Add(''''+md5f+''', '''+zDate+''', '''+event_text+''', '''+daemon+''', '''+virusname+''');');


   if Connect() then begin
        if QUERY_SQL(PChar(l.Text),'artica_events') then begin
           mysql_close(sock);
           l.free;
           exit;
        end;
   end;
l.SaveToFile(queuefile);
l.free;

end;
//##############################################################################
function Tlogs.SYSTEM_FQDN():string;
begin
    D:=COMMANDLINE_PARAMETERS('debug');
    fpsystem('/bin/hostname >/opt/artica/logs/hostname.txt');
    result:=ReadFileIntoString('/opt/artica/logs/hostname.txt');
    result:=trim(result);
    if D then writeln('hostname=',result);
end;
//##############################################################################
PROCEDURE Tlogs.logs(zText:string);
      var
        zDate:string;
        myFile : TextFile;
        xText:string;
        TargetPath:string;
        info : stat;
        size:longint;maintenant : Tsystemtime;
        processname:string;
      BEGIN
        processname:=ExtractFileName(ParamStr(0));
        TargetPath:='/var/log/artica-postfix/artica-postfix.log';

        forcedirectories('/var/log/artica-postfix');
        getlocaltime(maintenant);zDate := FormatHeure(maintenant.Year)+'-' +FormatHeure(maintenant.Month)+ '-' + FormatHeure(maintenant.Day)+ chr(32)+FormatHeure(maintenant.Hour)+':'+FormatHeure(maintenant.minute)+':'+ FormatHeure(maintenant.second);

        if length(module_name)>0 then logsModule(zText);
        xText:=zDate + ' ' + processname  + ' ' + zText;

        TRY
        if Enable_echo=True then writeln(zText);
        EXCEPT
        END;
        
        TRY
           if GetFileSizeKo(TargetPath)>MaxlogSize then begin
              ExecuteProcess('/bin/rm','-f ' +  TargetPath);
              xText:=xText + ' (log file was killed before)';
              end;
              EXCEPT
              exit;
        end;

        TRY

           AssignFile(myFile, TargetPath);
           if FileExists(TargetPath) then Append(myFile);
           if not FileExists(TargetPath) then ReWrite(myFile);
            WriteLn(myFile, xText);
           CloseFile(myFile);
        EXCEPT
             //writeln(xtext + '-> error writing ' +     TargetPath);
          END;
      END;
//##############################################################################
PROCEDURE Tlogs.Debuglogs(zText:string);
      var
        zDate:string;
        myFile : TextFile;
        xText:string;
        TargetPath:string;
        info : stat;
        size:longint;maintenant : Tsystemtime;
        processname:string;
      BEGIN
        processname:=ExtractFileName(ParamStr(0));
        TargetPath:='/var/log/artica-postfix/' + processname + '.debug';

        forcedirectories('/var/log/artica-postfix');
        getlocaltime(maintenant);zDate := FormatHeure(maintenant.Year)+'-' +FormatHeure(maintenant.Month)+ '-' + FormatHeure(maintenant.Day)+ chr(32)+FormatHeure(maintenant.Hour)+':'+FormatHeure(maintenant.minute)+':'+ FormatHeure(maintenant.second);

        if length(module_name)>0 then logsModule(zText);
        xText:=zDate + ' ' +intTostr(fpgetpid)+ ' '+ zText;

        TRY
           if GetFileSizeKo(TargetPath)>MaxlogSize then begin
              ExecuteProcess('/bin/rm','-f ' +  TargetPath);
              xText:=xText + ' (log file was killed before)';
              end;
              EXCEPT
              exit;
        end;

        TRY

           AssignFile(myFile, TargetPath);
           if FileExists(TargetPath) then Append(myFile);
           if not FileExists(TargetPath) then ReWrite(myFile);
            WriteLn(myFile, xText);
           CloseFile(myFile);
        EXCEPT
             //writeln(xtext + '-> error writing ' +     TargetPath);
          END;
      END;
//##############################################################################
FUNCTION Tlogs.TRANSFORM_DATE_MONTH(zText:string):string;
begin
  zText:=UpperCase(zText);
  zText:=StringReplace(zText, 'JAN', '01',[rfReplaceAll, rfIgnoreCase]);
  zText:=StringReplace(zText, 'FEB', '02',[rfReplaceAll, rfIgnoreCase]);
  zText:=StringReplace(zText, 'MAR', '03',[rfReplaceAll, rfIgnoreCase]);
  zText:=StringReplace(zText, 'APR', '04',[rfReplaceAll, rfIgnoreCase]);
  zText:=StringReplace(zText, 'MAY', '05',[rfReplaceAll, rfIgnoreCase]);
  zText:=StringReplace(zText, 'JUN', '06',[rfReplaceAll, rfIgnoreCase]);
  zText:=StringReplace(zText, 'JUL', '07',[rfReplaceAll, rfIgnoreCase]);
  zText:=StringReplace(zText, 'AUG', '08',[rfReplaceAll, rfIgnoreCase]);
  zText:=StringReplace(zText, 'SEP', '09',[rfReplaceAll, rfIgnoreCase]);
  zText:=StringReplace(zText, 'OCT', '10',[rfReplaceAll, rfIgnoreCase]);
  zText:=StringReplace(zText, 'NOV', '11',[rfReplaceAll, rfIgnoreCase]);
  zText:=StringReplace(zText, 'DEC', '12',[rfReplaceAll, rfIgnoreCase]);
  result:=zText;
end;


PROCEDURE Tlogs.logsModule(zText:string);
      var
        zDate:string;
        myFile : TextFile;
        xText:string;
        TargetPath:string;
        info : stat;
        size:longint;
        maintenant : Tsystemtime;

      BEGIN
        D:=COMMANDLINE_PARAMETERS('debug');
        if D then writeln('logsmodule();');
        TargetPath:='/var/log/artica-postfix/' + module_name + '.log';
        

        forcedirectories('/var/log/artica-postfix');
        getlocaltime(maintenant);
        zDate := FormatHeure(maintenant.Year)+'-' +FormatHeure(maintenant.Month)+ '-' + FormatHeure(maintenant.Day)+ chr(32)+FormatHeure(maintenant.Hour)+':'+FormatHeure(maintenant.minute)+':'+ FormatHeure(maintenant.second);
        xText:=zDate + ' ' + zText;


        TRY
           if GetFileSizeKo(TargetPath)>MaxlogSize then begin
              ExecuteProcess('/bin/rm','-f ' +  TargetPath);
              xText:=xText + ' (log file was killed before)';
              end;
              EXCEPT
              exit;
        end;

        TRY

           AssignFile(myFile, TargetPath);
           if FileExists(TargetPath) then Append(myFile);
           if not FileExists(TargetPath) then ReWrite(myFile);
            WriteLn(myFile, xText);
           CloseFile(myFile);
        EXCEPT
             writeln(xtext + '-> error writing ' +     TargetPath);
          END;
      END;
//#############################################################################
procedure Tlogs.DeleteLogs();
var
        TargetPath:string;
        val_GetFileSizeKo:integer;
begin
   TargetPath:='/var/log/artica-postfix/artica-postfix.log';
  val_GetFileSizeKo:=GetFileSizeKo(TargetPath);
  if debug then logs('Tlogs.DeleteLogs() -> ' + IntToStr(val_GetFileSizeKo) + '>? -> ' + IntToStr(MaxlogSize));
  if val_GetFileSizeKo>MaxlogSize then  Shell('/bin/rm -f ' +  TargetPath);

end;
//##############################################################################


function Tlogs.GetFileSizeKo(path:string):longint;
Var
L : File Of byte;
size:longint;
ko:longint;

begin
if not FileExists(path) then begin
   result:=0;
   exit;
end;
   TRY
  Assign (L,path);
  Reset (L);
  size:=FileSize(L);
   Close (L);
  ko:=size div 1024;
  result:=ko;
  EXCEPT

  end;
end;
//##############################################################################
function Tlogs.GetFileBytes(path:string):longint;
Var
L : File Of byte;
size:longint;
ko:longint;

begin
if not FileExists(path) then begin
   result:=0;
   exit;
end;
   TRY
  Assign (L,path);
  Reset (L);
  size:=FileSize(L);
   Close (L);
  ko:=size;
  result:=ko;
  EXCEPT

  end;
end;
function Tlogs.MaxSizeLimit:integer;
var
     Myini:TIniFile;
     confPath:string;
     SizeLimit:integer;
begin
exit(100);
end;
//##############################################################################

function Tlogs.FormatHeure (value : Int64) : String;
var minus : boolean;
begin
result := '';
if value = 0 then
result := '0';
Minus := value <0;
if minus then
value := -value;
while value >0 do begin
      result := char((value mod 10) + integer('0'))+result;
      value := value div 10;
end;
 if minus then
 result := '-' + result;
 if length(result)=1 then result := '0'+result;
end;
 //##############################################################################

function Tlogs.SearchAndReplace(sSrc, sLookFor, sReplaceWith: string ): string;
var
  nPos,
  nLenLookFor : integer;
begin
  nPos        := Pos( sLookFor, sSrc );
  nLenLookFor := Length( sLookFor );
  while(nPos > 0)do
  begin
    Delete( sSrc, nPos, nLenLookFor );
    Insert( sReplaceWith, sSrc, nPos );
    nPos := Pos( sLookFor, sSrc );
  end;
  Result := sSrc;
end;

//##############################################################################
function Tlogs.COMMANDLINE_PARAMETERS(FoundWhatPattern:string):boolean;
var
   i:integer;
   s:string;
   RegExpr:TRegExpr;

begin
 result:=false;
 if ParamCount>0 then begin
     for i:=1 to ParamCount do begin
        s:=s  + ' ' +ParamStr(i);
     end;
 end;
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:=FoundWhatPattern;
   if RegExpr.Exec(s) then begin
      RegExpr.Free;
      result:=True;
   end;


end;
//##############################################################################
function Tlogs.MD5FromString(value:string):string;
var
Digest:TMD5Digest;
begin
Digest:=MD5String(value);
exit(MD5Print(Digest));
end;
//##############################################################################
function Tlogs.ReadFileIntoString(path:string):string;
var
   List:TstringList;
begin

      if not FileExists(path) then begin
        exit;
      end;

      List:=Tstringlist.Create;
      List.LoadFromFile(path);
      result:=List.Text;
      List.Free;
end;
//##############################################################################
function Tlogs.Connect():boolean;
var
   root     :string;
   password :string;
   port     :string;
   server   :string;
   socket   :string;
begin
  root    :=MYSQL_INFOS('database_admin') +#0;
  password:=MYSQL_INFOS('database_password') +#0;
  port    :=MYSQL_SERVER_PARAMETERS_CF('port') +#0;
  server  :=MYSQL_INFOS('mysql_server') +#0;
  socket  :=MYSQL_SERVER_PARAMETERS_CF('socket')+#0;
  alloc   :=mysql_init(PMYSQL(@qmysql));
  sock    :=mysql_real_connect(alloc, PChar(@server[1]), PChar(@root[1]), PChar(@password[1]), nil, StrtoInt(port), PChar(@socket[1]), 0);

  if sock=Nil then
    begin
      Debuglogs('Connect():: Couldn''t connect to MySQL.');
      Debuglogs('Connect():: Error was: '+ StrPas(mysql_error(@qmysql)));
      exit(false);
   end;
  exit(true);

end;
//##############################################################################
function Tlogs.MYSQL_SERVER_PARAMETERS_CF(key:string):string;
var ini:TiniFile;
begin
  result:='';
  if not FileExists(MYSQL_MYCNF_PATH()) then exit();
  ini:=TIniFile.Create(MYSQL_MYCNF_PATH());
  result:=ini.ReadString('mysqld',key,'');
  ini.free;
end;
//#############################################################################
function Tlogs.MYSQL_MYCNF_PATH:string;
var path:string;
begin

  if FileExists('/opt/artica/mysql/etc/my.cnf') then exit('/opt/artica/mysql/etc/my.cnf');
  if FileExists('/etc/mysql/my.cnf') then exit('/etc/mysql/my.cnf');
  if FileExists('/etc/my.cnf') then exit('/etc/my.cnf');

end;
//#############################################################################
function Tlogs.MYSQL_INFOS(val:string):string;
var ini:TIniFile;
begin
if not FileExists('/etc/artica-postfix/artica-mysql.conf') then exit();
ini:=TIniFile.Create('/etc/artica-postfix/artica-mysql.conf');
result:=ini.ReadString('MYSQL',val,'');
ini.Free;
end;
//#############################################################################
function Tlogs.MYSQL_PORT():string;
var
   mysql_server:string;
   mycf_path   :string;
begin
   mycf_path:=MYSQL_MYCNF_PATH();
   result:=MYSQL_READ_CF('port',mycf_path);
   if length(result)=0 then result:='3306';
end;
//#############################################################################
FUNCTION Tlogs.QUERY_SQL(sql:Pchar;database:string):boolean;
var
   sql_results:longint;
   db:Pchar;
begin
    db:=PChar(database+#0);
    sql_results:=mysql_select_db(sock,db);
    
    if sql_results=1 then begin
        Debuglogs('QUERY_SQL:: mysql_select_db->error number : ' + IntToStr(sql_results));
        Debuglogs('QUERY_SQL:: '+ mysql_error(sock));
        exit(false);
    end;
     sql_results:=mysql_query(alloc, sql);
     if sql_results=1 then begin
        Debuglogs('QUERY_SQL:: mysql_query->error number : ' + IntToStr(sql_results));
        Debuglogs('QUERY_SQL:: error query ->'+sql);
        Debuglogs('QUERY_SQL:: '+ mysql_error(sock));
        exit(false);
     end;


 exit(true);
end;
//#############################################################################
function Tlogs.MYSQL_READ_CF(key:string;mycfpath:string):string;
var ini:TiniFile;
begin
  result:='';
  if not FileExists(mycfpath) then exit();
  ini:=TIniFile.Create(mycfpath);
  result:=ini.ReadString('mysqld',key,'');
  ini.free;
end;
//#############################################################################
procedure Tlogs.Disconnect();
begin
Try
   mysql_close(sock);
except
   Debuglogs('Disconnect() -> Failed to close');
end;
end;
//#############################################################################
function Tlogs.GetFileSizeMo(path:string):longint;
Var
L : File Of byte;
size:longint;
ko:longint;

begin
if not FileExists(path) then begin
   result:=0;
   exit;
end;
   TRY
  Assign (L,path);
  Reset (L);
  size:=FileSize(L);
   Close (L);
  ko:=size div 1024;
  ko:=ko div 1000;
  result:=ko;
  EXCEPT

  end;
end;
//##############################################################################
end.

