unit spamass;

{$MODE DELPHI}
{$LONGSTRINGS ON}

interface

uses
    Classes, SysUtils,variants,strutils,IniFiles, Process,
    logs in '/home/dtouzeau/developpement/artica-postfix/bin/src/artica-install/logs.pas',unix,
    RegExpr in '/home/dtouzeau/developpement/artica-postfix/bin/src/artica-install/RegExpr.pas',
    zsystem;

type LDAP=record
      admin:string;
      password:string;
      suffix:string;
      servername:string;
      Port:string;
  end;

  type
  Tspamass=class


private
     LOGS:Tlogs;
     GLOBAL_INI:TiniFIle;
     function COMMANDLINE_PARAMETERS(FoundWhatPattern:string):boolean;
     function get_INFOS(key:string):string;
     function ReadFileIntoString(path:string):string;
     function TRUSTED_NETWORK():string;
     function BLOCK_MAIL():string;
     SYS:TSystem;
     artica_path:string;


public
    procedure   Free;
    constructor Create(const zSYS:Tsystem);
    FUNCTION    MILTER_INITD_PATH():string;
    FUNCTION    MILTER_DAEMON_BIN_PATH():string;
    FUNCTION    MILTER_SOCKET_PATH():string;
    FUNCTION    MILTER_PID():string;
    PROCEDURE   MILTER_ETC_DEFAULT();
    procedure   MILTER_START();
    procedure   MILTER_STOP();
    function    MILTER_VERSION():string;
    FUNCTION    MILTER_STATUS():string;
    FUNCTION    MILTER_DEFAULT_PATH():string;
    procedure   CHANGE_INITD_MILTER();
    function    rewrite_header():string;
    function    SPAMASSASSIN_LOCAL_CF():string;
    function    SPAMASSASSIN_BIN_PATH():string;
    procedure   SPAMASSASSIN_START();
    function    SPAMASSASSIN_INITD():string;
    procedure   SPAMASSASSIN_ETC_DEFAULT();
    procedure   SPAMASSASSIN_STOP();
    function    SPAMASSASSIN_PID():string;
    FUNCTION    SPAMASSASSIN_STATUS():string;
    function    SPAMASSASSIN_VERSION():string;
    function    SPAMASSASSIN_PATTERN_VERSION():string;
    function    SA_UPDATE_PATH():string;
    
    function    RAZOR_AGENT_CONF_PATH():string;
    function    RAZOR_ADMIN_PATH():string;
    procedure   RAZOR_INIT();
    procedure   RAZOR_SET_VALUE(key:string;value:string);

    function    PYZOR_BIN_PATH():string;

END;

implementation

constructor Tspamass.Create(const zSYS:Tsystem);
begin
       forcedirectories('/etc/artica-postfix');
       LOGS:=tlogs.Create();
       if not DirectoryExists('/usr/share/artica-postfix') then begin
              artica_path:=ParamStr(0);
              artica_path:=ExtractFilePath(artica_path);
              artica_path:=AnsiReplaceText(artica_path,'/bin/','');

      end else begin
          artica_path:='/usr/share/artica-postfix';
      end;
end;
//##############################################################################
procedure Tspamass.free();
begin
    logs.Free;
end;
//##############################################################################
FUNCTION Tspamass.MILTER_INITD_PATH():string;
begin
 if FileExists('/etc/init.d/spamass-milter') then exit('/etc/init.d/spamass-milter');
end;
//##############################################################################
FUNCTION Tspamass.MILTER_DAEMON_BIN_PATH():string;
begin
if FileExists('/usr/sbin/spamass-milter') then exit('/usr/sbin/spamass-milter');
end;
//##############################################################################
function  Tspamass.RAZOR_AGENT_CONF_PATH():string;
begin
result:=ExtractFilePath(SPAMASSASSIN_LOCAL_CF()) + '.razor/razor-agent.conf';
end;
//##############################################################################
function tspamass.RAZOR_ADMIN_PATH():string;
begin
if FileExists('/usr/bin/razor-admin') then exit('/usr/bin/razor-admin');
if FileExists('/opt/artica/bin/razor-admin') then exit('/opt/artica/bin/razor-admin');
end;
//##############################################################################
FUNCTION Tspamass.MILTER_SOCKET_PATH():string;
begin
if FIleExists('/var/spool/postfix/spamass/spamass.sock') then exit('/var/spool/postfix/spamass/spamass.sock');
if FileExists('/var/run/spamass/spamass.sock') then exit('/var/run/spamass/spamass.sock');
if FileExists('/var/run/sendmail/spamass.sock') then exit('/var/run/sendmail/spamass.sock');
exit('/var/spool/postfix/spamass/spamass.sock');
end;
//##############################################################################
function Tspamass.SA_UPDATE_PATH():string;
begin
    if FileExists('/usr/bin/sa-update') then exit('/usr/bin/sa-update');
    if FileExists('/opt/artica/bin/sa-update') then exit('/opt/artica/bin/sa-update');
end;
//##############################################################################
function Tspamass.SPAMASSASSIN_BIN_PATH():string;
begin
   if FileExists('/usr/sbin/spamd') then exit('/usr/sbin/spamd');
   if FileExists('/usr/bin/spamd') then exit('/usr/bin/spamd');
   if FileExists('/opt/artica/bin/spamd') then exit('/opt/artica/bin/spamd');
end;
//##############################################################################

function Tspamass.PYZOR_BIN_PATH():string;
begin
     if FileExists('/usr/bin/pyzor') then exit('/usr/bin/pyzor');
end;
//##############################################################################
FUNCTION Tspamass.MILTER_PID():string;
begin
if FileExists('/var/run/spamass/spamass.pid') then exit(SYS.GET_PID_FROM_PATH('/var/run/spamass/spamass.pid'));
end;
//##############################################################################
FUNCTION Tspamass.MILTER_DEFAULT_PATH():string;
begin
if FileExists('/etc/default/spamass-milter') then exit('/etc/default/spamass-milter');
if FileExists('/etc/sysconfig/spamass-milter') then exit('/etc/sysconfig/spamass-milter');
end;
//##############################################################################


PROCEDURE Tspamass.MILTER_ETC_DEFAULT();
var
l:TstringList;
begin
l:=TstringList.Create;
if not FileExists(MILTER_DEFAULT_PATH()) then exit();
l.Add('# spamass-milt startup defaults');
l.Add('');
l.Add('# OPTIONS are passed directly to spamass-milter.');
l.Add('# man spamass-milter for details');
l.Add('');
l.Add('# Default, use the nobody user as the default user, ignore messages');
l.Add('# from localhost');
l.Add('OPTIONS="-P /var/run/spamass/spamass.pid -u postfix -i 127.0.0.1 -- --port 9031"');
l.Add('');
l.Add('# Reject emails with spamassassin scores > 15.');
l.Add('#OPTIONS="-r 15"');
l.Add('');
l.Add('# Do not modify Subject:, Content-Type: or body.');
l.Add('#OPTIONS="-m"');
l.Add('');
l.Add('######################################');
l.Add('# If /usr/sbin/postfix is executable, the following are set by');
l.Add('# default. You can override them by uncommenting and changing them');
l.Add('# here.');
l.Add('######################################');
l.Add('SOCKET="/var/spool/postfix/spamass/spamass.sock"');
l.Add('SOCKETOWNER="postfix:postfix"');
l.Add('SOCKETMODE="0660"');
l.Add('######################################');
logs.Debuglogs('spamass-milter:: MILTER_ETC_DEFAULT:: save '+MILTER_DEFAULT_PATH());
l.SaveToFile(MILTER_DEFAULT_PATH());
l.free;
end;
//##############################################################################
procedure Tspamass.MILTER_START();
var
   cmd:string;
   tn:string;
   b:string;
begin
   if not FileExists(MILTER_INITD_PATH()) then exit;

   if get_INFOS('SpamAssMilterEnabled')<>'1' then begin
        logs.DebugLogs('Starting......: spamass-milter daemon is disabled by Artica');
        exit;
   end;
   

  if not FileExists(SYS.LOCATE_SU()) then begin
      logs.Syslogs('Starting......: mailArchiver failed, unable to stat "su" tool');
      exit;
  end;


   if SYS.PROCESS_EXIST(MILTER_PID()) then begin
        logs.DebugLogs('spamass-milter:: MILTER_START:: spamass-milter daemon is already running using PID ' + MILTER_PID() + '...');
        exit;
   end;
   
   if FileExists('/var/spool/postfix/spamass/spamass.sock') then logs.DeleteFile('/var/spool/postfix/spamass/spamass.sock');
   
   logs.DebugLogs('spamass-milter:: MILTER_START:: spamass-milter daemon is enabled');
   MILTER_ETC_DEFAULT();
   CHANGE_INITD_MILTER();
   forcedirectories('/var/spool/postfix/spamass');
   forcedirectories('/var/run/spamass');
   logs.OutputCmd('/bin/chown -R postfix:postfix /var/run/spamass');
   logs.OutputCmd('/bin/chown -R postfix:postfix /var/spool/postfix/spamass');
   
   if SYS.IsUserExists('spamass-milter') then begin
      SYS.AddUserToGroup('postfix','nogroup','','');
      SYS.AddUserToGroup('spamass-milter','postfix','','');
      SYS.AddUserToGroup('spamass-milter','mail','','');
   end;

   tn:=TRUSTED_NETWORK();
   b:=BLOCK_MAIL();
   if not SYS.PROCESS_EXIST(MILTER_PID()) then begin
     logs.DebugLogs('Starting......: spamass-milter daemon');
     cmd:=SYS.LOCATE_SU() +' postfix -c "'+MILTER_DAEMON_BIN_PATH()+b+' -f -p /var/spool/postfix/spamass/spamass.sock -P /var/run/spamass/spamass.pid '+tn+' -- --port 9031" &';
     logs.OutputCmd(cmd);
   end;
   
   if not SYS.PROCESS_EXIST(MILTER_PID()) then begin
      logs.DebugLogs('Starting......: spamass-milter daemon failed to start');
      exit;
   end else begin
       logs.DebugLogs('Starting......: spamass-milter success to pid '+MILTER_PID() );
       logs.Syslogs('Success starting spamass-milter');
   end;
           
   
end;
//#############################################################################
function Tspamass.TRUSTED_NETWORK():string;
var
    RegExpr:TRegExpr;
    l:TStringList;
    i:integer;
    tn:string;
begin

if not FileExists('/etc/spamassassin/local.cf') then begin
   logs.Syslogs('Unable to stat /etc/spamassassin/local.cf');
   exit;
end;

   tn:='';
   l:=TstringList.Create;
   l.LoadFromFile('/etc/spamassassin/local.cf');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='^trusted_networks\s+(.+)';
   for i:=0 to l.Count-1 do begin
       if RegExpr.Exec(l.Strings[i]) then begin
           logs.Syslogs('Starting......: spamass-milter Adding trusted network ' + RegExpr.Match[1]);
           tn:=tn+'-i '+ RegExpr.Match[1]+' ';
       end;
   end;
   
   result:=tn;
   l.free;
   RegExpr.free;
end;
//#############################################################################
function Tspamass.BLOCK_MAIL():string;
var
    RegExpr:TRegExpr;
    l:TStringList;
    i:integer;

begin

if not FileExists('/etc/spamassassin/local.cf') then begin
   logs.Syslogs('Unable to stat /etc/spamassassin/local.cf');
   exit;
end;

   l:=TstringList.Create;
   l.LoadFromFile('/etc/spamassassin/local.cf');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='milter_block_with_required_score:([0-9\.]+)';
   for i:=0 to l.Count-1 do begin
       if RegExpr.Exec(l.Strings[i]) then begin
           if RegExpr.Match[1]='0' then break;
           logs.Syslogs('Starting......: spamass-milter Block mails up to ' + RegExpr.Match[1]);
           result:=' -r '+ RegExpr.Match[1]+' ';
       end;
   end;


   l.free;
   RegExpr.free;
end;
//#############################################################################
function Tspamass.rewrite_header():string;
var
    RegExpr:TRegExpr;
    l:TStringList;
    i:integer;

begin

if not FileExists('/etc/spamassassin/local.cf') then begin
   logs.Syslogs('Unable to stat /etc/spamassassin/local.cf');
   exit;
end;

   l:=TstringList.Create;
   l.LoadFromFile('/etc/spamassassin/local.cf');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='rewrite_header Subject\s+(.+)';
   for i:=0 to l.Count-1 do begin
       if RegExpr.Exec(l.Strings[i]) then begin
          result:=RegExpr.Match[1];
       end;
   end;


   l.free;
   RegExpr.free;
end;
//#############################################################################




procedure Tspamass.MILTER_STOP();
var
count:integer;
PID:string;
begin
  if not FileExists(MILTER_INITD_PATH()) then begin
     logs.DebugLogs('Stopping spamass-milter daemon: not installed');
     exit;
  end;
  

  count:=0;
  CHANGE_INITD_MILTER();

  if SYS.PROCESS_EXIST(MILTER_PID()) then begin
     logs.Output('Stopping spamass-milter daemon: ' + MILTER_PID() + ' PID');

     fpsystem('/bin/kill ' + MILTER_PID());
     while SYS.PROCESS_EXIST(MILTER_PID()) do begin
           Inc(count);
           sleep(300);
           if count>20 then begin
                  logs.Output('killing spamass-milter........: ' + MILTER_PID() + ' PID (timeout)');
                  fpsystem('/bin/kill -9 ' + MILTER_PID());
                  break;
           end;
     end;
     
     
     PID:=SYS.PidAllByProcessPath(MILTER_DAEMON_BIN_PATH());
     if length(PID)>0 then begin
        logs.Output('killing spamass-milter........: ' + PID + ' PID(s)');
        fpsystem('/bin/kill -9 ' + PID);
     end;
     
     
  end else begin
      logs.Output('Stopping spamass-milter daemon: Already stopped');
  end;

end;
//##############################################################################
function Tspamass.MILTER_VERSION():string;
var
    RegExpr:TRegExpr;
    FileDatas:TStringList;
    i:integer;
    main_dbver:string;
begin
if not FileExists(MILTER_DAEMON_BIN_PATH()) then exit;
fpsystem(MILTER_DAEMON_BIN_PATH() +' -h >/opt/artica/logs/spamass-v 2>&1');
    RegExpr:=TRegExpr.Create;
    FileDatas:=TStringList.Create;
    FileDatas.LoadFromFile('/opt/artica/logs/spamass-v');
    RegExpr.Expression:='Version\s+([0-9\.]+)';
    for i:=0 to FileDatas.Count-1 do begin
        if RegExpr.Exec(FileDatas.Strings[i]) then begin
             result:=RegExpr.Match[1];
             break;
        end;
    end;

    RegExpr.free;
    FileDatas.Free;

end;
//#############################################################################
FUNCTION Tspamass.MILTER_STATUS():string;
var
   ini:TstringList;
begin
if not FileExists(MILTER_DAEMON_BIN_PATH()) then exit;
      ini:=TstringList.Create;
      ini.Add('[SPAMASS_MILTER]');
      if SYS.PROCESS_EXIST(MILTER_PID()) then ini.Add('running=1') else  ini.Add('running=0');
      ini.Add('application_installed=1');
      ini.Add('master_pid='+ MILTER_PID());
      ini.Add('master_memory=' + IntToStr(SYS.PROCESS_MEMORY(MILTER_PID())));
      ini.Add('master_version=' + MILTER_VERSION());
      ini.Add('status='+SYS.PROCESS_STATUS(MILTER_PID()));
      ini.Add('service_name=APP_SPAMASS_MILTER');
      ini.Add('service_cmd=spamd');
      ini.Add('service_disabled='+ get_INFOS('SpamAssMilterEnabled'));
      
      result:=ini.Text;
      ini.free;
end;
//#########################################################################################
function Tspamass.ReadFileIntoString(path:string):string;
var
   List:TstringList;
begin

      if not FileExists(path) then begin
        exit;
      end;

      List:=Tstringlist.Create;
      List.LoadFromFile(path);
      result:=List.Text;
      List.Free;
end;
//##############################################################################
function Tspamass.COMMANDLINE_PARAMETERS(FoundWhatPattern:string):boolean;
var
   i:integer;
   s:string;
   RegExpr:TRegExpr;

begin
 result:=false;
 s:='';
 if ParamCount>1 then begin
     for i:=2 to ParamCount do begin
        s:=s  + ' ' +ParamStr(i);
     end;
 end;
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:=FoundWhatPattern;
   if RegExpr.Exec(s) then begin
      RegExpr.Free;
      result:=True;
   end;


end;
//##############################################################################
function Tspamass.get_INFOS(key:string):string;
var value:string;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=GLOBAL_INI.ReadString('INFOS',key,'');
result:=value;
GLOBAL_INI.Free;
end;
//#############################################################################
function Tspamass.SPAMASSASSIN_LOCAL_CF():string;
begin
if FileExists('/etc/spamassassin/local.cf') then exit('/etc/spamassassin/local.cf');
if FileExists('/etc/mail/spamassassin/local.cf') then exit('/etc/mail/spamassassin/local.cf');
if FileExists('/opt/artica/etc/spamassassin/local.cf') then exit('/opt/artica/etc/spamassassin/local.cf');
end;
//##############################################################################
procedure Tspamass.RAZOR_INIT();
var razor_path:string;
begin
    if not FileExists(RAZOR_ADMIN_PATH()) then exit;
    logs.Debuglogs('RAZOR_INIT:: test -> ' + RAZOR_AGENT_CONF_PATH());
    razor_path:=ExtractFilePath(RAZOR_AGENT_CONF_PATH());
    if FIleExists(RAZOR_AGENT_CONF_PATH()) then begin
       RAZOR_SET_VALUE('razorhome',razor_path);
       exit;
    end;

    logs.OutputCmd(RAZOR_ADMIN_PATH() + ' -home=' + razor_path + ' -register >/dev/null 2>&1');
    logs.OutputCmd(RAZOR_ADMIN_PATH() + ' -home=' + razor_path + ' -create >/dev/null 2>&1');
    logs.OutputCmd(RAZOR_ADMIN_PATH() + ' -home=' + razor_path + ' -discover >/dev/null 2>&1');
end;
//##############################################################################
procedure Tspamass.RAZOR_SET_VALUE(key:string;value:string);
var
   l:Tstringlist;
   RegExpr:TRegExpr;
   f:boolean;
   i:integer;
begin
     f:=false;
     if not FileExists(RAZOR_AGENT_CONF_PATH()) then exit;
     RegExpr:=TRegExpr.Create;
     l:=Tstringlist.Create;
     l.LoadFromFile(RAZOR_AGENT_CONF_PATH());
     RegExpr.Expression:='^'+key;
     for i:=0 to l.Count-1 do begin
          if RegExpr.Exec(l.Strings[i]) then begin
            f:=True;
            l.Strings[i]:=key + chr(9) + '= ' + value;
            break;
          end;
     end;
     
     if not f then l.Add(key + chr(9) + '= ' + value);
     l.SaveToFile(RAZOR_AGENT_CONF_PATH());
     l.free;
     RegExpr.free;
end;
//##############################################################################

procedure Tspamass.SPAMASSASSIN_START();
 var
    count      :integer;
    D          :boolean;
    cmdline    :string;
    SYS        :TSystem;
    l:TstringList;
begin
     if not FileExists(SPAMASSASSIN_BIN_PATH()) then begin
        logs.DebugLogs('Starting......: spamassassin could not stat daemon bin path');
        exit;
     end;
     SPAMASSASSIN_ETC_DEFAULT();
     RAZOR_INIT();

     if SYS.PROCESS_EXIST(SPAMASSASSIN_PID()) then begin
        logs.DebugLogs('Starting......: spamassassin daemon is already running using PID ' + SPAMASSASSIN_PID() + '...');
        exit;
     end;

     if FileExists(SPAMASSASSIN_INITD()) then begin
        logs.OutputCmd(SPAMASSASSIN_INITD() + ' start');
        logs.DebugLogs('Starting......: spamassassin daemon....');
        while not SYS.PROCESS_EXIST(SPAMASSASSIN_PID()) do begin
              sleep(100);
              inc(count);
              if count>200 then begin
                 logs.DebugLogs('Starting......: spamassassin daemon. (failed!!!)');
                 exit;
              end;
        end;
        exit;
     end;


     count:=0;
     D:=COMMANDLINE_PARAMETERS('debug');
     cmdline:='/opt/artica/bin/spamd --username=spamd --max-children 10 ';
     cmdline:=cmdline +'--configpath=/opt/artica/etc/spamassassin ';
     cmdline:=cmdline +'--siteconfigpath=/opt/artica/etc/spamassassin/local.cf ';
     cmdline:=cmdline +'--pidfile /var/run/spamassassin/artica-spamd.pid ';
     cmdline:=cmdline +'--helper-home-dir=/opt/artica/spamassassin --listen-ip=127.0.0.1 --port=9031 --daemonize';
     if D then logs.Output(cmdline);

     l:=TstringList.Create;

l.Add('loadplugin Mail::SpamAssassin::Plugin::DCC');
l.Add('#loadplugin Mail::SpamAssassin::Plugin::Pyzor');
l.Add('loadplugin Mail::SpamAssassin::Plugin::Razor2');
l.Add('loadplugin Mail::SpamAssassin::Plugin::SpamCop');
l.Add('loadplugin Mail::SpamAssassin::Plugin::AntiVirus');
l.Add('loadplugin Mail::SpamAssassin::Plugin::AWL');
l.Add('loadplugin Mail::SpamAssassin::Plugin::AutoLearnThreshold');
l.Add('#loadplugin Mail::SpamAssassin::Plugin::TextCat');
l.Add('#loadplugin Mail::SpamAssassin::Plugin::AccessDB');
l.Add('loadplugin Mail::SpamAssassin::Plugin::WhiteListSubject');
l.Add('loadplugin Mail::SpamAssassin::Plugin::DomainKeys');
l.Add('loadplugin Mail::SpamAssassin::Plugin::MIMEHeader');
l.Add('loadplugin Mail::SpamAssassin::Plugin::ReplaceTags');
l.SaveToFile('/opt/artica/etc/spamassassin/v310.pre');
l.free;


     SYS:=TSystem.Create;
     if not SYS.IsUserExists('spamd') then begin
        logs.logs('SPAMASSASSIN_START:: Create spamd user');
        SYS.AddUserToGroup('spamd','spamd','','');
     end;

     forceDirectories('/var/run/spamassassin');
     logs.OutputCmd('/bin/chmod 755 /var/run/spamassassin');
     logs.OutputCmd('/bin/chown spamd:spamd /var/run/spamassassin');


     if not SYS.PROCESS_EXIST(SPAMASSASSIN_PID()) then begin

        if D then logs.Output('SPAMASSASSIN_START:: Start spamd "' + cmdline + '"');
        logs.OutputCmd(cmdline);
        while not SYS.PROCESS_EXIST(SPAMASSASSIN_PID()) do begin
              sleep(100);
              inc(count);
              if count>200 then begin
                 logs.DebugLogs('Starting......: spamassassin daemon. (failed!!!)');
                 exit;
              end;
        end;

      end else begin
        logs.DebugLogs('Starting......: spamassassin daemon is already running using PID ' + SPAMASSASSIN_PID() + '...');
           exit;
     end;

     logs.DebugLogs('Starting......: spamassassin daemon with new PID ' + SPAMASSASSIN_PID() + ' and listen 9031 port...');


end;
//##############################################################################
function Tspamass.SPAMASSASSIN_INITD():string;
begin
if FileExists('/etc/init.d/spamassassin') then exit('/etc/init.d/spamassassin');
end;
//##############################################################################
procedure Tspamass.SPAMASSASSIN_ETC_DEFAULT();
var
l:tstringlist;
begin
l:=TstringList.Create;
logs.Debuglogs('Writing /etc/default/spamassassin');

if FileExists('/etc/default/spamassassin') then begin
   forcedirectories('/etc/default');
   l.Add('# /etc/default/spamassassin');
   l.Add('# Duncan Findlay');
   l.Add('');
   l.Add('# WARNING: please read README.spamd before using.');
   l.Add('# There may be security risks.');
   l.Add('');
   l.Add('# Change to one to enable spamd');
   l.Add('ENABLED=1');
   l.Add('');
   l.Add('# Options');
   l.Add('# See man spamd for possible options. The -d option is automatically added.');
   l.Add('');
   l.Add('# SpamAssassin uses a preforking model, so be careful! You need to');
   l.Add('# make sure --max-children is not set to anything higher than 5,');
   l.Add('# unless you know what you''re doing.');
   l.Add('');
   l.Add('OPTIONS="--create-prefs --max-children 5 --helper-home-dir --listen-ip=127.0.0.1 --port=9031 --username=postfix --groupname=postfix"');
   l.Add('');
   l.Add('# Pid file');
   l.Add('# Where should spamd write its PID to file? If you use the -u or');
   l.Add('# --username option above, this needs to be writable by that user.');
   l.Add('# Otherwise, the init script will not be able to shut spamd down.');
   l.Add('PIDFILE="/var/run/spamd.pid"');
   l.Add('');
   l.Add('# Set nice level of spamd');
   l.Add('#NICE="--nicelevel 15"');
   l.Add('');
   l.Add('# Cronjob');
   l.Add('# Set to anything but 0 to enable the cron job to automatically update');
   l.Add('# spamassassin''s rules on a nightly basis');
   l.Add('CRON=1');
   l.SaveToFile('/etc/default/spamassassin');
end;
if FileExists('/etc/sysconfig/spamassassin') then begin
    l.Add('# Options to spamd');
    l.Add('# SPAMDOPTIONS="-d -c -m5 -H --listen-ip=127.0.0.1 --port=9031"');
    l.SaveToFile('/etc/sysconfig/spamassassin');
end;
l.free;
end;
//##############################################################################
procedure Tspamass.SPAMASSASSIN_STOP();
 var
    pid:string;
    count:integer;
begin
count:=0;
  if not FileExists(SPAMASSASSIN_BIN_PATH()) then exit;

  pid:=SPAMASSASSIN_PID();
  if SYS.PROCESS_EXIST(pid) then begin
   logs.Output('Stopping spamassassin........: ' + pid + ' PID');
   fpsystem('/bin/kill ' + pid + ' >/dev/null 2>&1');
   sleep(100);
  while SYS.PROCESS_EXIST(SPAMASSASSIN_PID()) do begin
        sleep(1000);
        inc(count);

        if count>50 then begin
           logs.Output('Stopping spamassassin........: ' + SPAMASSASSIN_PID() + ' PID (timeout) kill it');
           fpsystem('/bin/kill -9 ' + SPAMASSASSIN_PID() + ' >/dev/null 2>&1');
           break;
        end;
  end;
   exit;
  end;

  if not SYS.PROCESS_EXIST(SPAMASSASSIN_PID()) then begin
     logs.Output('Stopping spamassassin........: Already stopped');
  end;

  //
end;
//#############################################################################
function Tspamass.SPAMASSASSIN_PID():string;
begin
 if FIleExists('/var/run/spamd.pid') then exit(SYS.GET_PID_FROM_PATH('/var/run/spamd.pid'));
 if FIleExists('/var/run/spamassassin/artica-spamd.pid') then exit(SYS.GET_PID_FROM_PATH('/var/run/spamassassin/artica-spamd.pid'));
end;
//##############################################################################
FUNCTION Tspamass.SPAMASSASSIN_STATUS():string;
var
   ini:TstringList;
begin
   ini:=TstringList.Create;
   ini.Add('[SPAMASSASSIN]');
if FileExists(SPAMASSASSIN_BIN_PATH()) then  begin
      if SYS.PROCESS_EXIST(SPAMASSASSIN_PID()) then ini.Add('running=1') else  ini.Add('running=0');
      ini.Add('application_installed=1');
      ini.Add('master_pid='+ SPAMASSASSIN_PID());
      ini.Add('master_memory=' + IntToStr(SYS.PROCESS_MEMORY(SPAMASSASSIN_PID())));
      ini.Add('master_version=' + SPAMASSASSIN_VERSION());
      ini.Add('status='+SYS.PROCESS_STATUS(SPAMASSASSIN_PID()));
      ini.Add('service_name=APP_SPAMASSASSIN');
      ini.Add('pattern_version=' + SPAMASSASSIN_PATTERN_VERSION());
      ini.Add('service_cmd=spamd');
end else begin
    ini.Add('application_installed=0');

end;
result:=ini.Text;
ini.free
end;
//#########################################################################################
function Tspamass.SPAMASSASSIN_VERSION():string;
var
    RegExpr:TRegExpr;
    FileDatas:TStringList;
    i:integer;
begin
if not FileExists(SPAMASSASSIN_BIN_PATH()) then exit;
fpsystem(SPAMASSASSIN_BIN_PATH()+' -V >/opt/artica/logs/spamd.tmp');
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='Server version\s+([0-9\.]+)';
    FileDatas:=TStringList.Create;
    FileDatas.LoadFromFile('/opt/artica/logs/spamd.tmp');
    for i:=0 to FileDatas.Count-1 do begin
        if RegExpr.Exec(FileDatas.Strings[i]) then begin
             result:=RegExpr.Match[1];
             break;
        end;
    end;
             RegExpr.free;
             FileDatas.Free;

end;
//#############################################################################
function Tspamass.SPAMASSASSIN_PATTERN_VERSION():string;
var
    RegExpr:TRegExpr;
    FileDatas:TStringList;
    i:integer;
    Z:Tsystem;
    path:string;
begin
if not FileExists(SPAMASSASSIN_BIN_PATH()) then exit;
  Z:=TSystem.Create;
  FileDatas:=TStringList.Create;
  FileDatas.AddStrings(z.RecusiveListFiles('/opt/artica/spamassassin'));
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='updates_spamassassin_org\.cf';


    for i:=0 to FileDatas.Count-1 do begin
        if RegExpr.Exec(FileDatas.Strings[i]) then begin
             path:=FileDatas.Strings[i];
             break;
        end;
    end;

    RegExpr.Expression:='# UPDATE version ([0-9]+)';
   if FileExists(path) then begin
        FileDatas.LoadFromFile(path);
        for i:=0 to FileDatas.Count-1 do begin
        if RegExpr.Exec(FileDatas.Strings[i]) then begin
             result:=RegExpr.Match[1];
             break;
        end;
        end;

   end;


RegExpr.free;
FileDatas.Free;

end;
//#############################################################################
procedure Tspamass.CHANGE_INITD_MILTER();
var
l:TstringList;
begin
if not FileExists(MILTER_INITD_PATH()) then exit;
l:=TstringList.Create;
l.Add('#!/bin/sh');
l.Add('#Begin /etc/init.d/artica-postfix');
l.Add('case "$1" in');
l.Add(' start)');
l.Add('    /usr/share/artica-postfix/bin/artica-install start spamd $3');
l.Add('    ;;');
l.Add('');
l.Add('  stop)');
l.Add('    /usr/share/artica-postfix/bin/artica-install stop spamd $3');
l.Add('    ;;');
l.Add('');
l.Add(' restart)');
l.Add('     /usr/share/artica-postfix/bin/artica-install stop spamd $3');
l.Add('     sleep 3');
l.Add('     /usr/share/artica-postfix/bin/artica-install start spamd $3');
l.Add('    ;;');
l.Add('');
l.Add('  *)');
l.Add('    echo "Usage: $0 {start|stop|restart} (debug or --verbose for more infos)"');
l.Add('    exit 1');
l.Add('    ;;');
l.Add('esac');
l.Add('exit 0');
l.SaveToFile(MILTER_INITD_PATH());

end;
//#############################################################################


end.
