unit lighttpd;

{$MODE DELPHI}
{$LONGSTRINGS ON}

interface
                                                              
uses
    Classes, SysUtils,variants,strutils,IniFiles, Process,md5,logs,unix,RegExpr in 'RegExpr.pas',zsystem,awstats,mailmanctl,tcpip,openldap,Baseunix;

type
  TStringDynArray = array of string;

  type
  Tlighttpd=class


private
     LOGS:Tlogs;
     D:boolean;
     GLOBAL_INI:TiniFIle;
     SYS:TSystem;
     artica_path:string;
     awstats:tawstats;
     pid_root_path:string;
     mem_pid:string;
    procedure   LIGHTTPD_DEFAULT_CONF();
    procedure   LIGHTTPD_FIX_ERRORS();
    procedure   LIGHTTPD_DEFAULT_CONF_SAVE();
    function    APACHE_ARTICA_ENABLED():string;
    function    Explode(const Separator, S: string; Limit: Integer = 0):TStringDynArray;
    function    _IS_INCLUDE_EXISTS(include_value:string;needed:string):boolean;
    procedure   CHECK_SUBFOLDER();
    function    SET_PHP_CGI_BINPATH():boolean;
    function    ActiveIP():string;
    function    APACHE_ENABLED():string;
public
    procedure   Free;
    constructor Create(const zSYS:Tsystem);
    procedure   LIGHTTPD_START();
    function    LIGHTTPD_BIN_PATH():string;
    function    LIGHTTPD_INITD():string;
    function    LIGHTTPD_LOG_PATH():string;
    function    LIGHTTPD_SOCKET_PATH():string;
    function    LIGHTTPD_PID():string;
    function    LIGHTTPD_GET_USER():string;
    function    LIGHTTPD_CONF_PATH:string;
    procedure   LIGHTTPD_CERTIFICATE();
    function    LIGHTTPD_PID_PATH():string;
    procedure   LIGHTTPD_STOP();
    function    LIGHTTPD_VERSION():string;
    procedure   LIGHTTPD_ADD_INCLUDE_PATH();
    procedure   LIGHTTPD_VERIF_CONFIG();
    procedure   CLEAN_PHP5_SESSIONS();

    function    POMMO_ALIASES():string;
    function    POMMO_CONFIG():string;
    procedure   POMMO_TESTS_TABLES();
    function    POMMO_VERSION():string;


    procedure   PHP5_CHECK_EXTENSIONS();
    FUNCTION    STATUS():string;
    function    PHP5_CGI_BIN_PATH():string;
    function    CACHE_STATUS:string;
    function    LIGHTTPD_LISTEN_PORT():string;
    function    LIGHTTPD_CERTIFICATE_PATH():string;
    function    DEFAULT_CONF():string;
    procedure   CHANGE_INIT();
    function    IS_AUTH_LDAP():boolean;
    FUNCTION    IS_IPTABLES_INPUT_RULES():boolean;
    procedure   CreateWebFolders();
    function    MON():string;
    EnableLighttpd:integer;

END;

implementation

constructor tlighttpd.Create(const zSYS:Tsystem);
begin
       forcedirectories('/etc/artica-postfix');
       forcedirectories('/opt/artica/tmp');
       LOGS:=tlogs.Create();
       SYS:=zSYS;
       EnableLighttpd:=1;
       awstats:=tawstats.Create(SYS);

       if APACHE_ARTICA_ENABLED()='1' then EnableLighttpd:=0;


       if not DirectoryExists('/usr/share/artica-postfix') then begin
              artica_path:=ParamStr(0);
              artica_path:=ExtractFilePath(artica_path);
              artica_path:=AnsiReplaceText(artica_path,'/bin/','');

      end else begin
          artica_path:='/usr/share/artica-postfix';
      end;
end;
//##############################################################################
procedure tlighttpd.free();
begin
    logs.Free;
    SYS.Free;
end;
//##############################################################################
function Tlighttpd.LIGHTTPD_BIN_PATH():string;
begin
exit(SYS.LOCATE_LIGHTTPD_BIN_PATH());
end;
//##############################################################################
function Tlighttpd.PHP5_CGI_BIN_PATH():string;
begin
   if FileExists('/usr/bin/php-fcgi') then exit('/usr/bin/php-fcgi');
   if FileExists('/usr/bin/php-cgi') then exit('/usr/bin/php-cgi');
   if FileExists('/usr/local/bin/php-cgi') then exit('/usr/local/bin/php-cgi');
end;
//##############################################################################
function Tlighttpd.LIGHTTPD_INITD():string;
begin
    if FileExists('/etc/init.d/lighttpd') then exit('/etc/init.d/lighttpd');
    if FileExists('/usr/local/etc/rc.d/lighttpd') then exit('/usr/local/etc/rc.d/lighttpd');
    if FileExists('/etc/rc.d/lighttpd') then exit('/etc/rc.d/lighttpd');
end;

//##############################################################################
function Tlighttpd.LIGHTTPD_CONF_PATH:string;
begin
  if FileExists('/etc/lighttpd/lighttpd.conf') then exit('/etc/lighttpd/lighttpd.conf');
  if FileExists('/etc/lighttpd/lighttpd.conf') then exit('/etc/lighttpd/lighttpd.conf');
  if FileExists('/opt/artica/conf/lighttpd.conf') then exit('/opt/artica/conf/lighttpd.conf');
  if FileExists('/usr/local/etc/lighttpd.conf') then exit('/usr/local/etc/lighttpd.conf');
end;
//##############################################################################
function Tlighttpd.APACHE_ENABLED():string;
begin
if not FileExists(SYS.LOCATE_APACHE_BIN_PATH()) then exit('0');
if not FileExists(SYS.LOCATE_APACHE_LIBPHP5()) then exit('0');
if not FileExists(SYS.LOCATE_APACHE_MODSSLSO()) then exit('0');
if not FileExists(LIGHTTPD_BIN_PATH()) then exit('1');
result:=SYS.GET_INFO('ApacheArticaEnabled');
end;
//##############################################################################
procedure Tlighttpd.CLEAN_PHP5_SESSIONS();
var
   i:integer;
   php_path:string;
begin
 exit;
 php_path:=SYS.LOCATE_PHP5_SESSION_PATH();
 if not DirectoryExists(php_path) then exit;
      logs.Debuglogs('Starting lighttpd............: Cleaning php sessions');
      SYS.DirFiles(php_path,'sess_*');
      logs.Debuglogs('Starting lighttpd............: '+ INtTOstr(SYS.DirListFiles.Count)+' files to clean');
      for i:=0 to SYS.DirListFiles.Count-1 do begin
          logs.DeleteFile(php_path+'/'+SYS.DirListFiles.Strings[i]);
      end;



end;
//##############################################################################

function Tlighttpd.ActiveIP():string;
var
   ip:string;
   sip:ttcpip;
begin
    sip:=ttcpip.Create;
    ip:=sip.LOCAL_IP_FROM_NIC('eth0');
    if length(ip)>0 then begin
       result:=ip;
       exit;
    end;

    ip:=sip.LOCAL_IP_FROM_NIC('eth1');
    if length(ip)>0 then begin
       result:=ip;
       exit;
    end;

    ip:=sip.LOCAL_IP_FROM_NIC('eth2');
    if length(ip)>0 then begin
       result:=ip;
       exit;
    end;
end;
//##############################################################################

function Tlighttpd.LIGHTTPD_PID_PATH():string;
var
RegExpr:TRegExpr;
l:TStringList;
i:integer;
D:Boolean;
begin

if length(pid_root_path)>0 then exit(pid_root_path);

if not FileExists(LIGHTTPD_CONF_PATH()) then begin
   logs.Debuglogs('Tlighttpd.LIGHTTPD_PID_PATH:: unable to stat lighttpd.conf ' + LIGHTTPD_CONF_PATH());
   exit;
end;
l:=TstringList.Create;
l.LoadFromFile(LIGHTTPD_CONF_PATH());
RegExpr:=TRegExpr.Create;
RegExpr.Expression:='^server\.pid-file.+?"(.+?)"';
for i:=0 to l.Count-1 do begin
   if RegExpr.Exec(l.Strings[i]) then begin
    result:=RegExpr.Match[1];
    break;
   end;
end;
   pid_root_path:=result;
   l.Free;
   RegExpr.free;
end;
//##############################################################################
function Tlighttpd.LIGHTTPD_GET_USER():string;
var
     l:TstringList;
     RegExpr:TRegExpr;
     i:integer;
     user,group:string;
begin

  user:=SYS.GET_INFO('LighttpdUserAndGroup');
  logs.Debuglogs('LIGHTTPD_GET_USER: user="'+user+'" (LighttpdUserAndGroup)');
  if length(user)>0 then begin
     result:=user;
     exit(user);
  end;

  if not FileExists(LIGHTTPD_CONF_PATH()) then exit;
  l:=TstringList.Create;
  RegExpr:=TRegExpr.Create;
  l.LoadFromFile(LIGHTTPD_CONF_PATH());
  for i:=0 to l.Count-1 do begin
    RegExpr.Expression:='^server\.username.+?"(.+?)"';
    if RegExpr.Exec(l.Strings[i]) then user:=RegExpr.Match[1];
    RegExpr.Expression:='^server\.groupname.+?"(.+?)"';
    if RegExpr.Exec(l.Strings[i]) then group:=RegExpr.Match[1];
  end;
  if length(user)>0 then result:=user+':'+group;
  SYS.set_INFO('LighttpdUserAndGroup',result);
  RegExpr.free;
  l.free;
end;
//##############################################################################
procedure Tlighttpd.CreateWebFolders();
var
user:string;
begin
user:=LIGHTTPD_GET_USER();
forceDirectories('/opt/artica/share/www/jpegPhoto');
logs.OutputCmd('/bin/chown -R ' + user + ' /opt/artica/share/www/jpegPhoto');
logs.OutputCmd('/bin/chmod -R 777 /opt/artica/share/www/jpegPhoto');
end;
//##############################################################################
function Tlighttpd.CACHE_STATUS:string;
var
   sini:TiniFile;
   f:TstringList;
   run:string;
   cache:string;
begin

f:=TstringList.Create;
cache:='/etc/artica-postfix/cache.lighttpd.status';
f.Add(STATUS());
f.SaveToFile(cache);
f.free;
if not FileExists('/etc/artica-postfix/cache.global.status') then begin
   fpsystem(artica_path + '/bin/artica-install --status >/etc/artica-postfix/cache.global.status 2>&1');
end;

sini:=TiniFile.Create(cache);

run:=sini.ReadString('LIGHTTPD','running','0');

if run='1' then begin
   result:='Running...' + sini.ReadString('LIGHTTPD','master_memory','0') + ' kb mem';
end else begin
result:='Stopped...';

end;
sini.free;
end;
//##############################################################################
procedure Tlighttpd.LIGHTTPD_VERIF_CONFIG();
var
   user:string;
   group:string;
   logs_path:string;
   daemon:boolean;
   RegExpr:TRegExpr;
begin

    logs.Debuglogs('LIGHTTPD_VERIF_CONFIG():: Creating user www-data if does not exists');
    SYS.AddUserToGroup('www-data','www-data','','');
    CHANGE_INIT();
    logs.DeleteFile('/etc/artica-postfix/cache.global.status');

   logs_path:=LIGHTTPD_LOG_PATH();
   user:=LIGHTTPD_GET_USER();
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='(.+?):(.+)';
   if RegExpr.Exec(user) then begin
       user:=RegExpr.Match[1];
       group:=RegExpr.Match[2];
   end;
   if RegExpr.Exec(group) then group:=RegExpr.Match[1];
   forcedirectories('/opt/artica/ssl/certs');
   forcedirectories('/var/lib/php/session');
   logs.OutputCmd('/bin/chown -R '+user+':'+group+' /var/lib/php/session');
   logs.OutputCmd('/bin/chown -R '+user+':'+group+' /var/run/lighttpd');

   logs.OutputCmd('/bin/chmod 755 /var/lib/php/session');
   LIGHTTPD_DEFAULT_CONF();
   LIGHTTPD_ADD_INCLUDE_PATH();
   PHP5_CHECK_EXTENSIONS();
   CHECK_SUBFOLDER();
   if not FileExists(LIGHTTPD_CERTIFICATE_PATH()) then begin
      logs.Debuglogs('LIGHTTPD_VERIF_CONFIG() -> LIGHTTPD_CERTIFICATE()');
      LIGHTTPD_CERTIFICATE();
   end;

          if not SET_PHP_CGI_BINPATH() then begin
             logs.Syslogs('Starting lighttpd............:  fatal error while setting lighttpd.conf');
             exit;
          end;

          POMMO_ALIASES();
          POMMO_CONFIG();
          forcedirectories('/var/run/lighttpd');
          forcedirectories(logs_path);
          logs.OutputCmd('/bin/chown -R '+user+':'+group+' /var/run/lighttpd');
          logs.OutputCmd('/bin/chown -R '+user+':'+group+' '+ logs_path);

end;

//##############################################################################
procedure Tlighttpd.LIGHTTPD_START();
var
   cmdline:string;
   count:integer;
   pid:string;
   user:string;
   group:string;
   logs_path:string;
   daemon:boolean;
   RegExpr:TRegExpr;
begin
   daemon:=LOGS.COMMANDLINE_PARAMETERS('--daemon');

logs.Debuglogs('###################### LIGHTTPD #####################');
   count:=0;
   if not FileExists(LIGHTTPD_BIN_PATH()) then begin
       logs.Debuglogs('LIGHTTPD_START():: it seems that lighttpd is not installed... Aborting');
       exit;
   end;

   if not FileExists('/etc/lighttpd/lighttpd.conf') then DEFAULT_CONF();

   pid:=LIGHTTPD_PID();
   if pid='0' then pid:=SYS.PROCESS_LIST_PID(LIGHTTPD_BIN_PATH());

   if SYS.PROCESS_EXIST(pid) then begin
      logs.Debuglogs('Starting......: lighttpd daemon is already running using PID ' + LIGHTTPD_PID() + '...');
      logs.Debuglogs('LIGHTTPD_START():: lighttpd already running with PID number ' + pid);
      exit();
   end;


   logs.Debuglogs('Starting lighttpd............: lighttpd launching process1 for writing settings');
   fpsystem('/usr/share/artica-postfix/bin/process1 --force &');



   logs_path:=LIGHTTPD_LOG_PATH();
   user:=LIGHTTPD_GET_USER();
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='(.+?):(.+)';
   if RegExpr.Exec(user) then begin
       user:=RegExpr.Match[1];
       group:=RegExpr.Match[2];
   end;
   if RegExpr.Exec(group) then group:=RegExpr.Match[1];
   CLEAN_PHP5_SESSIONS();
   ForceDirectories('/usr/share/artica-postfix/ressources/sessions');
   fpsystem('/bin/chmod 755 /usr/share/artica-postfix/ressources/sessions');



   if FileExists(LIGHTTPD_INITD()) then begin
       if not SYS.PROCESS_EXIST(pid) then begin
          LIGHTTPD_VERIF_CONFIG();
          logs.Debuglogs('Starting lighttpd............: user.........:'+user);
          logs.Debuglogs('Starting lighttpd............: group........:'+group);
          logs.Debuglogs('Starting lighttpd............: pid..........:'+pid);
          logs.Debuglogs('Starting lighttpd............: Port.........:' + LIGHTTPD_LISTEN_PORT());
          logs.Debuglogs('Starting lighttpd............: logs path....:'+LIGHTTPD_LOG_PATH());
          logs.Debuglogs('Starting lighttpd............: Socket path..:'+LIGHTTPD_SOCKET_PATH());
          logs.Debuglogs('Starting lighttpd............: php5-cgi path:'+PHP5_CGI_BIN_PATH());
          logs.Debuglogs('Starting lighttpd............: php client...:' + SYS.LOCATE_PHP5_BIN());
          logs.Debuglogs('Starting lighttpd............: certificate..:'+LIGHTTPD_CERTIFICATE_PATH());
          logs.Debuglogs('Starting lighttpd............: php ext dir..:' + SYS.LOCATE_PHP5_EXTENSION_DIR());
          logs.Debuglogs('Starting lighttpd............: php ext conf.:' + SYS.LOCATE_PHP5_EXTCONF_DIR());
          logs.Debuglogs('Starting lighttpd............: php session.:' + SYS.LOCATE_PHP5_SESSION_PATH());

          if IS_IPTABLES_INPUT_RULES() then begin
              logs.Debuglogs('Starting lighttpd............: this just an information that you have some');
              logs.Debuglogs('Starting lighttpd............: Firewall rules activated (iptables)');
              logs.Debuglogs('Starting lighttpd............: If you want to access to web page');
              logs.Debuglogs('Starting lighttpd............: Be sure that you have enabled '+LIGHTTPD_LISTEN_PORT() + ' port');
              logs.Debuglogs('Starting lighttpd............: In your firwall....');
          end;


          logs.OutputCmd(LIGHTTPD_BIN_PATH()+ ' -f /etc/lighttpd/lighttpd.conf');

       end else begin
          if daemon then writeln('Starting......: lighttpd daemon is already running using PID ' + LIGHTTPD_PID() + '...');
          logs.DebugLogs('Starting......: lighttpd daemon is already running using PID ' + LIGHTTPD_PID() + '...');
       end;



   if not SYS.PROCESS_EXIST(LIGHTTPD_PID()) then begin
      logs.Debuglogs('Starting lighttpd............: Failed');
      end else begin
      logs.Debuglogs('Starting lighttpd............: Success (PID ' + LIGHTTPD_PID() + ')');
      end;
   end;
end;
//##############################################################################
function Tlighttpd.MON():string;
var
l:TstringList;
begin
l:=TstringList.Create;
l.ADD('check process '+ExtractFileName(LIGHTTPD_BIN_PATH())+' with pidfile '+LIGHTTPD_PID_PATH());
l.ADD('group lighttpd');
l.ADD('start program = "/etc/init.d/artica-postfix start apache"');
l.ADD('stop program = "/etc/init.d/artica-postfix stop apache"');
l.ADD('if 5 restarts within 5 cycles then timeout');
result:=l.Text;
l.free;
end;
//##############################################################################


procedure Tlighttpd.LIGHTTPD_STOP();
 var
    count      :integer;
begin

     count:=0;

     logs.DeleteFile('/etc/artica-postfix/cache.global.status');
     if SYS.PROCESS_EXIST(LIGHTTPD_PID()) then begin
        writeln('Stopping lighttpd............: ' + LIGHTTPD_PID() + ' PID..');
        logs.OutputCmd('/bin/kill ' + LIGHTTPD_PID());
        LIGHTTPD_VERIF_CONFIG();
        while SYS.PROCESS_EXIST(LIGHTTPD_PID()) do begin
              sleep(100);
              inc(count);
              if count>100 then begin
                 writeln('Stopping lighttpd............: Failed force kill');
                 logs.OutputCmd('/bin/kill -9 '+LIGHTTPD_PID());
                 exit;
              end;
        end;

      end else begin
        LIGHTTPD_VERIF_CONFIG();
        writeln('Stopping lighttpd............: Already stopped');
     end;

end;
//##############################################################################
procedure Tlighttpd.CHANGE_INIT();
var
l:TstringList;
begin
l:=TstringList.Create;
if not fileExists(LIGHTTPD_INITD()) then exit;
l.Add('#!/bin/sh');
l.Add('### BEGIN INIT INFO');
l.Add('# Provides:          lighttpd');
l.Add('# Required-Start:    networking');
l.Add('# Required-Stop:     networking');
l.Add('# Default-Start:     2 3 4 5');
l.Add('# Default-Stop:      0 1 6');
l.Add('# Short-Description: Start the lighttpd web server.');
l.Add('### END INIT INFO');
l.Add('');
l.Add('');
l.Add('DAEMON_OPTS="-f /etc/lighttpd/lighttpd.conf"');
l.Add('');
l.Add('');
l.Add('case "$1" in');
l.Add('  start)');
l.Add('	/etc/init.d/artica-postfix start apache --daemon');
l.Add('    ;;');
l.Add('  stop)');
l.Add('	/etc/init.d/artica-postfix stop apache --daemon');
l.Add('	;;');
l.Add('  reload)');
l.Add('	/etc/init.d/artica-postfix stop apache --daemon');
l.Add('	/etc/init.d/artica-postfix start apache --daemon');
l.Add('  ;;');
l.Add('  restart|force-reload)');
l.Add('	/etc/init.d/artica-postfix stop apache --daemon');
l.Add('	/etc/init.d/artica-postfix start apache --daemon');
l.Add('	;;');
l.Add('  *)');
l.Add('	echo "Usage: {start|stop|restart|reload|force-reload}" >&2');
l.Add('	exit 1');
l.Add('	;;');
l.Add('esac');
l.Add('');
l.Add('exit 0');
l.SaveToFile(LIGHTTPD_INITD());
end;
//##############################################################################
FUNCTION Tlighttpd.IS_IPTABLES_INPUT_RULES():boolean;
var
   tmpstr:string;
     l:TstringList;
     RegExpr:TRegExpr;
     i:integer;
begin
    result:=false;
    if not FileExists(SYS.LOCATE_IPTABLES()) then begin
         logs.Debuglogs('Starting lighttpd............: IpTables is not installed');
         exit;
    end;
tmpstr:=LOGS.FILE_TEMP();
fpsystem(SYS.LOCATE_IPTABLES() + ' -L INPUT >'+tmpstr+' 2>&1');
if not FileExists(tmpstr) then exit;
l:=TstringList.Create;
l.LoadFromFile(tmpstr);
logs.DeleteFile(tmpstr);
RegExpr:=TRegExpr.Create;
RegExpr.Expression:='^REJECT\s+';
for i:=0 to l.Count-1 do begin
   if RegExpr.Exec(l.Strings[i]) then begin
      result:=true;
      break;
   end;
end;
RegExpr.free;
l.free;
end;
//##############################################################################
FUNCTION Tlighttpd.STATUS():string;
var
   ini:TstringList;
begin

ini:=TstringList.Create;
  ini.Add('[LIGHTTPD]');
  logs.Debuglogs('STATUS() invoke lighttpd status');

   if SYS.PROCESS_EXIST(LIGHTTPD_PID()) then ini.Add('running=1') else  ini.Add('running=0');
  if FileExists(LIGHTTPD_BIN_PATH()) then begin
     ini.Add('application_installed=1')
  end else begin
      ini.Add('application_installed=0');
  end;

  if EnableLighttpd=1 then begin
       ini.Add('service_disabled=0');
  end else begin
       ini.Add('service_disabled=1');
  end;
      ini.Add('master_pid='+LIGHTTPD_PID());
      ini.Add('master_memory=' + IntToStr(SYS.PROCESS_MEMORY(LIGHTTPD_PID())));
      ini.Add('master_version=' + LIGHTTPD_VERSION());
      ini.Add('status='+SYS.PROCESS_STATUS(LIGHTTPD_PID()));
      ini.Add('service_name=APP_LIGHTTPD');
      ini.Add('service_cmd=apache');

result:=ini.Text;
ini.free
end;
//#########################################################################################
procedure Tlighttpd.LIGHTTPD_CERTIFICATE();
var
   cmd:string;
   openssl_path:string;
   CertificateMaxDays:string;
begin
openssl_path:=SYS.LOCATE_OPENSSL_TOOL_PATH();
SYS.OPENSSL_CERTIFCATE_CONFIG();

    CertificateMaxDays:=SYS.GET_INFO('CertificateMaxDays');
    if length(CertificateMaxDays)=0 then CertificateMaxDays:='730';

if Not FileExists('/etc/artica-postfix/ssl.certificate.conf') then begin
   logs.Debuglogs('LIGHTTPD_CERTIFICATE():: unable to stat /etc/artica-postfix/ssl.certificate.conf');
   logs.Debuglogs('Starting lighttpd............: unable to stat default certificate infos');
   exit;
end;
logs.Debuglogs('starting lighttpd............: Creating certificate using /etc/artica-postfix/ssl.certificate.conf');
forcedirectories('/opt/artica/ssl/certs');
cmd:=openssl_path+' req -new -passin pass:artica -x509 -batch -config /etc/artica-postfix/ssl.certificate.conf -keyout /opt/artica/ssl/certs/lighttpd.pem -out /opt/artica/ssl/certs/lighttpd.pem -days '+CertificateMaxDays+' -nodes';
logs.OutputCmd(cmd);



end;

//#########################################################################################
function Tlighttpd.LIGHTTPD_VERSION():string;
var
     l:TstringList;
     RegExpr:TRegExpr;
     i:integer;
     tmpstr:string;
begin
    if not FileExists(LIGHTTPD_BIN_PATH()) then exit;

    result:=SYS.GET_CACHE_VERSION('APP_LIGHTTPD');
    if length(result)>0 then exit;
    tmpstr:=logs.FILE_TEMP();

    fpsystem(LIGHTTPD_BIN_PATH()+' -v >'+tmpstr+' 2>&1');
    if not FileExists(tmpstr) then exit;
    l:=TStringList.Create;
    l.LoadFromFile(tmpstr);
    logs.DeleteFile(tmpstr);
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='lighttpd-([0-9\.]+)';
    For i:=0 to l.Count-1 do begin
        if RegExpr.Exec(l.Strings[i]) then begin
            result:=RegExpr.Match[1];
            logs.Debuglogs('LIGHTTPD_VERSION:: ' + result);
        end;
    end;

    SYS.SET_CACHE_VERSION('APP_LIGHTTPD',result);

    l.free;
    RegExpr.Free;
end;
//##############################################################################


function Tlighttpd.LIGHTTPD_LOG_PATH():string;
var
RegExpr:TRegExpr;
l:TStringList;
i:integer;
begin


if not FileExists(LIGHTTPD_CONF_PATH()) then begin
   logs.Debuglogs('LIGHTTPD_LOG_PATH:: unable to stat lighttpd.conf');
   exit;
end;
l:=TstringList.Create;
l.LoadFromFile(LIGHTTPD_CONF_PATH());
RegExpr:=TRegExpr.Create;
RegExpr.Expression:='^server\.errorlog.+?"(.+?)"';

for i:=0 to l.Count-1 do begin
   if RegExpr.Exec(l.Strings[i]) then begin
    result:=RegExpr.Match[1];
    break;
   end;
end;

   result:=ExtractFilePath(result);
   if Copy(result,length(result),1)='/' then result:=Copy(result,1,length(result)-1);
   l.Free;
   RegExpr.free;

end;
//##############################################################################
function Tlighttpd.LIGHTTPD_CERTIFICATE_PATH():string;
var
RegExpr:TRegExpr;
l:TStringList;
i:integer;
begin


if not FileExists(LIGHTTPD_CONF_PATH()) then begin
   logs.Debuglogs('LIGHTTPD_LOG_PATH:: unable to stat lighttpd.conf');
   exit;
end;
l:=TstringList.Create;
l.LoadFromFile(LIGHTTPD_CONF_PATH());
RegExpr:=TRegExpr.Create;
RegExpr.Expression:='^ssl\.pemfile.+?"(.+?)"';

for i:=0 to l.Count-1 do begin
   if RegExpr.Exec(l.Strings[i]) then begin
    result:=RegExpr.Match[1];
    break;
   end;
end;
end;
//##############################################################################


function Tlighttpd.LIGHTTPD_LISTEN_PORT():string;
var
RegExpr:TRegExpr;
l:TStringList;
i:integer;
begin
if not FileExists(LIGHTTPD_CONF_PATH()) then begin
   logs.logs('LIGHTTPD_LISTEN_PORT:: unable to stat lighttpd.conf');
   exit;
end;
l:=TstringList.Create;
l.LoadFromFile(LIGHTTPD_CONF_PATH());
RegExpr:=TRegExpr.Create;
RegExpr.Expression:='^server\.port.+?=.+?([0-9]+)';
for i:=0 to l.Count-1 do begin

   if RegExpr.Exec(l.Strings[i]) then begin
   result:=RegExpr.Match[1];
   break;
   end;
end;

   RegExpr.Free;
   l.free;

end;
//##############################################################################


procedure Tlighttpd.LIGHTTPD_DEFAULT_CONF();
var
RegExpr:TRegExpr;
l:TStringList;
i:integer;
document:string;
socket_path:string;
session_path:string;
username:string;
group:string;
user:string;
begin
RegExpr:=TRegExpr.Create;
user:=LIGHTTPD_GET_USER();
if length(user)=0 then user:=SYS.GET_INFO('LighttpdUserAndGroup');
if length(user)=0 then begin
   user:='www-data:www-data';
   SYS.set_INFO('LighttpdUserAndGroup',user);
end;
RegExpr.Expression:='(.+?):(.+)';
RegExpr.Exec(user);
username:=trim(RegExpr.Match[1]);
group:=trim(RegExpr.Match[2]);
if RegExpr.Exec(group) then group:=RegExpr.Match[1];

user:=username+':'+group;


if not FileExists(LIGHTTPD_CONF_PATH()) then begin
   logs.Syslogs('LIGHTTPD_DEFAULT_CONF:: unable to stat Tlighttpd.conf');
   exit;
end;

if not FileExists(PHP5_CGI_BIN_PATH()) then begin
   logs.Debuglogs('LIGHTTPD_DEFAULT_CONF:: unable to stat php-cgi');
   exit;
end;
session_path:=SYS.LOCATE_PHP5_SESSION_PATH();
if length(session_path)>3 then begin
   forceDirectories(session_path);
   logs.OutputCmd('/bin/chmod -R 755 ' + session_path);
   logs.OutputCmd('/bin/chown -R '+user+' '+ session_path);
end;


logs.OutputCmd('/bin/chmod -R 755 ' + LIGHTTPD_LOG_PATH());
logs.OutputCmd('/bin/chown -R '+user+' ' + LIGHTTPD_LOG_PATH());

socket_path:=LIGHTTPD_SOCKET_PATH();
if length(socket_path)>0 then begin
   forcedirectories(socket_path);
   fpsystem('/bin/chmod -R 755 ' + socket_path);
   fpsystem('/bin/chown -R '+user+' ' + socket_path);
end;

l:=TstringList.Create;
l.LoadFromFile(LIGHTTPD_CONF_PATH());

RegExpr.Expression:='^server\.document-root.+?"(.+?)"';
for i:=0 to l.Count-1 do begin
   if RegExpr.Exec(l.Strings[i]) then begin
    document:=RegExpr.Match[1];
    break;
   end;
end;


for i:=0 to l.Count-1 do begin
   RegExpr.Expression:='^server\.username.+?"(.+?)"';
   if RegExpr.Exec(l.Strings[i]) then begin
    l.Strings[i]:='server.username = "'+username+'"';
   end;

   RegExpr.Expression:='^server\.groupname.+?"(.+?)"';
   if RegExpr.Exec(l.Strings[i]) then begin
    l.Strings[i]:='server.groupname = "'+group+'"';
   end;
end;




   l.SaveToFile(LIGHTTPD_CONF_PATH());


RegExpr.free;
l.free;

if document='/usr/share/artica-postfix' then begin
   exit;
end;

   logs.logs('LIGHTTPD_DEFAULT_CONF:: Must be change ->' + document );
   LIGHTTPD_DEFAULT_CONF_SAVE();




end;
//##############################################################################
function Tlighttpd.POMMO_ALIASES():string;
var
RegExpr:TRegExpr;
l:TStringList;
f:boolean;
user:string;
i:integer;
version:string;
begin

if not DirectoryExists('/usr/share/pommo') then begin
      Logs.Debuglogs('Starting lighttpd............: PoMMo is not installed, skipping aliases');
      exit;
end;

if not FileExists(LIGHTTPD_CONF_PATH()) then begin
   logs.Syslogs('POMMO_ALIASES:: unable to stat lighttpd.conf');
   exit;
end;

user:=LIGHTTPD_GET_USER();
logs.OutputCmd('/bin/chown -R '+user+' /usr/share/pommo');
logs.OutputCmd('/bin/chmod 755 /usr/share/pommo');
  version :=POMMO_VERSION();
RegExpr:=TRegExpr.Create;
f:=false;
RegExpr.Expression:='^alias\.url.+?\/usr\/share\/pommo';
l:=TstringList.Create;
l.LoadFromFile(LIGHTTPD_CONF_PATH());
For i:=0 to l.Count-1 do begin
   if RegExpr.Exec(l.Strings[i]) then begin
      f:=true;
      break;
   end;
end;

if not f then begin
   Logs.Debuglogs('Starting lighttpd............: PoMMo '+version+' is installed, adding aliases');
   l.Add('alias.url +=("/mailing"  => "/usr/share/pommo/")');
   try
      l.SaveToFile(LIGHTTPD_CONF_PATH());
   except
      Logs.Syslogs('Starting lighttpd............: PoMMo FATAL ERROR !');
      exit;
   end;
end else begin
   Logs.Debuglogs('Starting lighttpd............: PoMMo '+version+' is installed, aliases already added');
end;

 l.free;
 RegExpr.Free;

end;
//##############################################################################
function Tlighttpd.POMMO_CONFIG():string;
var
l:TstringList;
root,password,port,server,activetcp,version:string;
PommoFieldlang:string;
PommoFieldhostname:string;

begin
  if not DirectoryExists('/usr/share/pommo') then exit;
  activetcp:=ActiveIP();
  root    :=SYS.MYSQL_INFOS('database_admin');
  password:=SYS.MYSQL_INFOS('database_password');
  port    :=SYS.MYSQL_INFOS('port');
  server  :=SYS.MYSQL_INFOS('mysql_server');

l:=TstringList.Create;
l.Add('[db_hostname] = '+server+':'+port);
l.Add('[db_username] = '+root);
l.Add('[db_password] = '+password);
l.Add('[db_database] = pommo');
l.Add('[db_prefix] = pommo_');

PommoFieldlang:=SYS.GET_INFO('PommoFieldlang');
if length(PommoFieldlang)=0 then PommoFieldlang:='en';
PommoFieldhostname:=SYS.GET_INFO('PommoFieldhostname');
if length(trim(PommoFieldhostname))=0 then begin
   PommoFieldhostname:=activetcp;
   SYS.set_INFO('PommoFieldhostname',PommoFieldhostname);
end;



l.Add('[lang] = '+PommoFieldlang);
l.Add('[debug] = off');
l.Add('[verbosity] = 3');
l.Add('[date_format] = 3');
l.Add('[workDir] = "/usr/share/pommo/cache"');
l.Add('[baseURL] = "/mailing/"');
l.Add('[hostname] ='+PommoFieldhostname);
l.Add('[hostport] = '+LIGHTTPD_LISTEN_PORT());
//l.Add('[subscriber_default_sort] = email

if not logs.IF_DATABASE_EXISTS('pommo') then begin
   if logs.Connect() then begin
       logs.Debuglogs('Starting lighttpd............: PoMMo Create database...');
       logs.QUERY_SQL(pChar('CREATE DATABASE pommo;'),'');
       logs.Disconnect();
   end;
end;

//

try
   l.SaveToFile('/usr/share/pommo/config.php');
except
    Logs.Syslogs('Starting lighttpd............: PoMMo FATAL ERROR /usr/share/pommo/config.php !');
end;
l.free;
Logs.Debuglogs('Starting lighttpd............: PoMMo overwrite config done..');
POMMO_TESTS_TABLES();
end;
//##############################################################################
function Tlighttpd.POMMO_VERSION():string;
var
l:TstringList;
i:integer;
RegExpr:TRegExpr;

begin
  if not FileExists('/usr/share/pommo/docs/RELEASE') then exit;

result:=SYS.GET_CACHE_VERSION('APP_POMMO');
if length(result)>0 then exit;

  l:=TstringList.Create;
  l.LoadFromFile('/usr/share/pommo/docs/RELEASE');
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='poMMo\s+Aardvark.+?([0-9\.]+)';

for i:=0 to l.Count-1 do begin
   if RegExpr.Exec(l.Strings[i]) then begin
      result:=RegExpr.Match[1];
      break;
   end;
end;
 RegExpr.free;
 l.free;
 SYS.SET_CACHE_VERSION('APP_AMAVIS_STAT',result);

end;
//##############################################################################

procedure Tlighttpd.POMMO_TESTS_TABLES();
var
l:TstringList;
i:integer;
B:boolean;
script_file:string;
ldap:topenldap;
sql:string;
begin

ldap:=topenldap.Create;



script_file:=artica_path+'/bin/install/pommo-mysql-database.sql';
if not FileExists(script_file) then begin
    Logs.Syslogs('Starting lighttpd............: PoMMo FATAL error, could not stat '+script_file);
    exit;
end;


B:=true;
l:=TstringList.Create;
l.Add('pommo_config');
l.Add('pommo_fields');
l.Add('pommo_groups');
l.Add('pommo_group_rules');
l.Add('pommo_mailings');
l.Add('pommo_mailing_current');
l.Add('pommo_mailing_notices');
l.Add('pommo_queue');
l.Add('pommo_scratch');
l.Add('pommo_subscribers');
l.Add('pommo_subscriber_data');
l.Add('pommo_subscriber_pending');
l.Add('pommo_templates');
l.Add('pommo_updates');

for i:=0 to l.Count-1 do begin
   if not logs.IF_TABLE_EXISTS(l.Strings[i],'pommo') then begin
      B:=False;
      break;
   end;
end;


if not B then begin
    logs.EXECUTE_SQL_FILE(script_file,'pommo');
    sql:='UPDATE pommo_config SET config_value ="'+ldap.get_LDAP('admin')+'" WHERE config_name="admin_username"';
    logs.QUERY_SQL(pChar(sql),'pommo');
    sql:='UPDATE pommo_config SET config_value ="'+logs.MD5FromString(ldap.get_LDAP('password'))+'" WHERE config_name="admin_password"';
    logs.QUERY_SQL(pChar(sql),'pommo');
    Logs.Debuglogs('Starting lighttpd............: PoMMo creating tables and default values done...');
end;

end;
//##############################################################################



function Tlighttpd.LIGHTTPD_PID():string;
begin

if length(mem_pid)>0 then exit(mem_pid);

if not FileExists(LIGHTTPD_PID_PATH()) then begin
   result:=SYS.PidByProcessPath(LIGHTTPD_BIN_PATH() + ' -f /etc/lighttpd/lighttpd.conf');
   mem_pid:=result;
   exit;
end;

result:=SYS.GET_PID_FROM_PATH(LIGHTTPD_PID_PATH());
result:=trim(result);
if result='0' then result:='';

if length(trim(result))<2 then  begin
   logs.Debuglogs('LIGHTTPD_PID:: unable to read '+LIGHTTPD_PID_PATH());
   result:=SYS.PidByProcessPath(LIGHTTPD_BIN_PATH() + ' -f /etc/lighttpd/lighttpd.conf');
   mem_pid:=result;
   exit;
end;
end;
//##############################################################################
function Tlighttpd.IS_AUTH_LDAP():boolean;
var

RegExpr:TRegExpr;
l:TStringList;
i:integer;

begin

if not FileExists(LIGHTTPD_CONF_PATH()) then begin
   logs.Debuglogs('LIGHTTPD_SOCKET_PATH:: unable to stat lighttpd.conf');
   exit;
end;
result:=false;
l:=TstringList.Create;
l.LoadFromFile(LIGHTTPD_CONF_PATH());
RegExpr:=TRegExpr.Create;
RegExpr.Expression:='auth.backend[\s+=]+"(.+?)"';

for i:=0 to l.Count-1 do begin
   if RegExpr.Exec(l.Strings[i]) then begin
    result:=true;
    break;
   end;
end;
   l.Free;
   RegExpr.free;

end;
//##############################################################################




function Tlighttpd.LIGHTTPD_SOCKET_PATH():string;
var

RegExpr:TRegExpr;
l:TStringList;
i:integer;

begin

if not FileExists(LIGHTTPD_CONF_PATH()) then begin
   logs.Debuglogs('LIGHTTPD_SOCKET_PATH:: unable to stat lighttpd.conf');
   exit;
end;
l:=TstringList.Create;
l.LoadFromFile(LIGHTTPD_CONF_PATH());
RegExpr:=TRegExpr.Create;
RegExpr.Expression:='\s+"socket".+?"(.+?)"';
for i:=0 to l.Count-1 do begin
   if RegExpr.Exec(l.Strings[i]) then begin
    result:=RegExpr.Match[1];
    break;
   end;
end;
   result:=ExtractFilePath(result);
   if Copy(result,length(result),1)='/' then result:=Copy(result,1,length(result)-1);
   l.Free;
   RegExpr.free;

end;
//##############################################################################
procedure Tlighttpd.LIGHTTPD_ADD_INCLUDE_PATH();
var
   php:TiniFile;
   l  :TstringList;
   t  :Tstringlist;
   obm_share:string;
   original_include:string;
   new_include:string;
   i,a:integer;
   open_basedir:string;
   dirs:TStringDynArray;
   open_basedirt:boolean;
begin
  logs.Debuglogs('Starting lighttpd............: registers key in php.ini files');
  forceDirectories('/var/lib/php5');
  l:=Tstringlist.Create;
l.Add('[PHP]');
l.Add('engine = On');
l.Add('precision    =  12');
l.Add('y2k_compliance = On');
l.Add('output_buffering = On');
l.Add('serialize_precision = 100');
l.Add('disable_functions =');
l.Add('disable_classes =');
l.Add('expose_php = Off');
l.Add('max_execution_time = 3600');
l.Add('max_input_time = 3600');
l.Add('memory_limit = 128M');
l.Add('error_reporting  =  E_ALL & ~E_NOTICE');
l.Add('display_errors = Off');
l.Add('display_startup_errors = Off');
l.Add('log_errors = On');
l.Add('log_errors_max_len = 1024');
l.Add('ignore_repeated_errors = Off');
l.Add('ignore_repeated_source = Off');
l.Add('report_memleaks = On');
l.Add('track_errors = Off');
l.Add('error_prepend_string = "<font color=ff0000><code style=''font-size:12px''>"');
l.Add('error_append_string = "</code></font><br>"');
l.Add('error_log = syslog');
l.Add('variables_order = "EGPCS"');
l.Add('register_argc_argv = On');
l.Add('auto_globals_jit = On');
l.Add('post_max_size = 20M');
l.Add('auto_prepend_file =');
l.Add('auto_append_file =');
l.Add('default_mimetype = "text/html"');
l.Add('default_charset = "iso-8859-1"');
l.Add('unicode.semantics = off');
l.Add('unicode.runtime_encoding = iso-8859-1');
l.Add('unicode.script_encoding = utf-8');
l.Add('unicode.output_encoding = utf-8');
l.Add('unicode.from_error_mode = U_INVALID_SUBSTITUTE');
l.Add('unicode.from_error_subst_char = 3f');
l.Add('include_path = ".:/usr/share/php:/usr/share/obm:/usr/share/php5:/usr/share/obm2"');
l.Add('doc_root =');
l.Add('user_dir =');
l.Add('extension_dir = "./"');
l.Add('cgi.force_redirect = 1');
l.Add('cgi.fix_pathinfo = 1');
l.Add('file_uploads = On');
l.Add('upload_tmp_dir =');
l.Add('upload_max_filesize = 40M');
l.Add('allow_url_fopen = On');
l.Add('allow_url_include = Off');
l.Add('from="anonymous@anonymous.com"');
l.Add('default_socket_timeout = 60');
l.Add('');
l.Add('[Date]');
l.Add('[filter]');
l.Add('[iconv]');
l.Add('iconv.input_encoding = ISO-8859-1');
l.Add('iconv.internal_encoding = ISO-8859-1');
l.Add('iconv.output_encoding = ISO-8859-1');
l.Add('[Syslog]');
l.Add('define_syslog_variables  = Off');
l.Add('');
l.Add('[mail function]');
l.Add('[SQL]');
l.Add('sql.safe_mode = Off');
l.Add('');
l.Add('[ODBC]');
l.Add('odbc.allow_persistent = On');
l.Add('odbc.check_persistent = On');
l.Add('odbc.max_persistent = -1');
l.Add('odbc.max_links = -1');
l.Add('odbc.defaultlrl = 4096');
l.Add('odbc.defaultbinmode = 1');
l.Add('');
l.Add('[MySQL]');
l.Add('mysql.allow_persistent = On');
l.Add('mysql.max_persistent = -1');
l.Add('mysql.max_links = -1');
l.Add('mysql.default_port =');
l.Add('mysql.default_socket =');
l.Add('mysql.default_host =');
l.Add('mysql.default_user =');
l.Add('mysql.default_password =');
l.Add('mysql.connect_timeout = 60');
l.Add('mysql.trace_mode = Off');
l.Add('');
l.Add('[MySQLi]');
l.Add('mysqli.max_links = -1');
l.Add('mysqli.default_port = 3306');
l.Add('mysqli.default_socket =');
l.Add('mysqli.default_host =');
l.Add('mysqli.default_user =');
l.Add('mysqli.default_pw =');
l.Add('mysqli.reconnect = Off');
l.Add('');
l.Add('[mSQL]');
l.Add('msql.allow_persistent = On');
l.Add('msql.max_persistent = -1');
l.Add('msql.max_links = -1');
l.Add('');
l.Add('[OCI8]');
l.Add('[PostgresSQL]');
l.Add('[Sybase]');
l.Add('[Sybase-CT]');
l.Add('[bcmath]');
l.Add('[browscap]');
l.Add('[Informix]');
l.Add('[Session]');
l.Add('session.save_handler = files');
l.Add('session.save_path = "/var/lib/php5"');
l.Add('session.use_cookies = 1');
l.Add('session.use_only_cookies = 1');
l.Add('session.name = PHPSESSID');
l.Add('session.auto_start = 0');
l.Add('session.cookie_lifetime = 0');
l.Add('session.cookie_path = /');
l.Add('session.cookie_domain =');
l.Add('session.cookie_httponly =');
l.Add('session.serialize_handler = php');
l.Add('session.gc_probability = 1');
l.Add('session.gc_divisor     = 100');
l.Add('session.gc_maxlifetime = 1440');
l.Add('session.referer_check =');
l.Add('session.entropy_length = 0');
l.Add('session.entropy_file =');
l.Add('session.cache_limiter = nocache');
l.Add('session.cache_expire = 420');
l.Add('session.use_trans_sid = 0');
l.Add('session.hash_function = 0');
l.Add('session.hash_bits_per_character = 4');
l.Add('url_rewriter.tags = "a=href,area=href,frame=src,input=src,form=,fieldset="');
l.Add('');
l.Add('[MSSQL]');
l.Add('mssql.allow_persistent = On');
l.Add('mssql.max_persistent = -1');
l.Add('mssql.max_links = -1');
l.Add('mssql.min_error_severity = 10');
l.Add('mssql.min_message_severity = 10');
l.Add('mssql.compatability_mode = Off');
l.Add('mssql.connect_timeout = 5');
l.Add('mssql.timeout = 60');
l.Add('mssql.textlimit = 4096');
l.Add('mssql.textsize = 4096');
l.Add('mssql.batchsize = 0');
l.Add('mssql.datetimeconvert = On');
l.Add('mssql.secure_connection = Off');
l.Add('mssql.max_procs = -1');
l.Add('mssql.charset = "ISO-8859-1"');
l.Add('');
l.Add('[Assertion]');
l.Add('[COM]');
l.Add('[mbstring]');
l.Add('[FrontBase]');
l.Add('[gd]');
l.Add('[exif]');
l.Add('[Tidy]');
l.Add('tidy.clean_output = Off');
l.Add('');
l.Add('[soap]');
l.Add('soap.wsdl_cache_ttl=86400');


  t:=Tstringlist.Create;
  t.add('/etc/php.ini');
  t.Add('/etc/php5/cli/php.ini');
  t.Add('/etc/php5/cgi/php.ini');
  t.add('/etc/php5/apache2/php.ini');
  t.add('/etc/php/php.ini');

  for i:=0 to t.Count-1 do begin
      if FileExists(t.Strings[i]) then begin
         logs.WriteToFile(l.Text,t.Strings[i]);
      end;
  end;

  t.free;
  l.free;
  ForceDirectories('/usr/share/artica-postfix/ressources/profiles');
  fpchmod('/usr/share/artica-postfix/ressources/profiles',&755);


  end;
//##############################################################################






function Tlighttpd._IS_INCLUDE_EXISTS(include_value:string;needed:string):boolean;
var
 l:TStringDynArray;
 i:integer;
begin
   result:=false;
   if length(include_value)=0 then exit(false);
   l:=Explode(':',include_value);
   for i:=0 to length(l)-1 do begin
       if l[i]=needed then exit(true);
   end;
end;
//##############################################################################
procedure Tlighttpd.PHP5_CHECK_EXTENSIONS();
var
l:TstringList;
confdir:string;
begin

confdir:=SYS.LOCATE_PHP5_EXTCONF_DIR();
if not DirectoryExists(confdir) then begin
    logs.Debuglogs('Starting lighttpd............: Unable to stat php5 additional ini files path');
    exit;
end;

l:=Tstringlist.Create;

if FileExists(SYS.LOCATE_MAILPARSE_SO()) then begin
   if not FileExists(confdir+'/mailparse.ini') then begin
      l.Add('# configuration for php mailparse');
      l.Add('extension=mailparse.so');
      l.SaveToFile(confdir+'/mailparse.ini');
      l.Clear;
   end;

end else begin
     logs.Debuglogs('Starting lighttpd............: mailparse.so didn''t exists..');
end;

if FileExists(SYS.LOCATE_IMAP_SO()) then begin
   if not FileExists(confdir+'/imap.ini') then begin
      l.Add('# configuration for php imap');
      l.Add('extension=imap.so');
      l.SaveToFile(confdir+'/imap.ini');
      l.Clear;
   end;

end else begin
     logs.Debuglogs('Starting lighttpd............: imap.so didn''t exists..');
end;

if FileExists(SYS.LOCATE_MCRYPT_SO) then begin
   if not FileExists(confdir+'/mcrypt.ini') then begin
      l.Add('# configuration for php mailparse');
      l.Add('extension=mcrypt.so');
      l.SaveToFile(confdir+'/mcrypt.ini');
      l.Clear;
   end;

end else begin
     logs.Debuglogs('Starting lighttpd............: mcrypt.so didn''t exists..');
end;

if FileExists(SYS.LOCATE_XAPIAN_SO()) then begin
   if not FileExists(confdir+'/xapian.ini') then begin
      l.Add('# configuration for php xapian');
      l.Add('extension=xapian.so');
      l.SaveToFile(confdir+'/xapian.ini');
      l.Clear;
   end;

end else begin
     logs.Debuglogs('Starting lighttpd............: xapian.so didn''t exists..');
end;



if FileExists(SYS.LOCATE_POSIX_SO()) then begin
   if not FileExists(confdir+'/posix.ini') then begin
      l.Add('# configuration for php geoip');
      l.Add('extension=posix.so');
      l.SaveToFile(confdir+'/posix.ini');
      l.Clear;
   end;

end else begin
     logs.Debuglogs('Starting lighttpd............: posix.so didn''t exists..');
end;

if FileExists(SYS.LOCATE_GEOIP_SO()) then begin
   if not FileExists(confdir+'/geoip.ini') then begin
      l.Add('# configuration for php geoip');
      l.Add('extension=geoip.so');
      l.SaveToFile(confdir+'/geoip.ini');
      l.Clear;
   end;

end else begin
     logs.Debuglogs('Starting lighttpd............: geoip.so didn''t exists..');
end;

if FileExists(SYS.LOCATE_LDAP_SO()) then begin
   if not FileExists(confdir+'/ldap.ini') then begin
      l.Add('# configuration for php ldap');
      l.Add('extension=ldap.so');
      l.SaveToFile(confdir+'/ldap.ini');
      l.Clear;
   end;

end else begin
     logs.Debuglogs('Starting lighttpd............: ldap.so didn''t exists..');
end;

if FileExists(SYS.LOCATE_SESSSION_SO()) then begin
   if not FileExists(confdir+'/session.ini') then begin
      l.Add('# configuration for session');
      l.Add('extension=session.so');
      l.SaveToFile(confdir+'/session.ini');
      l.Clear;
   end;

end else begin
     logs.Debuglogs('Starting lighttpd............: session.so didn''t exists..');
end;

if FileExists(SYS.LOCATE_MYSQL_SO()) then begin
   if not FileExists(confdir+'/mysql.ini') then begin
      l.Add('# configuration for session');
      l.Add('extension=mysql.so');
      l.SaveToFile(confdir+'/mysql.ini');
      l.Clear;
   end;

end else begin
     logs.Debuglogs('Starting lighttpd............: mysql.so didn''t exists..');
end;

if FileExists(SYS.LOCATE_GD_SO()) then begin
   if not FileExists(confdir+'/gd.ini') then begin
      l.Add('# configuration for session');
      l.Add('extension=gd.so');
      l.SaveToFile(confdir+'/gd.ini');
      l.Clear;
   end;

end else begin
     logs.Debuglogs('Starting lighttpd............: gd.so didn''t exists..');
end;







//             open_basedir


forcedirectories('/tmp/eaccelerator');
if FileExists(SYS.LOCATE_EACCELERATOR_SO()) then begin
   if not FileExists(confdir+'/eaccelerator.ini') then begin
      l.Add('# configuration for php eaccelerator');
      l.Add('extension=eaccelerator.so');
      l.Add('eaccelerator.shm_size="0"');
      l.Add('eaccelerator.cache_dir="/tmp/eaccelerator"');
      l.Add('eaccelerator.enable="1"');
      l.Add('eaccelerator.optimizer="1"');
      l.Add('eaccelerator.check_mtime="1"');
      l.Add('eaccelerator.debug="0"');
      l.Add('eaccelerator.filter=""');
      l.Add('eaccelerator.shm_max="0"');
      l.Add('eaccelerator.shm_ttl="0"');
      l.Add('eaccelerator.shm_prune_period="0"');
      l.Add('eaccelerator.shm_only="0"');
      l.Add('eaccelerator.compress="1"');
      l.Add('eaccelerator.compress_level="9"');
      l.SaveToFile(confdir+'/eaccelerator.ini');
      l.Clear;
   end;

end else begin
     logs.Debuglogs('Starting lighttpd............: eaccelerator.so didn''t exists..');
end;



 FreeAndNil(l);

end;
//##############################################################################
procedure Tlighttpd.CHECK_SUBFOLDER();
begin
    if DirectoryExists('/usr/share/oma') then begin
       logs.OutputCmd('/bin/ln -s --force /usr/share/oma /usr/share/artica-postfix/oma');
    end;

    if DirectoryExists('/usr/share/roundcube') then begin
       logs.OutputCmd('/bin/ln -s --force /usr/share/roundcube /usr/share/artica-postfix/webmail');
       logs.OutputCmd('/bin/ln -s --force /usr/share/roundcube /usr/share/artica-postfix/roundcube');
    end;

end;
//##############################################################################
function Tlighttpd.SET_PHP_CGI_BINPATH():boolean;
var
   l:TstringList;
   RegExpr:TRegExpr;
   i:integer;
   php_cgi:string;
   found:boolean;
   line_f:integer;
begin
result:=true;
   if not FileExists(LIGHTTPD_CONF_PATH()) then begin
      logs.Debuglogs('Starting lighttpd............: unable to locate lighttpd.conf');
      exit;
   end;

   php_cgi:=PHP5_CGI_BIN_PATH();

   if length(php_cgi)=0 then begin
      logs.Debuglogs('Starting lighttpd............: unable to stat php-cgi,php5-cgi...');
      exit;
   end;


l:=TstringList.Create;
l.LoadFromFile(LIGHTTPD_CONF_PATH());
RegExpr:=TRegExpr.Create;
RegExpr.Expression:='"bin-path"';
found:=false;

for i:=0 to l.Count-1 do begin
    if RegExpr.Exec(l.Strings[i]) then begin
       l.Strings[i]:='                "bin-path" => "'+php_cgi+'",';
       found:=true;
       result:=true;
       line_f:=i;
       break;
    end;
end;

if found then begin
       logs.Debuglogs('Starting lighttpd............: set ' + php_cgi + ' in line ('+IntToStr(line_f)+')');
       l.SaveToFile(LIGHTTPD_CONF_PATH());
       l.free;
       RegExpr.free;
       exit(true);
end;




end;




procedure Tlighttpd.LIGHTTPD_DEFAULT_CONF_SAVE();
var
l:TStringList;
begin
l:=TstringList.Create;
logs.logs('LIGHTTPD_DEFAULT_CONF_SAVE:: Saving file ' +LIGHTTPD_CONF_PATH());

l.Add(DEFAULT_CONF());
l.SaveToFile(LIGHTTPD_CONF_PATH());
l.free;
end;
//##############################################################################
function tlighttpd.DEFAULT_CONF():string;
var
l:TstringList;
mailman:tmailman;
user:string;
RegExpr:TRegExpr;
group,name:string;
begin

user:=LIGHTTPD_GET_USER();
if length(user)=0 then user:=SYS.GET_INFO('LighttpdUserAndGroup');
if length(user)=0 then begin
   user:='www-data:www-data';
   SYS.set_INFO('LighttpdUserAndGroup',user);
end;

RegExpr:=TRegExpr.Create;
RegExpr.Expression:='(.+?):(.+)';
RegExpr.Exec(user);
name:=RegExpr.Match[1];
group:=RegExpr.Match[2];

l:=TstringList.Create;
l.Add('#artica-postfix saved by artica lighttpd.conf');
l.Add('');
l.Add('server.modules = (');
l.Add('        "mod_alias",');
l.Add('        "mod_access",');
l.Add('        "mod_accesslog",');
l.Add('        "mod_compress",');
l.Add('        "mod_fastcgi",');
l.Add('        "mod_cgi",');
l.Add('	       "mod_status"');
l.Add(')');
l.Add('');
l.Add('server.document-root        = "/usr/share/artica-postfix"');
l.Add('server.username = "'+name+'"');
l.Add('server.groupname = "'+group+'"');
l.Add('server.errorlog             = "/var/log/lighttpd/error.log"');
l.Add('index-file.names            = ( "index.php")');
l.Add('');
l.Add('mimetype.assign             = (');
l.Add('  ".pdf"          =>      "application/pdf",');
l.Add('  ".sig"          =>      "application/pgp-signature",');
l.Add('  ".spl"          =>      "application/futuresplash",');
l.Add('  ".class"        =>      "application/octet-stream",');
l.Add('  ".ps"           =>      "application/postscript",');
l.Add('  ".torrent"      =>      "application/x-bittorrent",');
l.Add('  ".dvi"          =>      "application/x-dvi",');
l.Add('  ".gz"           =>      "application/x-gzip",');
l.Add('  ".pac"          =>      "application/x-ns-proxy-autoconfig",');
l.Add('  ".swf"          =>      "application/x-shockwave-flash",');
l.Add('  ".tar.gz"       =>      "application/x-tgz",');
l.Add('  ".tgz"          =>      "application/x-tgz",');
l.Add('  ".tar"          =>      "application/x-tar",');
l.Add('  ".zip"          =>      "application/zip",');
l.Add('  ".mp3"          =>      "audio/mpeg",');
l.Add('  ".m3u"          =>      "audio/x-mpegurl",');
l.Add('  ".wma"          =>      "audio/x-ms-wma",');
l.Add('  ".wax"          =>      "audio/x-ms-wax",');
l.Add('  ".ogg"          =>      "application/ogg",');
l.Add('  ".wav"          =>      "audio/x-wav",');
l.Add('  ".gif"          =>      "image/gif",');
l.Add('  ".jar"          =>      "application/x-java-archive",');
l.Add('  ".jpg"          =>      "image/jpeg",');
l.Add('  ".jpeg"         =>      "image/jpeg",');
l.Add('  ".png"          =>      "image/png",');
l.Add('  ".xbm"          =>      "image/x-xbitmap",');
l.Add('  ".xpm"          =>      "image/x-xpixmap",');
l.Add('  ".xwd"          =>      "image/x-xwindowdump",');
l.Add('  ".css"          =>      "text/css",');
l.Add('  ".html"         =>      "text/html",');
l.Add('  ".htm"          =>      "text/html",');
l.Add('  ".js"           =>      "text/javascript",');
l.Add('  ".asc"          =>      "text/plain",');
l.Add('  ".c"            =>      "text/plain",');
l.Add('  ".cpp"          =>      "text/plain",');
l.Add('  ".log"          =>      "text/plain",');
l.Add('  ".conf"         =>      "text/plain",');
l.Add('  ".text"         =>      "text/plain",');
l.Add('  ".txt"          =>      "text/plain",');
l.Add('  ".dtd"          =>      "text/xml",');
l.Add('  ".xml"          =>      "text/xml",');
l.Add('  ".mpeg"         =>      "video/mpeg",');
l.Add('  ".mpg"          =>      "video/mpeg",');
l.Add('  ".mov"          =>      "video/quicktime",');
l.Add('  ".qt"           =>      "video/quicktime",');
l.Add('  ".avi"          =>      "video/x-msvideo",');
l.Add('  ".asf"          =>      "video/x-ms-asf",');
l.Add('  ".asx"          =>      "video/x-ms-asf",');
l.Add('  ".wmv"          =>      "video/x-ms-wmv",');
l.Add('  ".bz2"          =>      "application/x-bzip",');
l.Add('  ".tbz"          =>      "application/x-bzip-compressed-tar",');
l.Add('  ".tar.bz2"      =>      "application/x-bzip-compressed-tar",');
l.Add('  ""              =>      "application/octet-stream",');
l.Add(' )');
l.Add('');
l.Add('');
l.Add('accesslog.filename          = "/var/log/lighttpd/access.log"');
l.Add('url.access-deny             = ( "~", ".inc" )');
l.Add('');
l.Add('static-file.exclude-extensions = ( ".php", ".pl", ".fcgi" )');
l.Add('server.port                 = 9000');
l.Add('#server.bind                = "127.0.0.1"');
l.Add('#server.error-handler-404   = "/error-handler.html"');
l.Add('#server.error-handler-404   = "/error-handler.php"');
l.Add('server.pid-file             = "/var/run/lighttpd/lighttpd.pid"');
l.Add('server.max-fds 		    = 2048');
l.Add('');
l.Add('fastcgi.server = ( ".php" =>((');
l.Add('                "bin-path" => "/usr/bin/php-cgi",');
l.Add('                "socket" => "/var/run/lighttpd/php.socket",');
l.Add('		"min-procs" => 1,');
l.Add('                "max-procs" => 4,');
l.Add('		"max-load-per-proc" => 4,');
l.Add('                "idle-timeout" => 10,');
l.Add('                "bin-environment" => (');
l.Add('                        "PHP_FCGI_CHILDREN" => "4",');
l.Add('                        "PHP_FCGI_MAX_REQUESTS" => "100"');
l.Add('                ),');
l.Add('                "bin-copy-environment" => (');
l.Add('                        "PATH", "SHELL", "USER"');
l.Add('                ),');
l.Add('                "broken-scriptfilename" => "enable"');
l.Add('        ))');
l.Add(')');
l.Add('ssl.engine                 = "enable"');
l.Add('ssl.pemfile                = "/opt/artica/ssl/certs/lighttpd.pem"');
l.Add('status.status-url          = "/server-status"');
l.Add('status.config-url          = "/server-config"');
l.Add('alias.url += (	"/webmail" 			 => "/var/lib/roundcube")');
l.Add('$HTTP["url"] =~ "^/webmail" {');
l.Add('	server.follow-symlink = "enable"');
l.Add('}');
l.Add('$HTTP["url"] =~ "^/webmail/config|/webmail/temp|/webmail/logs" { url.access-deny = ( "" )}');
l.Add('alias.url +=("/monitorix"  => "/var/www/monitorix/")');
l.Add('alias.url += ("/blocked_attachments"=> "/var/spool/artica-filter/bightml")');

if DirectoryExists(awstats.AWSTATS_www_root()) then l.Add('alias.url += ( "/awstats" => "'+awstats.AWSTATS_www_root()+'" )');

l.Add('alias.url += ( "/cgi-bin/" => "/usr/lib/cgi-bin/" )');
l.Add('');
l.Add('cgi.assign= (');
l.Add('	".pl"  => "/usr/bin/perl",');
l.Add('	".php" => "/usr/bin/php-cgi",');
l.Add('	".py"  => "/usr/bin/python",');
l.Add('	".cgi"  => "/usr/bin/perl",');

mailman:=tmailman.Create(SYS);

if FileExists(mailman.BIN_PATH()) then begin
   l.Add('"/admin" => "",');
   l.Add('"/admindb" => "",');
   l.Add('"/confirm" => "",');
   l.Add('"/create" => "",');
   l.Add('"/edithtml" => "",');
   l.Add('"/listinfo" => "",');
   l.Add('"/options" => "",');
   l.Add('"/private" => "",');
   l.Add('"/rmlist" => "",');
   l.Add('"/roster" => "",');
   l.Add('"/subscribe" => ""');
end;
l.Add(')');
l.Add('');
if Not FileExists('/etc/lighttpd/lighttpd.conf') then begin
   forceDirectories('/etc/lighttpd');
   l.SaveToFile('/etc/lighttpd/lighttpd.conf');
end;
result:=l.text;
l.free;
end;
//##############################################################################

procedure Tlighttpd.LIGHTTPD_FIX_ERRORS();
var
     l:TstringList;
     RegExpr:TRegExpr;
     i:integer;
begin

 if not FileExists('/opt/artica/conf/lighttpd.conf') then exit;

 l:=Tstringlist.Create;
 l.LoadFromFile('/opt/artica/conf/lighttpd.conf');
 RegExpr:=TRegExpr.Create;
 RegExpr.Expression:='^passl\.engine';
 for i:=0 to l.Count-1 do begin
     if RegExpr.Exec(l.Strings[i]) then begin
         l.Strings[i]:='ssl.engine                 = "enable"';
         l.SaveToFile('/opt/artica/conf/lighttpd.conf');
         break;
     end;
 end;

l.free;
RegExpr.free;

end;
//##############################################################################
function Tlighttpd.APACHE_ARTICA_ENABLED():string;
var
   s:string;
begin

if not FileExists(SYS.LOCATE_APACHE_INITD_PATH()) then exit('0');

if not FileExists(LIGHTTPD_BIN_PATH()) then begin
   result:='1';
   exit;
end;
s:=SYS.GET_INFO('ApacheArticaEnabled');
if length(s)=0 then exit('0');
exit(s);
end;
//##############################################################################
function Tlighttpd.Explode(const Separator, S: string; Limit: Integer = 0):TStringDynArray;
var
  SepLen       : Integer;
  F, P         : PChar;
  ALen, Index  : Integer;
begin
  SetLength(Result, 0);
  if (S = '') or (Limit < 0) then
    Exit;
  if Separator = '' then
  begin
    SetLength(Result, 1);
    Result[0] := S;
    Exit;
  end;
  SepLen := Length(Separator);
  ALen := Limit;
  SetLength(Result, ALen);

  Index := 0;
  P := PChar(S);
  while P^ <> #0 do
  begin
    F := P;
    P := StrPos(P, PChar(Separator));
    if (P = nil) or ((Limit > 0) and (Index = Limit - 1)) then
      P := StrEnd(F);
    if Index >= ALen then
    begin
      Inc(ALen, 5); // mehrere auf einmal um schneller arbeiten zu können
      SetLength(Result, ALen);
    end;
    SetString(Result[Index], F, P - F);
    Inc(Index);
    if P^ <> #0 then
      Inc(P, SepLen);
  end;
  if Index < ALen then
    SetLength(Result, Index); // wirkliche Länge festlegen
end;

end.

