unit ldap;

{$MODE DELPHI}
{$LONGSTRINGS ON}

interface

uses
  Classes, SysUtils,ldapsend,RegExpr in 'RegExpr.pas',IniFiles,logs;
  
type
  TStringDynArray = array of string;
  
type

  bogofilter_settings=record
        max_rate:integer;
        prepend:string;
        action:string;
  end;
  
  ldapserver=record
      admin:string;
      password:string;
      suffix:string;
      servername:string;
  end;

  ldapinfos =record
       BlackList:TStringList;
       WhiteList:TStringList;
       user_dn:string;
       user_ou:string;
       uid:string;
       RBL_SERVER_ACTION:string;
       RBL_SERVERS:TStringList;
       BOGOFILTER_ROBOTS:TStringList;
       BOGOFILTER_ACTION:string;
       BOGOFILTER_PARAM:bogofilter_settings;
       TrustMyUsers:string;
       end;
       
  http_proxy_settings=record
       ArticaProxyServerName                :string;
       ArticaProxyServerPort                :string;
       ArticaProxyServerUsername            :string;
       ArticaProxyServerUserPassword        :string;
       ArticaProxyServerEnabled             :string;
       IniSettings                          :string;
       ArticaMailAddonsLevel                :string;

  end;
  
  
  dansguardian_settings=record
      DansGuardianRulesIndex                :TStringList;
      DansGuardianMasterConf                :string;
      FilterGroupListConf                   :string;

  end;
  

  fetchmail_settings=record
       fetchmailrc:string;
       FetchGetLive:string;
  end;
  
  inadyn_settings=record
        ArticaInadynPoolRule:string;
        ArticaInadynRule:TstringList;
        proxy_settings:http_proxy_settings;
  end;
  
  
  postfix_settings=record
    PostfixMainCfFile:string;
    PostfixBounceTemplateFile:string;
    PostFixHeadersRegexFile:string;
    PostfixTimeCode:string;
  end;
  
  sqlgrey_settings=record
     SqlGreyEnabled                        :integer;
     SqlGreyConf                           :string;
     SqlGreyTimeCode                       :string;
  end;
  
  
  crossroads_settings=record
     PostfixSlaveServersIdentity           :TstringList;
     PostfixMasterServerIdentity           :String;
     CrossRoadsBalancingServerIP           :string;
     CrossRoadsBalancingServerName         :string;
     CrossRoadsPoolingTime                 :string;
  end;


  artica_settings=record
     ArticaMailAddonsLevel                 :string;
     ArticaMaxTempLogFilesDay              :string;
     ArticaFoldersSizeConfig               :TstringList;
     ArticaAutoUpdateConfig                :string;
  end;
  
  amavis_settings=record
     FinalVirusDestiny                     :string;
     FinalBannedDestiny                    :string;
     FinalSpamDestiny                      :string;
     FinalBadHeaderDestiny                 :string;
     QuarantineMailZuAdmin                 :TstringList;
  end;
  

  
  type
  Tldap=class
  

  private
       ldap_admin,ldap_password,ldap_suffix,ldap_server:string;
       global_ldap         : TLDAPsend;
       DN_ROOT             :string;
       Logged              :boolean;
       D                   :boolean;

       
       function     get_LDAP(key:string):string;
       function     get_CONF(key:string):string;
       function     Query_A(Query_string:string;return_attribute:string):TStringDynArray;

       function     ParseResultInStringList(Items:TLDAPAttribute):TStringList;
       function     SearchSingleAttribute(Items:TLDAPAttributeList;SearchAttribute:string):string;
       function     SearchMultipleAttribute(Items:TLDAPResultList;SearchAttribute:string):Tstringlist;
       function     SearchSingleData(Items:TLDAPResultList;SearchAttribute:string):string;
       function     Create_dcObject(dn:string;name:string):boolean;
       procedure    DumpAttributes(LDAPAttributeList:TLDAPAttributeList);
       function     logon():boolean;

  public
      constructor   Create();
      destructor    Destroy; override;
       ftplist      :TstringList;
      function      Explode(const Separator, S: string; Limit: Integer = 0):TStringDynArray;
      function      EmailFromAliase(email:string):string;
      function      EmailFromUID(UID:string):string;

      function      LoadASRules(email:string):string;
      function      LoadAVRules(email:string):string;
      function      LoadOUASRules(ou:string):string;
      
      
      function      Load_Kav4proxy_settings():string;
      function      Load_Fetchmail_settings():fetchmail_settings;
      function      Load_squid_settings(servername:string):string;
      function      Load_inadyn_settings():inadyn_settings;
      function      Load_proxy_settings():http_proxy_settings;
      function      Load_sqlgrey_settings(servername:string):sqlgrey_settings;
      function      ArticaMailAddonsLevel():string;
      
      function      Load_Dansguardian_MainConfiguration(servername:string):dansguardian_settings;
      function      Load_Dansguardian_fileconfig(servername:string;ruleindex:string;attribute:string):string;
      
      function      Load_postfix_main_settings():postfix_settings;
      function      Load_amavis_main_settings():amavis_settings;
      function      Load_crossroads_main_settings():crossroads_settings;
      function      Load_artica_main_settings():artica_settings;
      
      procedure     DeleteCyrusUser();
      procedure     CreateMailManBranch();
      
      
      procedure     Load_ftp_users();
      function      pureftpd_settings(servername:string):string;

       function Ldap_infos(email:string):ldapinfos;



      function COMMANDLINE_PARAMETERS(FoundWhatPattern:string):boolean;
      function Query(Query_string:string;return_attribute:string):string;




      function OU_From_eMail(email:string):string;
      function QuarantineMaxDayByOu(Ou:string):string;
      function IsOuDomainBlackListed(Ou:string;domain:string):boolean;
      function FackedSenderParameters(Ou:string):string;
      function ArticaMaxSubQueueNumberParameter():integer;
      function ArticaDenyNoMXRecordsOu(Ou:string):string;
      procedure CreateArticaUser();

      function OuLists():TStringDynArray;
      function implode(ArrayS:TStringDynArray):string;
      function ParseSuffix():boolean;
      procedure CreateSuffix();
      function CreateCyrusUser():boolean;
      function LoadAllOu():string;
      SEARCH_DN:string;
      TEMP_LIST:TstringList;
      LDAPINFO:ldapserver;

end;

implementation

constructor Tldap.Create();
begin
   SEARCH_DN:='';
   ldap_admin:=get_LDAP('admin');
   ldap_password:=get_LDAP('password');
   ldap_suffix:=get_LDAP('suffix');
   ldap_server:=get_LDAP('server');
   if length(ldap_server)=0 then ldap_server:='127.0.0.1';
   if ldap_server='*' then ldap_server:='127.0.0.1';
   
   LDAPINFO.admin:=ldap_admin;
   LDAPINFO.password:=ldap_password;
   LDAPINFO.suffix:=ldap_suffix;
   LDAPINFO.servername:=ldap_server;
   

   global_ldap:=TLDAPsend.Create;
   D:=COMMANDLINE_PARAMETERS('debug');
   Logged:=logon();
   TEMP_LIST:=TstringList.Create;
end;
//##############################################################################
destructor Tldap.Destroy;
begin
  TEMP_LIST.Free;
  global_ldap.free;
  inherited Destroy;
end;
//##############################################################################
function Tldap.OuLists():TStringDynArray;
var Myquery:string;
resultats:TStringDynArray;
begin
     Myquery:='(&(ObjectClass=organizationalUnit)(ou=*))';
     resultats:=Query_A(MyQuery,'ou');
     exit(resultats);
end;
//##############################################################################
function Tldap.logon():boolean;
begin
     result:=false;
     global_ldap :=  TLDAPSend.Create;
     global_ldap.TargetHost := ldap_server;
     global_ldap.TargetPort := '389';
     global_ldap.UserName := 'cn=' +ldap_admin + ',' + ldap_suffix;
     global_ldap.Password := ldap_password;
     global_ldap.Version := 3;
     global_ldap.FullSSL := false;
     
 if not global_ldap.Login then begin
    if D then writeln('logon:: unable to connect...R=',global_ldap.ResultString,' FR=',global_ldap.FullResult,' username=',global_ldap.UserName,' host=',global_ldap.TargetHost);
    exit();
 end;


    if not global_ldap.Bind then begin
       if D then writeln('logon:: failed bind "' + global_ldap.UserName + '"');
       exit;
    end;
if D then writeln('logon:: success to connect...');
result:=true;

end;

//##############################################################################
function tldap.Load_artica_main_settings():artica_settings;
var
   F                        :artica_settings;
   Myquery                  :string;
   DN                       :string;
   l                        :Tstringlist;
   AttributeNameQ           :string;
   i                        :integer;
   t                        :integer;
   AutoUpdateConfig         :string;
begin
result:=f;

  if not Logged then begin
     if D then writeln('Logged -> false, exit...');
     exit;
  end;

l:=TstringList.Create;
  DN:='cn=artica,' + ldap_suffix;
  Myquery:='(objectClass=ArticaSettings)';
  ftplist:=TstringList.Create;
  f.ArticaFoldersSizeConfig:=TstringList.Create;

    if not global_ldap.Search(DN, False, Myquery, l) then begin
         if D then writeln('Load_artica_main_settings:: Failed search ' + Myquery + ' in ' + DN);
         exit;
    end;


    if D then writeln(Myquery+ ' count :',global_ldap.SearchResult.Count);
    if global_ldap.SearchResult.Count=0 then begin
       if D then writeln('Load_artica_main_settings:: Failed search ' + Myquery + ' in ' + DN);
       exit;
    end;

    for i:=0 to global_ldap.SearchResult.Count -1 do begin
         f.ArticaMailAddonsLevel:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'ArticaMailAddonsLevel');
         f.ArticaMaxTempLogFilesDay:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'ArticaMaxTempLogFilesDay');
         if length(AutoUpdateConfig)=0 then AutoUpdateConfig:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'articaautoupdateconfig');
         f.ArticaFoldersSizeConfig.AddStrings(SearchMultipleAttribute(global_ldap.SearchResult,'ArticaFoldersSizeConfig'));

     end;
     
     
     
    if d then begin
       writeln();
       writeln();
       writeln('#f.ArticaAutoUpdateConfig=',AutoUpdateConfig);
    end;
    
     
    f.ArticaAutoUpdateConfig:=AutoUpdateConfig;
    if length(F.ArticaMaxTempLogFilesDay)=0 then F.ArticaMaxTempLogFilesDay:='3';
    result:=f;

end;
//##############################################################################
function tldap.Load_amavis_main_settings():amavis_settings;
var
   F                        :amavis_settings;
   Myquery                  :string;
   DN                       :string;
   l                        :Tstringlist;
   AttributeNameQ           :string;
   i                        :integer;
   t                        :integer;
begin
f.QuarantineMailZuAdmin:=TstringList.Create;
result:=f;

  if not Logged then begin
     if D then writeln('Logged -> false, exit...');
     exit;
  end;

l:=TstringList.Create;
  DN:='cn=amavis,cn=artica,' + ldap_suffix;
  Myquery:='(objectClass=AmavisGlobalSettings)';
  ftplist:=TstringList.Create;

    if not global_ldap.Search(DN, False, Myquery, l) then begin
         if D then writeln('Load_amavis_main_settings:: Failed search ' + Myquery + ' in ' + DN);
         exit;
    end;


    if D then writeln(Myquery+ ' count :',global_ldap.SearchResult.Count);
    if global_ldap.SearchResult.Count=0 then begin
       if D then writeln('Load_amavis_main_settings:: Failed search ' + Myquery + ' in ' + DN);
       exit;
    end;


    for i:=0 to global_ldap.SearchResult.Count -1 do begin
         f.FinalVirusDestiny:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'FinalVirusDestiny');
         f.FinalBannedDestiny:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'FinalBannedDestiny');
         f.FinalSpamDestiny:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'FinalSpamDestiny');
         f.FinalBadHeaderDestiny:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'FinalBadHeaderDestiny');
         f.QuarantineMailZuAdmin.AddStrings(SearchMultipleAttribute(global_ldap.SearchResult,'QuarantineMailZuAdmin'));
     end;
     
    result:=f;

end;
//##############################################################################
function tldap.Load_crossroads_main_settings():crossroads_settings;
var
   F                        :crossroads_settings;
   Myquery                  :string;
   DN                       :string;
   l                        :Tstringlist;
   AttributeNameQ           :string;
   i                        :integer;
   t                        :integer;
begin
result:=f;
f.PostfixSlaveServersIdentity:=Tstringlist.Create;
  if not Logged then begin
     if D then writeln('Logged -> false, exit...');
     exit;
  end;

l:=TstringList.Create;
  DN:='cn=artica,' + ldap_suffix;
  Myquery:='(objectClass=BalancePostfixServers)';
  ftplist:=TstringList.Create;

    if not global_ldap.Search(DN, False, Myquery, l) then begin
         if D then writeln('Load_crossroads_main_settings:: Failed search ' + Myquery + ' in ' + DN);
         exit;
    end;


    if D then writeln(Myquery+ ' count :',global_ldap.SearchResult.Count);
    if global_ldap.SearchResult.Count=0 then begin
       if D then writeln('Load_crossroads_main_settings:: Failed search ' + Myquery + ' in ' + DN);
       exit;
    end;

    for i:=0 to global_ldap.SearchResult.Count -1 do begin
         f.PostfixMasterServerIdentity:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'PostfixMasterServerIdentity');
         f.CrossRoadsBalancingServerIP:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'CrossRoadsBalancingServerIP');
         F.CrossRoadsBalancingServerName:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'CrossRoadsBalancingServerName');
         F.CrossRoadsPoolingTime:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'CrossRoadsPoolingTime');
         F.PostfixSlaveServersIdentity.AddStrings(SearchMultipleAttribute(global_ldap.SearchResult,'PostfixSlaveServersIdentity'));

     end;
    if length(F.CrossRoadsPoolingTime)=0 then F.CrossRoadsPoolingTime:='300';
    result:=f;

end;
//##############################################################################
function tldap.Load_postfix_main_settings():postfix_settings;
var
   F                        :postfix_settings;
   Myquery                  :string;
   DN                       :string;
   l                        :Tstringlist;
   AttributeNameQ           :string;
   i                        :integer;
   t                        :integer;
begin
result:=f;
  if not Logged then begin
     if D then writeln('Logged -> false, exit...');
     exit;
  end;

l:=TstringList.Create;
  DN:='cn=PostfixFilesStorage,cn=artica,' + ldap_suffix;
  Myquery:='(objectClass=PostfixStoreFiles)';
  ftplist:=TstringList.Create;

    if not global_ldap.Search(DN, False, Myquery, l) then begin
         if D then writeln('Load_postfix_main_settings:: Failed search ' + Myquery + ' in ' + DN);
         exit;
    end;


    if D then writeln(Myquery+ ' count :',global_ldap.SearchResult.Count);
    if global_ldap.SearchResult.Count=0 then begin
       if D then writeln('Load_postfix_main_settings:: Failed search ' + Myquery + ' in ' + DN);
       exit;
    end;
    
    for i:=0 to global_ldap.SearchResult.Count -1 do begin
         f.PostfixBounceTemplateFile:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'PostfixBounceTemplateFile');
         f.PostfixMainCfFile:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'PostfixMainCfFile');
         f.PostfixTimeCode:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'PostfixTimeCode');
         f.PostFixHeadersRegexFile:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'PostFixHeadersRegexFile');
     end;
    if D then writeln('Load_postfix_main_settings:: PostfixTimeCode=' +  f.PostfixTimeCode);
    result:=f;

end;
//##############################################################################

function Tldap.Load_squid_settings(servername:string):string;
var
   F                        :fetchmail_settings;
   Myquery                  :string;
   DN                       :string;
   l                        :Tstringlist;
   AttributeNameQ           :string;
   i                        :integer;
   t                        :integer;
begin
  result:='';
  if not Logged then begin
     if D then writeln('Logged -> false, exit...');
     exit;
  end;
  l:=TstringList.Create;
  DN:='cn=squid,cn=' + servername + ',cn=artica,' + ldap_suffix;
  Myquery:='(objectClass=SquidProxyClass)';
  ftplist:=TstringList.Create;

    if not global_ldap.Search(DN, False, Myquery, l) then begin
         if D then writeln('Load_squid_settings:: Failed search ' + Myquery + ' in ' + DN);
         exit;
    end;


    if D then writeln(Myquery+ ' count :',global_ldap.SearchResult.Count);
    if global_ldap.SearchResult.Count=0 then begin
       if D then writeln('Load_squid_settings:: Failed search ' + Myquery + ' in ' + DN);
       exit;
    end;


    for i:=0 to global_ldap.SearchResult.Count -1 do begin
         result:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'GlobalSquidConf');
     end;

end;
//##############################################################################
function Tldap.Load_sqlgrey_settings(servername:string):sqlgrey_settings;
var
   F                        :fetchmail_settings;
   Myquery                  :string;
   DN                       :string;
   l                        :Tstringlist;
   AttributeNameQ           :string;
   i                        :integer;
   t                        :integer;
   z                        :sqlgrey_settings;
   SqlGreyEnabled           :string;
begin

  if not Logged then begin
     if D then writeln('Logged -> false, exit...');
     exit;
  end;
  l:=TstringList.Create;
  DN:='cn=sqlgrey,cn=' + servername + ',cn=artica,' + ldap_suffix;
  Myquery:='(objectClass=SqlGreyClass)';
  ftplist:=TstringList.Create;

    if not global_ldap.Search(DN, False, Myquery, l) then begin
         if D then writeln('Load_sqlgrey_settings:: Failed search ' + Myquery + ' in ' + DN);
         exit;
    end;


    if D then writeln(Myquery+ ' count :',global_ldap.SearchResult.Count);
    if global_ldap.SearchResult.Count=0 then begin
       if D then writeln('Load_sqlgrey_settings:: Failed search ' + Myquery + ' in ' + DN);
       exit;
    end;


    for i:=0 to global_ldap.SearchResult.Count -1 do begin

         SqlGreyEnabled:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'SqlGreyEnabled');
         z.SqlGreyConf:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'SqlGreyConf');
         z.SqlGreyTimeCode:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'SqlGreyTimeCode');
     end;
     
     if length(SqlGreyEnabled)=0 then SqlGreyEnabled:='0';
     z.SqlGreyEnabled:=StrToInt(SqlGreyEnabled);
     result:=z;
end;
//##############################################################################


function Tldap.pureftpd_settings(servername:string):string;
var
   F                        :fetchmail_settings;
   Myquery                  :string;
   DN                       :string;
   l                        :Tstringlist;
   AttributeNameQ           :string;
   i                        :integer;
   t                        :integer;
begin
  result:='';
  if not Logged then begin
     if D then writeln('Logged -> false, exit...');
     exit;
  end;
  l:=TstringList.Create;
  DN:='cn=pure-ftpd,cn=' + servername + ',cn=artica,' + ldap_suffix;
  Myquery:='(objectClass=PureFtpdClass)';
  ftplist:=TstringList.Create;

    if not global_ldap.Search(DN, False, Myquery, l) then begin
         if D then writeln('pureftpd_settings:: Failed search ' + Myquery + ' in ' + DN);
         exit;
    end;


    if D then writeln(Myquery+ ' count :',global_ldap.SearchResult.Count);
    if global_ldap.SearchResult.Count=0 then begin
       if D then writeln('pureftpd_settings:: Failed search ' + Myquery + ' in ' + DN);
       exit;
    end;


    for i:=0 to global_ldap.SearchResult.Count -1 do begin
         result:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'PureFtpdConf');
     end;

end;
//##############################################################################
procedure Tldap.Load_ftp_users();
var
   F                        :fetchmail_settings;
   Myquery                  :string;
   DN                       :string;
   l                        :Tstringlist;
   AttributeNameQ           :string;
   i                        :integer;
   t                        :integer;
   u                        :integer;
   value_result,uid,FTPDownloadBandwidth,FTPDownloadRatio,FTPQuotaFiles,FTPQuotaMBytes,FTPUploadBandwidth,FTPUploadRatio,homeDirectory,userPassword             :string;
begin

  if not Logged then begin
     if D then writeln('Logged -> false, exit...');
     exit;
  end;
  l:=TstringList.Create;
  ftplist:=TstringList.Create;
  DN:=ldap_suffix;
  Myquery:='(&(objectClass=PureFTPdUser)(FTPStatus=TRUE))';
  
l.Add('uid');
l.Add('FTPDownloadBandwidth');
l.Add('FTPDownloadRatio');
l.Add('FTPQuotaFiles');
l.Add('FTPQuotaMBytes');
l.Add('FTPUploadBandwidth');
l.Add('FTPUploadRatio');
l.Add('homeDirectory');
l.Add('userPassword');


    if not global_ldap.Search(DN, False, Myquery, l) then begin
         if D then writeln('Load_ftp_users:: Failed search ' + Myquery + ' in ' + DN);
         exit;
    end;


    if D then writeln(Myquery+ ' count :',global_ldap.SearchResult.Count);
    if global_ldap.SearchResult.Count=0 then begin
       if D then writeln('Load_ftp_users:: Failed search ' + Myquery + ' in ' + DN);
       exit;
    end;

for i:=0 to global_ldap.SearchResult.Count -1 do begin
       for t:=0 to global_ldap.SearchResult.Items[i].Attributes.Count -1 do begin
                AttributeNameQ:=LowerCase(global_ldap.SearchResult.Items[i].Attributes[t].AttributeName);
                if AttributeNameQ='uid' then begin
                      uid:=global_ldap.SearchResult.Items[i].Attributes.Items[t].Strings[0];
                      homeDirectory:=SearchSingleData(global_ldap.SearchResult,'homeDirectory');
                      FTPDownloadBandwidth:=SearchSingleData(global_ldap.SearchResult,'FTPDownloadBandwidth');
                      FTPDownloadRatio:=SearchSingleData(global_ldap.SearchResult,'FTPDownloadRatio');
                      FTPQuotaFiles:=SearchSingleData(global_ldap.SearchResult,'FTPQuotaFiles');
                      FTPQuotaMBytes:=SearchSingleData(global_ldap.SearchResult,'FTPQuotaMBytes');
                      FTPUploadBandwidth:=SearchSingleData(global_ldap.SearchResult,'FTPUploadBandwidth');
                      FTPUploadRatio:=SearchSingleData(global_ldap.SearchResult,'FTPUploadRatio');
                      userPassword:=SearchSingleData(global_ldap.SearchResult,'userPassword');
                      
                       if length(FTPDownloadBandwidth)=0 then FTPDownloadBandwidth:='''';
                       if length(FTPDownloadRatio)=0 then FTPDownloadRatio:='''';
                       if length(FTPQuotaFiles)=0 then FTPQuotaFiles:='''';
                       if length(FTPQuotaMBytes)=0 then FTPQuotaMBytes:='''';
                       if length(FTPUploadBandwidth)=0 then FTPUploadBandwidth:='''';
                       if length(FTPUploadRatio)=0 then FTPUploadRatio:='''';
                       if length(homeDirectory)=0 then homeDirectory:='/home/' + uid;

                       if FTPDownloadBandwidth='none' then FTPDownloadBandwidth:='''';
                       if FTPDownloadRatio='none' then FTPDownloadRatio:='''';
                       if FTPQuotaFiles='none' then FTPQuotaFiles:='''';
                       if FTPQuotaMBytes='none' then FTPQuotaMBytes:='''';
                       if FTPUploadBandwidth='none' then FTPUploadBandwidth:='''';
                       if FTPUploadRatio='none' then FTPUploadRatio:='''';
                       if homeDirectory='non' then homeDirectory:='/home/' + uid;
                       
                      
                      ftplist.Add('(echo '+userPassword+';echo '+userPassword+') |/opt/artica/bin/pure-pw useradd '+ uid+' -u ftpuser -g ftpuser -d '+ homeDirectory +' -t '+ FTPDownloadBandwidth +' -T '+ FTPUploadBandwidth +' -n '+ FTPQuotaFiles +' -N '+FTPQuotaMBytes +' -q '+FTPUploadRatio+ ' -Q '+ FTPDownloadRatio);
                end;
        end;
     end;
end;
//##############################################################################


function Tldap.Load_Dansguardian_MainConfiguration(servername:string):dansguardian_settings;
var
   F                        :dansguardian_settings;
   Myquery                  :string;
   DN                       :string;
   l                        :Tstringlist;
   AttributeNameQ           :string;
   i                        :integer;
   t                        :integer;
begin
  result:=F;
  if not Logged then begin
     if D then writeln('Logged -> false, exit...');
     exit;
  end;
  l:=TstringList.Create;
  DN:='cn=dansguardian,cn=' + servername + ',cn=artica,' + ldap_suffix;
  Myquery:='(objectClass=DansGuardianConf)';


    if not global_ldap.Search(DN, False, Myquery, l) then begin
         if D then writeln('Load_Dansguardian_MainConfiguration:: Failed search ' + Myquery + ' in ' + DN);
         exit;
    end;


    if D then writeln(Myquery+ ' count :',global_ldap.SearchResult.Count);
    if global_ldap.SearchResult.Count=0 then begin
       if D then writeln('Load_Dansguardian_MainConfiguration:: Failed search ' + Myquery + ' in ' + DN);
       exit;
    end;
    
    F.DansGuardianRulesIndex:=TstringList.Create;
    F.DansGuardianRulesIndex.AddStrings(SearchMultipleAttribute(global_ldap.SearchResult,'DansGuardianRulesIndex'));

    

    for i:=0 to global_ldap.SearchResult.Count -1 do begin
    
         F.DansGuardianMasterConf:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'DansGuardianMasterConf');
         F.FilterGroupListConf:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'FilterGroupListConf');
         
         

    end;
     
     
     
     result:=F;

end;
//##############################################################################
function Tldap.Load_Dansguardian_fileconfig(servername:string;ruleindex:string;attribute:string):string;
var
   F                        :fetchmail_settings;
   Myquery                  :string;
   DN                       :string;
   l                        :Tstringlist;
   AttributeNameQ           :string;
   i                        :integer;
   t                        :integer;
begin
  result:='';
  if not Logged then begin
     if D then writeln('Logged -> false, exit...');
     exit;
  end;
  l:=TstringList.Create;
  DN:='cn=' + ruleindex + ',cn=dansguardian,cn=' + servername + ',cn=artica,' + ldap_suffix;
  Myquery:='(objectClass=DansGuardianRules)';


    if not global_ldap.Search(DN, False, Myquery, l) then begin
         if D then writeln('Load_Dansguardian_fileconfig:: Failed search ' + Myquery + ' in ' + DN);
         exit;
    end;


    if D then writeln(Myquery+ ' count :',global_ldap.SearchResult.Count);
    if global_ldap.SearchResult.Count=0 then begin
       if D then writeln('Load_Dansguardian_fileconfig:: Failed search ' + Myquery + ' in ' + DN);
       exit;
    end;


    for i:=0 to global_ldap.SearchResult.Count -1 do begin
         result:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,attribute);
     end;

end;
//##############################################################################



function Tldap.Load_Fetchmail_settings():fetchmail_settings;
var
   F                        :fetchmail_settings;
   Myquery                  :string;
   DN                       :string;
   l                        :Tstringlist;
   AttributeNameQ           :string;
   i                        :integer;
   t                        :integer;
begin
  result:=F;
  if not Logged then begin
     if D then writeln('Logged -> false, exit...');
     exit;
  end;
  l:=TstringList.Create;
  DN:='cn=fetchmail,cn=artica,' + ldap_suffix;
  Myquery:='(objectClass=ArticaFetchmail)';
  
  
    if not global_ldap.Search(DN, False, Myquery, l) then begin
         if D then writeln('Load_Fetchmail_settings:: Failed search ' + Myquery + ' in ' + DN);
         exit;
    end;
    
    
    if D then writeln(Myquery+ ' count :',global_ldap.SearchResult.Count);
    if global_ldap.SearchResult.Count=0 then begin
       if D then writeln('Load_Fetchmail_settings:: Failed search ' + Myquery + ' in ' + DN);
       exit;
    end;

  
    for i:=0 to global_ldap.SearchResult.Count -1 do begin
         F.fetchmailrc:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'fetchmailrc');
         F.FetchGetLive:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'FetchGetLive');
     end;
     result:=F;
end;
//##############################################################################
function Tldap.Load_inadyn_settings():inadyn_settings;
var
   F                        :inadyn_settings;
   Myquery                  :string;
   DN                       :string;
   l                        :Tstringlist;
   AttributeNameQ           :string;
   i                        :integer;
   t                        :integer;
begin
 F.ArticaInadynPoolRule:='0';
 F.proxy_settings:=Load_proxy_settings();
 F.ArticaInadynRule:=TstringList.Create;
 result:=F;
  if not Logged then begin
     if D then writeln('Load_inadyn_settings::Logged -> false, exit...');
     exit;
  end;
  l:=TstringList.Create;
  DN:='cn=inadyn,cn=artica,' + ldap_suffix;
  Myquery:='(objectClass=ArticaInadyn)';


    if not global_ldap.Search(DN, False, Myquery, l) then begin
         if D then writeln('Load_inadyn_settings:: Failed search ' + Myquery + ' in ' + DN);
         exit;
    end;


    if D then writeln(Myquery+ ' count :',global_ldap.SearchResult.Count);
    if global_ldap.SearchResult.Count=0 then begin
       if D then writeln('Load_inadyn_settings:: Failed search ' + Myquery + ' in ' + DN);
       exit;
    end;
    
    F.ArticaInadynRule.AddStrings(SearchMultipleAttribute(global_ldap.SearchResult,'ArticaInadynRule'));

    for i:=0 to global_ldap.SearchResult.Count -1 do begin
         F.ArticaInadynPoolRule:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'ArticaInadynPoolRule');

     end;
     result:=F;

end;


//##############################################################################
function Tldap.Load_Kav4proxy_settings():string;
var
   Myquery                  :string;
   DN                       :string;
   l                        :Tstringlist;
   AttributeNameQ           :string;
   i                        :integer;
   t                        :integer;
begin


 result:='';
  if not Logged then begin
     if D then writeln('Logged -> false, exit...');
     exit;
  end;
  l:=TstringList.Create;
  DN:='cn=kav4proxy,cn=artica,' + ldap_suffix;
  Myquery:='(objectClass=Kav4ProxyClass)';

    if not global_ldap.Search(DN, False, Myquery, l) then begin
         if D then writeln('Load_Kav4proxy_settings:: Failed search ' + Myquery + ' in ' + DN);
         exit;
    end;


    if D then writeln(Myquery+ ' count :',global_ldap.SearchResult.Count);
    if global_ldap.SearchResult.Count=0 then begin
       if D then writeln('Load_Kav4proxy_settings:: Failed search ' + Myquery + ' in ' + DN);
       exit;
    end;



    for i:=0 to global_ldap.SearchResult.Count -1 do begin
         result:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'Kav4ProxyMainConf');

     end;
end;

//##############################################################################
function Tldap.ArticaMailAddonsLevel():string;
var
   Myquery                  :string;
   DN                       :string;
   l                        :Tstringlist;
   AttributeNameQ           :string;
   i                        :integer;
   MLG                      :Tlogs;
begin

 result:='';
  if not Logged then begin
     if D then writeln('Logged -> false, exit...');
     exit;
  end;
  
 MLG:=Tlogs.Create;
 l:=TstringList.Create;
  DN:='cn=artica,' + ldap_suffix;
  Myquery:='(objectClass=ArticaSettings)';


    if not global_ldap.Search(DN, False, Myquery, l) then begin
         if D then writeln('ArticaMailAddonsLevel:: Failed search ' + Myquery + ' in ' + DN);
         exit;
    end;

 if D then writeln(Myquery+ ' count :',global_ldap.SearchResult.Count);
    if global_ldap.SearchResult.Count=0 then begin
       if D then writeln('ArticaMailAddonsLevel:: Failed search ' + Myquery + ' in ' + DN);
       exit;
    end;

    for i:=0 to global_ldap.SearchResult.Count -1 do begin
         result:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'ArticaMailAddonsLevel');
    end;
    MLG.logs('ArticaMailAddonsLevel:: result:=' +result);
    if length(result)=0 then result:='0';

end;
//##############################################################################
function Tldap.Load_proxy_settings():http_proxy_settings;
         const
            CR = #$0d;
            LF = #$0a;
            CRLF = CR + LF;
var
   F                        :http_proxy_settings;
   Myquery                  :string;
   DN                       :string;
   l                        :Tstringlist;
   AttributeNameQ           :string;
   i                        :integer;
   t                        :integer;
begin

 result:=F;
  if not Logged then begin
     if D then writeln('Logged -> false, exit...');
     exit;
  end;
  l:=TstringList.Create;
  DN:='cn=http_proxy,cn=artica,' + ldap_suffix;
  Myquery:='(objectClass=ArticaProxySettings)';


    if not global_ldap.Search(DN, False, Myquery, l) then begin
         if D then writeln('Load_proxy_settings:: Failed search ' + Myquery + ' in ' + DN);
         exit;
    end;


    if D then writeln(Myquery+ ' count :',global_ldap.SearchResult.Count);
    if global_ldap.SearchResult.Count=0 then begin
       if D then writeln('Load_proxy_settings:: Failed search ' + Myquery + ' in ' + DN);
       exit;
    end;
    
    for i:=0 to global_ldap.SearchResult.Count -1 do begin
         if D then writeln('############# Entry :',i);
         F.ArticaProxyServerName:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'ArticaProxyServerName');
         F.ArticaProxyServerPort:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'ArticaProxyServerPort');
         F.ArticaProxyServerUsername:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'ArticaProxyServerUsername');
         F.ArticaProxyServerUserPassword:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'ArticaProxyServerUserPassword');
         F.ArticaProxyServerEnabled:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'ArticaProxyServerEnabled');
         F.ArticaMailAddonsLevel:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'ArticaMailAddonsLevel');


     end;
if F.ArticaProxyServerUsername='nil' then F.ArticaProxyServerUsername:='';
if F.ArticaProxyServerUserPassword='nil' then F.ArticaProxyServerUserPassword:='';

F.IniSettings:=CRLF+'[PROXY]' + CRLF + 'servername=' +F.ArticaProxyServerName + CRLF;
F.IniSettings:=F.IniSettings+ 'serverport=' +F.ArticaProxyServerPort + CRLF;
F.IniSettings:=F.IniSettings+ 'username=' +F.ArticaProxyServerUsername + CRLF;
F.IniSettings:=F.IniSettings+ 'password=' +F.ArticaProxyServerUserPassword + CRLF;
F.IniSettings:=F.IniSettings+ 'enabled=' +F.ArticaProxyServerEnabled + CRLF;

result:=F;

end;


procedure Tldap.CreateMailManBranch();
  var
  ldap: TLDAPsend;
  LDAPAttributeList: TLDAPAttributeList;
  LDAPAttribute: TLDAPAttribute;
  attr: TLDAPAttribute;
begin

 ldap :=  TLDAPSend.Create;
     ldap.TargetHost := ldap_server;
     ldap.TargetPort := '389';
     ldap.UserName := 'cn=' +ldap_admin + ',' + ldap_suffix;
     ldap.Password := ldap_password;
     ldap.Version := 3;
     ldap.FullSSL := false;


     if not ldap.Login then begin
        ldap.Free;
        exit();
     end;

    if not ldap.Bind then begin
       writeln('CreateMailManBranch:: failed bind "' + ldap.UserName + '"');
       ldap.free;
       exit;
    end;
            LDAPAttributeList := TLDAPAttributeList.Create;
            LDAPAttribute:= LDAPAttributeList.Add;
            LDAPAttribute.AttributeName:='cn';
            LDAPAttribute.Add('mailman');

            LDAPAttribute:= LDAPAttributeList.Add;
            LDAPAttribute.AttributeName:='ObjectClass';
            LDAPAttribute.Add('top');
            LDAPAttribute.Add('PostFixStructuralClass');


            if not ldap.Add('cn=mailman,cn=artica,'+ldap_suffix,LDAPAttributeList) then begin
               if ldap.ResultCode<>68 then begin
                  writeln('Create_mailmain_list() -> Error unable to create branch cn=artica,cn=mailman,'+ldap_suffix);
                  writeln('Error number ' + IntToStr(ldap.ResultCode) + ' ' +  ldap.ResultString);
               end;

            end;
            
  ldap.Logout;
     ldap.free;
            
end;








procedure Tldap.CreateArticaUser();
  var
  ldap: TLDAPsend;
  LDAPAttributeList: TLDAPAttributeList;
  LDAPAttribute: TLDAPAttribute;
  attr: TLDAPAttribute;
  dn:string;
  i:integer;
  z:integer;
  RegExpr:TRegExpr;
begin
     ldap :=  TLDAPSend.Create;
     ldap.TargetHost := ldap_server;
     ldap.TargetPort := '389';
     ldap.UserName := 'cn=' +ldap_admin + ',' + ldap_suffix;
     ldap.Password := ldap_password;
     ldap.Version := 3;
     ldap.FullSSL := false;


     if not ldap.Login then begin
        ldap.Free;
        exit();
     end;

    if not ldap.Bind then begin
       writeln('CreateArticaUser:: failed bind "' + ldap.UserName + '"');
       ldap.free;
       exit;
    end;
      dn:='cn=artica,' +  ldap_suffix;


     LDAPAttributeList := TLDAPAttributeList.Create;


     LDAPAttribute:= LDAPAttributeList.Add;
     LDAPAttribute.AttributeName:='ObjectClass';
     LDAPAttribute.Add('organizationalRole');
     LDAPAttribute.Add('ArticaSettings');
     LDAPAttribute.Add('top');

     
     LDAPAttribute:= LDAPAttributeList.Add;
     LDAPAttribute.AttributeName:='cn';
     LDAPAttribute.Add('artica');

     LDAPAttribute:= LDAPAttributeList.Add;
     LDAPAttribute.AttributeName:='ArticaWebRootURI';
     LDAPAttribute.Add('http://127.0.0.1/artica-postfix');

     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='already exists';
     if not ldap.Add(dn,LDAPAttributeList) then begin
        if not RegExpr.Exec(ldap.ResultString) then begin
        writeln(ldap.ResultString);
        DumpAttributes(LDAPAttributeList);
        end;
     end;
     RegExpr.free;
     ldap.Logout;
     ldap.free;
     
end;



//##############################################################################
procedure Tldap.DumpAttributes(LDAPAttributeList:TLDAPAttributeList);
var i,z:integer;
begin

     for i:=0 to LDAPAttributeList.Count -1 do begin
         for z:=0 to  LDAPAttributeList.Items[i].Count -1 do begin
         writeln(LDAPAttributeList.Items[i].AttributeName + '[' + intToStr(z) + ']=' + LDAPAttributeList.Items[i].Strings[z]);
         end;
     end;
end;
//##############################################################################
procedure Tldap.DeleteCyrusUser();
  var
  ldap: TLDAPsend;
  LDAPAttributeList: TLDAPAttributeList;
  LDAPAttribute: TLDAPAttribute;
  attr: TLDAPAttribute;
  dn:string;
  i:integer;
  z:integer;
  RegExpr:TRegExpr;
  cyrus_admin:string;
  cyrus_password:string;
begin
ldap :=  TLDAPSend.Create;
     ldap.TargetHost := ldap_server;
     ldap.TargetPort := '389';
     ldap.UserName := 'cn=' +ldap_admin + ',' + ldap_suffix;
     ldap.Password := ldap_password;
     ldap.Version := 3;
     ldap.FullSSL := false;

     cyrus_admin:=get_LDAP('cyrus_admin');
     cyrus_password:=get_LDAP('cyrus_password');

     if length(cyrus_admin)=0 then cyrus_admin:='cyrus';
     if length(cyrus_password)=0 then cyrus_password:=ldap_password;



     if not ldap.Login then begin
        ldap.Free;
        exit();
     end;

    if not ldap.Bind then begin
       writeln('failed bind');
       exit;
    end;
     dn:='cn=' + cyrus_admin + ',' +  ldap_suffix;
     
     if ldap.Delete(dn) then writeln('success delete "' + cyrus_admin + '" cyrus-imapd admin');
     
     
end;


function Tldap.CreateCyrusUser():boolean;
  var
  ldap: TLDAPsend;
  LDAPAttributeList: TLDAPAttributeList;
  LDAPAttribute: TLDAPAttribute;
  attr: TLDAPAttribute;
  dn:string;
  i:integer;
  z:integer;
  RegExpr:TRegExpr;
  cyrus_admin:string;
  cyrus_password:string;
begin
     ldap :=  TLDAPSend.Create;
     ldap.TargetHost := ldap_server;
     ldap.TargetPort := '389';
     ldap.UserName := 'cn=' +ldap_admin + ',' + ldap_suffix;
     ldap.Password := ldap_password;
     ldap.Version := 3;
     ldap.FullSSL := false;

     cyrus_admin:=get_LDAP('cyrus_admin');
     cyrus_password:=get_LDAP('cyrus_password');

     if length(cyrus_admin)=0 then cyrus_admin:='cyrus';
     if length(cyrus_password)=0 then cyrus_password:=ldap_password;



     if not ldap.Login then begin
        ldap.Free;
        exit();
     end;
     
    if not ldap.Bind then begin
       writeln('failed bind');
       exit;
    end;
     dn:='cn=' + cyrus_admin + ',' +  ldap_suffix;


     
     LDAPAttributeList := TLDAPAttributeList.Create;
     
     
     LDAPAttribute:= LDAPAttributeList.Add;
     LDAPAttribute.AttributeName:='ObjectClass';
     LDAPAttribute.Add('top');
     LDAPAttribute.Add('inetOrgPerson');


     LDAPAttribute:= LDAPAttributeList.Add;
     LDAPAttribute.AttributeName:='cn';
     LDAPAttribute.Add(cyrus_admin);
     
     LDAPAttribute:= LDAPAttributeList.Add;
     LDAPAttribute.AttributeName:='sn';
     LDAPAttribute.Add(cyrus_admin);
     
     LDAPAttribute:= LDAPAttributeList.Add;
     LDAPAttribute.AttributeName:='userPassword';
     LDAPAttribute.Add(ldap_password);
     
     
     LDAPAttribute:= LDAPAttributeList.Add;
     LDAPAttribute.AttributeName:='uid';
     LDAPAttribute.Add(cyrus_admin);

     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='already exists';
     if not ldap.Add(dn,LDAPAttributeList) then begin
        if not RegExpr.Exec(ldap.ResultString) then begin
        writeln(ldap.ResultString);
        DumpAttributes(LDAPAttributeList);
        end;
     end else begin
          writeln('Starting......: Create cyrus-imapd admin "' + cyrus_admin + '" success');
     end;
        
     ldap.Logout;
     ldap.free;

     


end;
//##############################################################################
function Tldap.ParseSuffix():boolean;
var
   ldap:TLDAPSend;
   l:TStringList;
   i,t,u:integer;
   D,Z:boolean;
   value_result:string;
   AttributeNameQ:string;
   USER_DN:string;
   RES:ldapinfos;
   Query_string:string;
   return_attribute:string;
   DN_ROOT:string;
   RegExpr:TRegExpr;
begin
  D:=false;
  result:=false;
     D:=COMMANDLINE_PARAMETERS('debug');
     ldap :=  TLDAPSend.Create;
     ldap.TargetHost := '127.0.0.1';
     ldap.TargetPort := '389';
     ldap.UserName := 'cn=' + ldap_admin + ',' + ldap_suffix;
     ldap.Password := ldap_password;
     ldap.Version := 3;
     ldap.FullSSL := false;

     if not ldap.Login then begin
        ldap.Free;
        exit();
     end;


   if not ldap.Bind then begin
      writeln('failed logon with "' + ldap.UserName + '"');
      exit;
   end;
    l:=TstringList.Create;
    l.Add('*');


    // ***************************************************************** user

   result:=false;
    if ldap.Search(ldap_suffix, False, '(objectclass=dcObject)', l) then begin
       if ldap.SearchResult.Count>0 then result:=true;

    end;


end;





//##############################################################################
procedure Tldap.CreateSuffix();
var
   ldap:TLDAPSend;
   l:TStringList;
   i,t,u:integer;
   D,Z:boolean;
   value_result:string;
   AttributeNameQ:string;
   USER_DN:string;
   RES:ldapinfos;
   Query_string:string;
   newdn:string;
   DN_ROOT:string;
   RegExpr:TRegExpr;
   tbl:TStringDynArray;
   LOGS:Tlogs;
begin
   USER_DN:=ldap_suffix;
   LOGS:=Tlogs.Create;

   if ParseSuffix() then exit;
   tbl:=Explode(',',USER_DN);
   newdn:=tbl[0]+ ','+ tbl[1];
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='dc=(.+)';
   RegExpr.Exec(tbl[0]);
   
   for i:=1 to  length(tbl)-1 do begin
         LOGS.logs('CreateSuffix() ->Create ' +newdn );

          if not Create_dcObject(newdn,RegExpr.Match[1]) then begin
             writeln('CreateSuffix() FAILED create ' + newdn);
             break;
          end;
          newdn:=newdn + ',' + tbl[i];
   end;
   

    
    
    
   
   

end;
//##############################################################################
function Tldap.Create_dcObject(dn:string;name:string):boolean;
  var
  ldap: TLDAPsend;
  LDAPAttributeList: TLDAPAttributeList;
  LDAPAttribute: TLDAPAttribute;
  attr: TLDAPAttribute;

begin



     ldap :=  TLDAPSend.Create;
     ldap.TargetHost := ldap_server;
     ldap.TargetPort := '389';
     ldap.UserName := 'cn=' +ldap_admin + ',' + ldap_suffix;
     ldap.Password := ldap_password;
     ldap.Version := 3;
     ldap.FullSSL := false;


     if not ldap.Login then begin
        ldap.Free;
        exit();
     end;

    if not ldap.Bind then begin
       writeln('failed bind "' + ldap.UserName + '"');
       exit;
    end;
    
{dn: dc=my-domain,dc=com
objectClass: top
objectClass: organization
objectClass: dcObject
o: my-domain
dc: my-domain
}

     LDAPAttributeList := TLDAPAttributeList.Create;


     LDAPAttribute:= LDAPAttributeList.Add;
     LDAPAttribute.AttributeName:='ObjectClass';
     LDAPAttribute.Add('top');
     LDAPAttribute.Add('dcObject');
     LDAPAttribute.Add('organization');

     
     LDAPAttribute:= LDAPAttributeList.Add;
     LDAPAttribute.AttributeName:='o';
     LDAPAttribute.Add(name);

     LDAPAttribute:= LDAPAttributeList.Add;
     LDAPAttribute.AttributeName:='dc';
     LDAPAttribute.Add(name);
     
     result:=ldap.Add(dn,LDAPAttributeList);
     if not result then writeln(name + ': ' + ldap.ResultString);
     ldap.free;

end;




function Tldap.LoadAllOu():string;
var
right_email,Myquery,resultats:string;
i,t,u:integer;

begin

   Myquery:='(&(ObjectClass=organizationalUnit)(ou=*))';
   resultats:=Query(MyQuery,'ou');
   exit(resultats);
end;
//##############################################################################
function Tldap.ArticaDenyNoMXRecordsOu(Ou:string):string;
var
right_email,Myquery,resultats:string;
i,t,u:integer;

begin

   Myquery:='(&(ObjectClass=organizationalUnit)(ou=' + ou + '))';
   resultats:=Query(MyQuery,'ArticaDenyNoMXRecords');
   resultats:=trim(resultats);
   if length(resultats)=0 then resultats:='pass';
   exit(resultats);
   
end;
//##############################################################################
function Tldap.QuarantineMaxDayByOu(Ou:string):string;
var
right_email,Myquery,resultats:string;
i,t,u:integer;

begin

   Myquery:='(&(ObjectClass=organizationalUnit)(ou=' + ou + '))';
   resultats:=Query(MyQuery,'ArticaMaxDayQuarantine');
   exit(trim(resultats));
end;
//##############################################################################
function Tldap.IsOuDomainBlackListed(Ou:string;domain:string):boolean;
var
right_email,Myquery,resultats:string;
i,t,u:integer;

begin
   result:=false;
   SEARCH_DN:='cn=blackListedDomains,ou=' + ou + ',' + ldap_suffix;
   Myquery:='(&(ObjectClass=DomainsBlackListOu)(cn='+domain+'))';
   resultats:=trim(Query(MyQuery,'cn'));
   if length(resultats)>0 then exit(true);
   
end;
//##############################################################################
function Tldap.FackedSenderParameters(Ou:string):string;
var
resultats,Myquery:string;
begin
   result:='pass';
   SEARCH_DN:='ou=' + ou + ',' + ldap_suffix;
   Myquery:='(&(ObjectClass=ArticaSettings)(ArticaFakedMailFrom=*))';
   resultats:=trim(Query(MyQuery,'ArticaFakedMailFrom'));
   if length(resultats)=0 then result:='pass' else result:=resultats;

end;
//##############################################################################
function Tldap.ArticaMaxSubQueueNumberParameter():integer;
var
resultats,Myquery:string;
begin
   result:=5;
   SEARCH_DN:='cn=artica,' + ldap_suffix;
   Myquery:='(&(ObjectClass=ArticaSettings)(ArticaMaxSubQueueNumber=*))';
   resultats:=trim(Query(MyQuery,'ArticaMaxSubQueueNumber'));
   if length(resultats)=0 then resultats:='5';
   result:=StrToInt(resultats);
end;
//##############################################################################





function Tldap.LoadASRules(email:string):string;
         const
            CR = #$0d;
            LF = #$0a;
            CRLF = CR + LF;
var
RegExpr:TRegExpr;
right_email,Myquery,resultats:string;
i,t,u:integer;

begin
     right_email:=EmailFromaliase(email);
     D:=COMMANDLINE_PARAMETERS('asrules=');
     if D then writeln('Get list of Kaspersky antispam rules for "' + right_email + '"');
     Myquery:='(&(ObjectClass=ArticaSettings)(mail=' +right_email + '))';
     resultats:=Query(MyQuery,'KasperkyASDatasRules');
     if trim(resultats)='DEFAULT' then begin
          RegExpr:=TRegExpr.Create;
          RegExpr.Expression:='ou=(.+?),.+';
          if RegExpr.Exec(DN_ROOT) then resultats:=LoadOUASRules(RegExpr.Match[1]);
     end;
     if trim(resultats)='DEFAULT' then begin
            resultats:='detection_rate="45"' + CRLF;
            resultats:=resultats+ 'action_quarantine="1"' + CRLF;
            resultats:=resultats+ 'action_killmail="1"' + CRLF;
            resultats:=resultats+ 'action_prepend="0"' + CRLF;
            resultats:=resultats+ 'second_rate="90"' + CRLF;
            resultats:=resultats+ 'second_quarantine="0"' + CRLF;
            resultats:=resultats+ 'second_killmail="1"' + CRLF;
            resultats:=resultats+ 'second_prepend="0"' + CRLF;
            
     
     end;
     
     if D then writeln(resultats);
     exit(resultats);
end;
//##############################################################################
function Tldap.OU_From_eMail(email:string):string;
var
   RegExpr:TRegExpr;
   right_email,Myquery,resultats:string;
   i,t,u:integer;

   F:boolean;
begin
     D:=COMMANDLINE_PARAMETERS('whereis=');
     F:=COMMANDLINE_PARAMETERS('debug');

    if F then writeln('OU_From_eMail: ' + email );
    right_email:=EmailFromaliase(email);
    if D then writeln('Where is "' + right_email + '" ?');
    Myquery:='(&(ObjectClass=userAccount)(mail=' +right_email + '))';
    if F then writeln('OU_From_eMail: ' + Myquery );
    resultats:=Query(MyQuery,'ObjectName');
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='ou=(.+?),.+';
    if RegExpr.Exec(resultats) then result:=RegExpr.Match[1];
end;


//##############################################################################
function Tldap.LoadAVRules(email:string):string;
         const
            CR = #$0d;
            LF = #$0a;
            CRLF = CR + LF;
var
RegExpr:TRegExpr;
right_email,Myquery,resultats,ou:string;
i,t,u:integer;

begin
     right_email:=EmailFromaliase(email);
     ou:=OU_From_eMail(right_email);
     D:=COMMANDLINE_PARAMETERS('avrules=');
     if D then writeln('Get list of Kaspersky antivirus rules for "' + ou + '"');
     Myquery:='(&(ObjectClass=ArticaSettings)(ou=' +ou + '))';
     resultats:=Query(MyQuery,'KasperkyAVScanningDatas');
     if trim(resultats)='DEFAULT' then begin
     resultats:='NotifyFromAddress="postmaster"' + CRLF;
     resultats:=resultats+ 'DeleteDetectedVirus="1"' + CRLF;
     resultats:=resultats+ 'NotifyFrom="1"' + CRLF;
     resultats:=resultats+ 'NotifyTo="1"' + CRLF;
     resultats:=resultats+ 'ArchiveMail="1"' + CRLF;
     resultats:=resultats+ 'NotifyMessageSubject="%SUBJECT%"' + CRLF;
     resultats:=resultats+ '<NotifyMessageTemplate><p><font face="arial,helvetica,sans-serif" size="4" color="#ff0000">Warning !!</font></p>';
     resultats:=resultats+ '<p>The message %SUBJECT% sended by %SENDER% For %MAILTO% was infected please, try to send your messages without any viruses.</p><p><strong>Virus detected</strong> :</p><blockquote><p>%VIRUS% !!!<br /> </p></blockquote></NotifyMessageTemplate>' + CRLF;
     end;

     if D then writeln(resultats);
     exit(resultats);
end;
//##############################################################################
function Tldap.LoadOUASRules(ou:string):string;
var

right_email,Myquery,resultats:string;


begin

     D:=COMMANDLINE_PARAMETERS('asrules=');
     if D then writeln('Get list of Kaspersky antispam rules for "' + ou + '"');
     Myquery:='(&(ObjectClass=ArticaSettings)(ou=' +ou + '))';
     resultats:=Query(MyQuery,'KasperkyASDatasRules');
     exit(resultats);
end;


 function Tldap.Ldap_infos(email:string):ldapinfos;
         const
            CR = #$0d;
            LF = #$0a;
            CRLF = CR + LF;
var
   ldap:TLDAPSend;
   l:TStringList;
   i,t:integer;
   D,Z:boolean;
   value_result:string;
   AttributeNameQ:string;
   USER_DN:string;
   RES:ldapinfos;
   Query_string:string;
   return_attribute:string;
   DN_ROOT:string;
   RegExpr:TRegExpr;
begin
     D:=false;
     D:=COMMANDLINE_PARAMETERS('debug');
     Z:=COMMANDLINE_PARAMETERS('q=');
     ldap :=  TLDAPSend.Create;
     ldap.TargetHost := '127.0.0.1';
     ldap.TargetPort := '389';
     ldap.UserName := ldap_admin;
     ldap.Password := ldap_password;
     ldap.Version := 3;
     ldap.FullSSL := false;

     if not ldap.Login then begin
        ldap.Free;
        exit();
     end;

    RES.RBL_SERVERS:=TStringList.Create;
    RES.BOGOFILTER_ROBOTS:=TStringList.Create;
    RES.WhiteList:=TStringList.Create;
    
    

    result:=RES;
    ldap.Bind;
    l:=TstringList.Create;
    
    
    
    // ***************************************************************** user
    
    
    ldap.Search(ldap_suffix, False, '(&(objectclass=userAccount)(mailAlias=' + email+'))', l);
    if D then writeln('(&(objectclass=userAccount)(mailAlias=' + email+')) count :',ldap.SearchResult.Count);
    if ldap.SearchResult.Count>0 then begin
       if D then writeln('ldap.SearchResult.Items[0].ObjectName=',ldap.SearchResult.Items[0].ObjectName);
       RES.user_dn:=ldap.SearchResult.Items[0].ObjectName;
    end else begin
        ldap.Search(ldap_suffix, False, '(&(objectclass=userAccount)(mail=' + email+'))', l);
        if ldap.SearchResult.Count>0 then RES.user_dn:=ldap.SearchResult.Items[0].ObjectName;
    end;

    if length(RES.user_dn)=0 then begin
          ldap.Search(ldap_suffix, False, '(&(objectclass=userAccount)(SenderCanonical=' + email+'))', l);
          if ldap.SearchResult.Count>0 then RES.user_dn:=ldap.SearchResult.Items[0].ObjectName;
    end;


    if length(RES.user_dn)=0 then begin
        ldap.Logout;
       ldap.Free;
       exit(res);
    end;
    
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='.+?ou=(.+?),';
    if RegExpr.Exec(RES.user_dn) then RES.user_ou:=RegExpr.Match[1];

    if length(RES.user_ou)=0 then begin
        ldap.Logout;
       ldap.Free;
       exit(res);
    end;
    
    RES.uid:=SearchSingleAttribute(ldap.SearchResult.Items[0].Attributes,'uid');

     for i:=0 to ldap.SearchResult.Count -1 do begin
       for t:=0 to ldap.SearchResult.Items[i].Attributes.Count -1 do begin
                AttributeNameQ:=LowerCase(ldap.SearchResult.Items[i].Attributes[t].AttributeName);
                if AttributeNameQ=LowerCase('KasperkyASDatasAllow') then RES.WhiteList.AddStrings(ParseResultInStringList(ldap.SearchResult.Items[i].Attributes.Items[t]));
        end;
     
     end;
    
    
    // *****************************************************************




    SEARCH_DN:='ou='+RES.user_ou + ',' + ldap_suffix;
    
    
    if ldap.Search(SEARCH_DN, False, '(&(objectclass=ArticaBogoFilterAdmin)(BogoFilterMailType=*))', l) then begin
        for i:=0 to ldap.SearchResult.Count -1 do begin
             RES.BOGOFILTER_ROBOTS.Add(SearchSingleAttribute(ldap.SearchResult.Items[i].Attributes,'mail') + ';' +SearchSingleAttribute(ldap.SearchResult.Items[i].Attributes,'BogoFilterMailType'));
        end;
    end;
    
    
    
    

    l.Add('*');
    Query_string:='(&(ObjectClass=ArticaSettings)(ou=' + RES.user_ou + '))';

    
    if not ldap.Search(SEARCH_DN, False, Query_string, l) then begin
       if D then writeln('Ldap_infos::  failed "' + ldap.FullResult + '"');
       ldap.Logout;
       ldap.Free;
       exit;
    end;

 if D then writeln('Ldap_infos:: Results Count :' + IntToStr(ldap.SearchResult.Count));




 if ldap.SearchResult.Count=0 then begin
     if D then writeln('Ldap_infos::  no results...');
       ldap.Logout;
       ldap.Free;
       exit();
 end;

 if Z then writeln(CRLF +CRLF +'************************************************');


 for i:=0 to ldap.SearchResult.Count -1 do begin
      if D then writeln('QUERY:: ObjectName.......: "' +ldap.SearchResult.Items[i].ObjectName + '"');
      DN_ROOT:=ldap.SearchResult.Items[i].ObjectName;
      if D then writeln('QUERY:: Count attributes.: ' +IntToStr(ldap.SearchResult.Items[i].Attributes.Count));
      

      RES.RBL_SERVER_ACTION:=SearchSingleAttribute(ldap.SearchResult.Items[i].Attributes,'rblserversaction');
      
      //----------- bogofilter ------------------------------------------------------------------------------
      RES.BOGOFILTER_ACTION:=SearchSingleAttribute(ldap.SearchResult.Items[i].Attributes,'BogoFilterAction');
      if length(RES.BOGOFILTER_ACTION)=0 then RES.BOGOFILTER_ACTION:='90;prepend;*** SPAM ***';
      //-----------------------------------------------------------------------------------------------------

      //----------- Trust users ------------------------------------------------------------------------------
      RES.TrustMyUsers:=SearchSingleAttribute(ldap.SearchResult.Items[i].Attributes,'OuTrustMyUSers');
      if length(RES.TrustMyUsers)=0 then RES.TrustMyUsers:='yes';
      //-----------------------------------------------------------------------------------------------------
      


      for t:=0 to ldap.SearchResult.Items[i].Attributes.Count -1 do begin

               AttributeNameQ:=LowerCase(ldap.SearchResult.Items[i].Attributes[t].AttributeName);
               if D then writeln('QUERY:: Attribute name[' + IntToStr(t) + '].......: "' + AttributeNameQ + '"');

               if AttributeNameQ='rblservers' then RES.RBL_SERVERS.AddStrings(ParseResultInStringList(ldap.SearchResult.Items[i].Attributes.Items[t]));
               
               
               
      end;

 end;

     if Z then writeln();
     if Z then writeln('************************************************');
     if D then writeln('QUERY:: logout');
     

     RegExpr.Expression:='([0-9]+);([a-z]+);(.+)';
     if RegExpr.Exec(RES.BOGOFILTER_ACTION) then begin
           RES.BOGOFILTER_PARAM.max_rate:=StrToInt(RegExpr.Match[1]);
           RES.BOGOFILTER_PARAM.action:=RegExpr.Match[2];
           RES.BOGOFILTER_PARAM.prepend:=RegExpr.Match[3];
     end;
     
     result:=RES;
     RegExpr.Free;
     ldap.Logout;
     ldap.Free;

end;
 //##############################################################################
 
 
 
 
function Tldap.ParseResultInStringList(Items:TLDAPAttribute):TStringList;
var

   i:integer;
   A:TstringList;
begin
     D:=false;
     D:=COMMANDLINE_PARAMETERS('debug');
   A:=TstringList.Create;

   if D then writeln('ParseResultInStringList:: Count items......: ' +IntToStr(Items.Count));
   for i:=0 to Items.Count -1 do begin
       A.Add(Items.Strings[i]);
   end;
exit(A);
   
end;
 //##############################################################################
function Tldap.SearchSingleAttribute(Items:TLDAPAttributeList;SearchAttribute:string):string;
var

   i:integer;
   AttributeName:string;
begin
     D:=false;
     D:=COMMANDLINE_PARAMETERS('debug');
   if D then writeln('...................................................................');
   if D then writeln('SearchSingleAttribute:: Count items......: ' +IntToStr(Items.Count));
   if D then writeln('SearchSingleAttribute:: Must found.......: ', SearchAttribute);
   
   for i:=0 to Items.Count -1 do begin
            AttributeName:=LowerCase(Items[i].AttributeName);
            if D then writeln('SearchSingleAttribute:: AttributeName......: ' +AttributeName,'?=>',LowerCase(SearchAttribute));
            if LowerCase(SearchAttribute)=AttributeName then begin

                    result:=Items[i].Strings[0];
                    if D then writeln('FOUND !!! "',SearchAttribute,'" ', chr(9) + result);
                    break;
            end;
            
            
   end;
   
end;
 //##############################################################################
 function Tldap.SearchSingleData(Items:TLDAPResultList;SearchAttribute:string):string;
var

   i,z,u             :integer;
   AttributeName     :string;
   l                 :TstringList;
begin
     D:=false;
     D:=COMMANDLINE_PARAMETERS('debug');
     l:=TstringList.Create;


   if D then writeln('SearchMultipleAttribute:: Count items......: ' +IntToStr(Items.Count));
   for i:=0 to Items.Count -1 do begin
       for z:=0 to Items[i].Attributes.Count -1 do begin
            AttributeName:=LowerCase(Items.Items[i].Attributes[z].AttributeName);
            if D then writeln('SearchMultipleAttribute:: AttributeName......: ' +AttributeName);

            if LowerCase(SearchAttribute)=AttributeName then begin
              result:=Items.Items[i].Attributes[z].Strings[0];
              break;
            end;
        end;
   end;

end;
 //##############################################################################

 //##############################################################################
 function Tldap.SearchMultipleAttribute(Items:TLDAPResultList;SearchAttribute:string):Tstringlist;
var

   i,z,u             :integer;
   AttributeName     :string;
   l                 :TstringList;
begin
     D:=false;
     D:=COMMANDLINE_PARAMETERS('debug');
     l:=TstringList.Create;
     
     
   if D then writeln('SearchMultipleAttribute:: Count items......: ' +IntToStr(Items.Count));
   for i:=0 to Items.Count -1 do begin
       for z:=0 to Items[i].Attributes.Count -1 do begin
            AttributeName:=LowerCase(Items.Items[i].Attributes[z].AttributeName);
            if D then writeln('SearchMultipleAttribute:: AttributeName......: ' +AttributeName);

            if LowerCase(SearchAttribute)=AttributeName then begin
               for u:=0 to Items.Items[i].Attributes[z].Count-1 do begin
                    if D then writeln('SearchMultipleAttribute::' + AttributeName + '=' + Items.Items[i].Attributes[z].Strings[u]);
                    l.Add(Items.Items[i].Attributes[z].Strings[u]);
               end;
            end;
        end;
   end;

result:=l;
exit();

end;
 //##############################################################################
function Tldap.Query(Query_string:string;return_attribute:string):string;
         const
            CR = #$0d;
            LF = #$0a;
            CRLF = CR + LF;
var  ldap:TLDAPSend;
l:TStringList;
i,t,u:integer;
D,Z:boolean;
value_result:string;
AttributeNameQ:string;
begin
D:=false;
D:=COMMANDLINE_PARAMETERS('debug');
Z:=COMMANDLINE_PARAMETERS('q=');
ldap :=  TLDAPSend.Create;
     ldap.TargetHost := '127.0.0.1';
     ldap.TargetPort := '389';
     ldap.UserName := ldap_admin;
     ldap.Password := ldap_password;
     ldap.Version := 3;
     ldap.FullSSL := false;
     
     if not ldap.Login then begin
        ldap.Free;
        exit();
     end;

    return_attribute:=LowerCase(return_attribute);
    ldap.Bind;
    l:=TstringList.Create;
    l.Add('*');
    if length(SEARCH_DN)=0 then SEARCH_DN:=ldap_suffix;

    if D then writeln('QUERY:: "' + Query_string  + '" find attr:' + return_attribute);
    if D then writeln('QUERY:: IN DN "' + SEARCH_DN  + '"');

    if not ldap.Search(SEARCH_DN, False, Query_string, l) then begin
       if D then writeln('QUERY::  failed "' + ldap.FullResult + '"');
       ldap.Logout;
       ldap.Free;
       exit;
    end;
    
 if D then writeln('QUERY:: Results Count :' + IntToStr(ldap.SearchResult.Count));


 if ldap.SearchResult.Count=0 then begin
     if D then writeln('QUERY::  no results...');
       ldap.Logout;
       ldap.Free;
       exit();
 end;
 
 if Z then writeln(CRLF +CRLF +'************************************************');
 
 
 for i:=0 to ldap.SearchResult.Count -1 do begin
      if D then writeln('QUERY:: ObjectName.......: "' +ldap.SearchResult.Items[i].ObjectName + '"');
      DN_ROOT:=ldap.SearchResult.Items[i].ObjectName;
      if return_attribute='objectname' then begin
         ldap.Logout;
         ldap.Free;
         if D then writeln('QUERY:: RETURN ObjectName.......: "' +DN_ROOT + '"');
         exit(DN_ROOT);
      end;
      
      if D then writeln('QUERY:: Count attributes.: ' +IntToStr(ldap.SearchResult.Items[i].Attributes.Count));
      
      for t:=0 to ldap.SearchResult.Items[i].Attributes.Count -1 do begin

      AttributeNameQ:=LowerCase(ldap.SearchResult.Items[i].Attributes[t].AttributeName);
      if D then writeln('QUERY:: Attribute name[' + IntToStr(t) + '].......: "' + AttributeNameQ + '"');
      
     TEMP_LIST.Clear;
     if AttributeNameQ=return_attribute then begin
              if D then writeln('QUERY:: Count items......: ' +IntToStr(ldap.SearchResult.Items[i].Attributes.Items[t].Count));
              for u:=0 to ldap.SearchResult.Items[i].Attributes.Items[t].Count-1 do begin
                  value_result:=ldap.SearchResult.Items[i].Attributes.Items[t].Strings[u];
                  if D then writeln('QUERY:: ADD item[' + IntToStr(t) + ']"............:'+value_result+ '"');
                  TEMP_LIST.Add(trim(value_result));
                  Result:=Result + value_result+CRLF;
              end;
        end;
     end;
 
 end;
 
     if Z then writeln(Result);
      if Z then writeln('************************************************');
     if D then writeln('QUERY:: logout');

     ldap.Logout;
     ldap.Free;
 
end;
//##############################################################################
function Tldap.implode(ArrayS:TStringDynArray):string;
var
   i:integer;

begin
D:=COMMANDLINE_PARAMETERS('debug');
if D then writeln('Arrays:', length(ArrayS));
    for i:=0 to length(ArrayS) -1 do begin
     if length(ArrayS[i])>0 then result:=result + '|' + ArrayS[i];
    end;
end;


//##############################################################################
function Tldap.Query_A(Query_string:string;return_attribute:string):TStringDynArray;
         const
            CR = #$0d;
            LF = #$0a;
            CRLF = CR + LF;
var  ldap:TLDAPSend;
l:TStringList;
i,t,u,r:integer;
D,Z:boolean;
value_result:string;
AttributeNameQ:string;
begin
D:=false;
D:=COMMANDLINE_PARAMETERS('debug');
Z:=COMMANDLINE_PARAMETERS('q=');
ldap :=  TLDAPSend.Create;
     ldap.TargetHost := '127.0.0.1';
     ldap.TargetPort := '389';
     ldap.UserName := ldap_admin;
     ldap.Password := ldap_password;
     ldap.Version := 3;
     ldap.FullSSL := false;

     if not ldap.Login then begin
        ldap.Free;
        exit();
     end;

    return_attribute:=LowerCase(return_attribute);
    ldap.Bind;
    l:=TstringList.Create;
    l.Add('*');
    if length(SEARCH_DN)=0 then SEARCH_DN:=ldap_suffix;

    if D then writeln('QUERY:: "' + Query_string  + '" find attr:' + return_attribute);
    if D then writeln('QUERY:: IN DN "' + SEARCH_DN  + '"');

    if not ldap.Search(SEARCH_DN, False, Query_string, l) then begin
       if D then writeln('QUERY::  failed "' + ldap.FullResult + '"');
       ldap.Logout;
       ldap.Free;
       exit;
    end;

 if D then writeln('QUERY:: Results Count :' + IntToStr(ldap.SearchResult.Count));


 if ldap.SearchResult.Count=0 then begin
     if D then writeln('QUERY::  no results...');
       ldap.Logout;
       ldap.Free;
       exit();
 end;

 if Z then writeln(CRLF +CRLF +'************************************************');


 for i:=0 to ldap.SearchResult.Count -1 do begin
      if D then writeln('QUERY:: ObjectName.......: "' +ldap.SearchResult.Items[i].ObjectName + '"');
      DN_ROOT:=ldap.SearchResult.Items[i].ObjectName;
      if return_attribute='objectname' then begin
         ldap.Logout;
         ldap.Free;
      end;

      if D then writeln('QUERY:: Count attributes.: ' +IntToStr(ldap.SearchResult.Items[i].Attributes.Count));

      for t:=0 to ldap.SearchResult.Items[i].Attributes.Count -1 do begin

      AttributeNameQ:=LowerCase(ldap.SearchResult.Items[i].Attributes[t].AttributeName);
      if D then writeln('QUERY:: Attribute name[' + IntToStr(t) + '].......: "' + AttributeNameQ + '"');

     TEMP_LIST.Clear;
     if AttributeNameQ=return_attribute then begin
              if D then writeln('QUERY:: Count items......: ' +IntToStr(ldap.SearchResult.Items[i].Attributes.Items[t].Count));
              SetLength(result, 0);
              for u:=0 to ldap.SearchResult.Items[i].Attributes.Items[t].Count-1 do begin
              
                  value_result:=ldap.SearchResult.Items[i].Attributes.Items[t].Strings[u];
                  if D then writeln('QUERY:: ADD item[' + IntToStr(t) + ']"............:'+value_result+ '"[' + intToStr(r) + ']"');
                  SetLength(result, length(result)+1);
                  result[length(result)-1]:=value_result;
              end;
        end;
     end;

 end;

     if Z then writeln('rows:',length(result));
      if Z then writeln('************************************************');
     if D then writeln('QUERY:: logout');

     ldap.Logout;
     ldap.Free;

end;



//##############################################################################
function Tldap.EmailFromaliase(email:string):string;
var  ldap:TLDAPSend;
l:TStringList;
i,t,u:integer;
F:boolean;
begin
      F:=COMMANDLINE_PARAMETERS('debug');
      if F then writeln('EmailFromaliase:' + email);
     ldap :=  TLDAPSend.Create;
     if F then writeln('EmailFromaliase:init engine success');
     ldap.TargetHost := '127.0.0.1';
     ldap.TargetPort := '389';
     ldap.UserName := ldap_admin;
     ldap.Password := ldap_password;
     ldap.Version := 3;
     ldap.FullSSL := false;
     if F then writeln('EmailFromaliase:Login "' + ldap_admin + '"');
     if not ldap.Login then begin
        if F then writeln('EmailFromaliase:Error connection');
        ldap.Free;
        exit(email);
     end;

     if F then writeln('EmailFromaliase: Bind');
     ldap.Bind;
     if F then writeln('EmailFromaliase: Binded');
     D:=COMMANDLINE_PARAMETERS('aliases');


    l:=TstringList.Create;
    l.Add('mail');
    if F then writeln('EmailFromaliase:(&(objectclass=userAccount)(mailAlias=' + email+'))');
    ldap.Search(ldap_suffix, False, '(&(objectclass=userAccount)(mailAlias=' + email+'))', l);
    //writeln(LDAPResultdump(ldap.SearchResult));
    
    if D then writeln('Count:' + IntToStr(ldap.SearchResult.Count));
    
    if ldap.SearchResult.Count>0 then begin
         result:=ldap.SearchResult.Items[0].Attributes.Items[0].Strings[0];
         if D then writeln(email+'="' + result + '"');
         ldap.Logout;
         ldap.Free;
         exit;
    end else begin
        result:=email;
         if D then writeln(email+'="' + result + '"');
         ldap.Logout;
         ldap.Free;
        exit;
    end;
    
    
     writeln('count=' + IntToStr(ldap.SearchResult.Count));
     for i:=0 to ldap.SearchResult.Count -1 do begin
       writeln( ldap.SearchResult.Items[i].ObjectName);
       writeln( 'attributes:=' +IntToStr(ldap.SearchResult.Items[i].Attributes.Count));
       writeln('ObjectName:'+ldap.SearchResult.Items[i].ObjectName);
       
       
        for t:=0 to ldap.SearchResult.Items[i].Attributes.Count -1 do begin
              for u:=0 to ldap.SearchResult.Items[i].Attributes.Items[t].Count-1 do begin
                  writeln(ldap.SearchResult.Items[i].Attributes.Items[t].Strings[u]);
              end;
        end;
        
     end;
     writeln('logout');

     ldap.Logout;
     ldap.Free;

end;
//##############################################################################
function Tldap.EmailFromUID(uid:string):string;
var
   F                        :artica_settings;
   Myquery                  :string;
   DN                       :string;
   l                        :Tstringlist;
   AttributeNameQ           :string;
   i                        :integer;
   t                        :integer;

begin

  if not Logged then begin
     if D then writeln('Logged -> false, exit...');
     exit;
  end;

  l:=TstringList.Create;
  DN:=ldap_suffix;
  Myquery:='(&(objectclass=userAccount)(uid=' +uid+'))';
  l.Add('mail');
  
    if not global_ldap.Search(DN, False, Myquery, l) then begin
         if D then writeln('EmailFromUID:: Failed search ' + Myquery + ' in ' + DN);
         exit;
    end;


    if D then writeln(Myquery+ ' count :',global_ldap.SearchResult.Count);
    if global_ldap.SearchResult.Count=0 then begin
       if D then writeln('EmailFromUID:: Failed search ' + Myquery + ' in ' + DN);
       exit;
    end;


 for i:=0 to global_ldap.SearchResult.Count -1 do begin
        result:=SearchSingleAttribute(global_ldap.SearchResult.Items[i].Attributes,'mail');
     end;

end;
//##############################################################################
function Tldap.COMMANDLINE_PARAMETERS(FoundWhatPattern:string):boolean;
var
   i:integer;
   s:string;
   RegExpr:TRegExpr;

begin
 result:=false;
 if ParamCount>0 then begin
     for i:=0 to ParamCount do begin
        s:=s  + ' ' +ParamStr(i);
     end;
 end;
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:=FoundWhatPattern;
   if RegExpr.Exec(s) then begin
      RegExpr.Free;
      result:=True;
   end;


end;
//##############################################################################
function Tldap.get_LDAP(key:string):string;
var value:string;
GLOBAL_INI:TiniFile;
begin
if not fileExists('/etc/artica-postfix/artica-postfix-ldap.conf') then begin
   writeln('unable to stat /etc/artica-postfix/artica-postfix-ldap.conf !!!');
   exit;
end;
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix-ldap.conf');
value:=GLOBAL_INI.ReadString('LDAP',key,'');
result:=value;
GLOBAL_INI.Free;
end;

//##############################################################################
function Tldap.get_CONF(key:string):string;
var value:string;
GLOBAL_INI:TiniFile;
begin
if not fileExists('/etc/artica-postfix/artica-postfix.conf') then begin
   writeln('unable to stat /etc/artica-postfix/artica-postfix.conf !!!');
   exit;
end;
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=GLOBAL_INI.ReadString('ARTICA',key,'');
result:=value;
GLOBAL_INI.Free;
end;

//##############################################################################

function Tldap.Explode(const Separator, S: string; Limit: Integer = 0):TStringDynArray;
var
  SepLen       : Integer;
  F, P         : PChar;
  ALen, Index  : Integer;
begin
  SetLength(Result, 0);
  if (S = '') or (Limit < 0) then
    Exit;
  if Separator = '' then
  begin
    SetLength(Result, 1);
    Result[0] := S;
    Exit;
  end;
  SepLen := Length(Separator);
  ALen := Limit;
  SetLength(Result, ALen);

  Index := 0;
  P := PChar(S);
  while P^ <> #0 do
  begin
    F := P;
    P := StrPos(P, PChar(Separator));
    if (P = nil) or ((Limit > 0) and (Index = Limit - 1)) then
      P := StrEnd(F);
    if Index >= ALen then
    begin
      Inc(ALen, 5); // mehrere auf einmal um schneller arbeiten zu können
      SetLength(Result, ALen);
    end;
    SetString(Result[Index], F, P - F);
    Inc(Index);
    if P^ <> #0 then
      Inc(P, SepLen);
  end;
  if Index < ALen then
    SetLength(Result, Index); // wirkliche Länge festlegen
end;
//##############################################################################

end.

