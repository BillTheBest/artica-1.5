unit dansguardian;

{$MODE DELPHI}
{$LONGSTRINGS ON}

interface

uses
    Classes, SysUtils,variants,strutils, Process,logs,unix,RegExpr in 'RegExpr.pas',zsystem,kav4proxy,clamav,postfix_class,
    squid in '/home/dtouzeau/developpement/artica-postfix/bin/src/artica-install/squid.pas';

type LDAP=record
      admin:string;
      password:string;
      suffix:string;
      servername:string;
      Port:string;
  end;

  type
  tdansguardian=class


private
     LOGS:Tlogs;
     SYS:TSystem;
     artica_path:string;
     kav4proxy:tkav4proxy;
     clamav:Tclamav;
     cicap_mem_pid:string;
     dansguardian_mem_pid:string;
     procedure VERIFY_CONFFILE_FILE_2(conf:string;key:string;path:string);
     procedure DANSGUARDIAN_TEMPLATE();
     procedure BUILD_DEFAULT_RULE();
     username:string;
     postfix:tpostfix;
     function CheckUserButton():boolean;
public
    procedure   Free;
    constructor Create(const zSYS:Tsystem);
    function    INITD_PATH():string;
    function    BIN_PATH():string;
    FUNCTION    DANSGUARDIAN_PID():string;
    procedure   DANSGUARDIAN_STOP();
    procedure   DANSGUARDIAN_START();
    procedure   DANSGUARDIAN_RELOAD();
    function    DANSGUARDIAN_STATUS():string;
    function    DANSGUARDIAN_CONFIG_VALUE(key:string):string;
    procedure   DANSGUARDIAN_CONFIG_VALUE_SET(key:string;value:string);
    function    DANSGUARDIAN_VERSION():string;
    procedure   DANSGUARDIAN_FILE_IP_CONF();
    function    DANSGUARDIAN_STATS():string;
    procedure   DANSGUARDIAN_TAIL_START();
    function    DANSGUARDIAN_TAIL_STATUS():string;
    procedure   DANSGUARDIAN_TAIL_STOP();
    function    transparent_image_path():string;
    function    CONF_PATH():string;
    procedure   verify_content_scanners();
    function    filtergroupslist_path():string;
    procedure   VERIFY_CONFFILE();
    procedure   VERIFY_PARENT_PROXY();
    function    DANSGUARDIAN_DELETE_VALUE(key:string):string;
    procedure   DEFAULT_CATEGORIES();
    procedure   DEFAULT_WEIGHTED_PHRASELIST();
    DansGuardianEnabled:integer;
    kavicapserverEnabled:integer;
    DansGuardianEnableUserFrontEnd:integer;
    CicapEnabled:integer;
    function    DANSGUARDIAN_BIN_VERSION(version:string):int64;
    procedure   DANSGUARDIAN_FIX_GROUPS_NUMBER();
    procedure   BLACKLIST_USER_CATEGORIES();
    procedure   WEIGHTED_PHRASES_LIST_USER_CATEGORIES();



    
    function    C_ICAP_BIN_PATH():string;
    function    C_ICAP_CONF_PATH():string;
    procedure   C_ICAP_VALUE_SET(key:string;value:string);
    FUNCTION    C_ICAP_PID():string;
    function    C_ICAP_STATUS():string;
    procedure   C_ICAP_START();
    procedure   C_ICAP_STOP();
    procedure   C_ICAP_CONFIGURE();
    procedure   C_ICAP_RELOAD();
END;

implementation

constructor tdansguardian.Create(const zSYS:Tsystem);
begin
       forcedirectories('/etc/artica-postfix');
       LOGS:=tlogs.Create();
       SYS:=zSYS;
       kav4proxy:=tkav4proxy.Create(zSYS);
       clamav:=tclamav.Create;
       username:='squid';
       postfix:=tpostfix.Create(SYS);
       if FileExists(postfix.POSFTIX_POSTCONF_PATH()) then username:='postfix';
       DansGuardianEnableUserFrontEnd:=1;

       kavicapserverEnabled:=0;
       CicapEnabled:=0;

       if not TryStrToInt(SYS.GET_INFO('DansGuardianEnabled'),DansGuardianEnabled) then DansGuardianEnabled:=0;
       if not TryStrToInt(SYS.GET_INFO('kavicapserverEnabled'),kavicapserverEnabled) then kavicapserverEnabled:=0;
       if not TryStrToInt(SYS.GET_INFO('CicapEnabled'),CicapEnabled) then CicapEnabled:=0;
       if not TryStrToInt(SYS.GET_INFO('DansGuardianEnableUserFrontEnd'),DansGuardianEnableUserFrontEnd) then DansGuardianEnableUserFrontEnd:=1;



       if not DirectoryExists('/usr/share/artica-postfix') then begin
              artica_path:=ParamStr(0);
              artica_path:=ExtractFilePath(artica_path);
              artica_path:=AnsiReplaceText(artica_path,'/bin/','');

      end else begin
          artica_path:='/usr/share/artica-postfix';
      end;
end;
//##############################################################################
procedure tdansguardian.free();
begin
    logs.Free;
    clamav.free;
    
end;
//##############################################################################
function tdansguardian.INITD_PATH():string;
begin
   if FileExists('/etc/init.d/dansguardian') then exit('/etc/init.d/dansguardian');
end;
//##############################################################################
function tdansguardian.BIN_PATH():string;
begin
    exit(SYS.LOCATE_DANSGUARDIAN_BIN_PATH());
end;
//##############################################################################
function tdansguardian.CONF_PATH():string;
begin
if FileExists('/etc/dansguardian/dansguardian.conf') then exit('/etc/dansguardian/dansguardian.conf');
exit('/etc/dansguardian/dansguardian.conf');
end;
//##############################################################################
function tdansguardian.C_ICAP_BIN_PATH():string;
begin
if FileExists('/usr/sbin/c-icap') then exit('/usr/sbin/c-icap');
if FileExists('/usr/bin/c-icap') then exit('/usr/bin/c-icap');
end;
//##############################################################################
function tdansguardian.C_ICAP_CONF_PATH():string;
begin
if FileExists('/etc/c-icap/c-icap.conf') then exit('/etc/c-icap/c-icap.conf');
if FileExists('/etc/c-icap.conf') then exit('/etc/c-icap.conf');
end;
//##############################################################################

function tdansguardian.filtergroupslist_path():string;
begin
result:=DANSGUARDIAN_CONFIG_VALUE('filtergroupslist');
end;
//##############################################################################
procedure tdansguardian.verify_content_scanners();
var
   icapuri:string;
   l:TstringList;
   socketpath:string;
begin
   forceDirectories('/etc/dansguardian/contentscanners');
   
   l:=TstringList.Create;
   l.Add('# ICAP URL');
   l.Add('# Use hostname rather than IP address');
   
   if FileExists(C_ICAP_BIN_PATH()) then begin
       if FileExists(clamav.CLAMSCAN_BIN_PATH()) then begin
          icapuri:='localhost:1351';
          logs.Debuglogs('tdansguardian.verify_content_scanners()  c-icap and run on '+icapuri);
          l.Add('plugname = ''icapscan''');
          l.Add('');
          l.Add('# Always specify the port');
          l.Add('#');
          l.Add('icapurl = ''icap://'+icapuri+'/srv_clamav''');
          l.Add('icapsocket = ''localhost:1351''');
          l.Add('');
          l.Add('exceptionvirusmimetypelist = ''/etc/dansguardian/lists/contentscanners/exceptionvirusmimetypelist''');
          l.Add('exceptionvirusextensionlist = ''/etc/dansguardian/lists/contentscanners/exceptionvirusextensionlist''');
          l.Add('exceptionvirussitelist = ''/etc/dansguardian/lists/contentscanners/exceptionvirussitelist''');
          l.Add('exceptionvirusurllist = ''/etc/dansguardian/lists/contentscanners/exceptionvirusurllist''');
          l.Add('');
          logs.Debuglogs('tdansguardian.verify_content_scanners()  Saving icap /etc/dansguardian/contentscanners/icapscan.conf '+icapuri);
       end;
   end;

   try
      l.SaveToFile('/etc/dansguardian/contentscanners/icapscan.conf');
   except
       logs.Syslogs('FATAL ERROR WHILE SAVING /etc/dansguardian/contentscanners/icapscan.conf');
   end;


   l.Clear;
          l.Add('plugname = ''clamav''');
          l.Add('scanbuffmethod = ''file''');
          l.Add('maxfiles = 15000');
          l.Add('maxreclevel = 10');
          l.Add('maxscansize = 100000');
          l.Add('exceptionvirusmimetypelist = ''/etc/dansguardian/lists/contentscanners/exceptionvirusmimetypelist''');
          l.Add('exceptionvirusextensionlist = ''/etc/dansguardian/lists/contentscanners/exceptionvirusextensionlist''');
          l.Add('exceptionvirussitelist = ''/etc/dansguardian/lists/contentscanners/exceptionvirussitelist''');
          l.Add('exceptionvirusurllist = ''/etc/dansguardian/lists/contentscanners/exceptionvirusurllist''');

          logs.Debuglogs('tdansguardian.verify_content_scanners()  Saving clamav /etc/dansguardian/contentscanners/clamav.conf ');
   try
      l.SaveToFile('/etc/dansguardian/contentscanners/clamav.conf');
   except
         logs.Syslogs('FATAL ERROR WHILE SAVING /etc/dansguardian/contentscanners/clamav.conf');
   end;




   socketpath:=clamav.CLAMD_GETINFO('LocalSocket');
   logs.Debuglogs('Starting......: DansGuardian Clamav socket path:'+ socketpath);
   if length(socketpath)>0 then begin
          l.Clear;
          l.Add('plugname = ''clamdscan''');
          l.Add('clamdudsfile = '''+socketpath+'''');
          l.Add('exceptionvirusmimetypelist = ''/etc/dansguardian/lists/contentscanners/exceptionvirusmimetypelist''');
          l.Add('exceptionvirusextensionlist = ''/etc/dansguardian/lists/contentscanners/exceptionvirusextensionlist''');
          l.Add('exceptionvirussitelist = ''/etc/dansguardian/lists/contentscanners/exceptionvirussitelist''');
          l.Add('exceptionvirusurllist = ''/etc/dansguardian/lists/contentscanners/exceptionvirusurllist''');
          logs.Debuglogs('tdansguardian.verify_content_scanners()  Saving clamav /etc/dansguardian/contentscanners/clamdscan.conf ');
   try
      l.SaveToFile('/etc/dansguardian/contentscanners/clamdscan.conf');
   except
         logs.Syslogs('FATAL ERROR WHILE SAVING /etc/dansguardian/contentscanners/clamdscan.conf');
   end;
   end;

  l.free;
   

end;
//##############################################################################
function tdansguardian.DANSGUARDIAN_VERSION():string;
var
   RegExpr        :TRegExpr;
   F              :TstringList;
   T              :string;
   i              :integer;
begin
   result:='';
   if not FileExists(BIN_PATH()) then begin
      logs.Debuglogs('DANSGUARDIAN_VERSION -> unable to stat dansguardian');
      exit;
   end;
   
   result:=SYS.GET_CACHE_VERSION('APP_DANSGUARDIAN');
   if length(result)>0 then exit;
   
   t:=logs.FILE_TEMP();
   fpsystem(BIN_PATH()+' -v >'+t+' 2>&1');
   if not FileExists(t) then exit;
   f:=TstringList.Create;
   f.LoadFromFile(t);
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='DansGuardian\s+([0-9\.A-Za-z]+)';
   For i:=0 to f.Count-1 do begin

   if RegExpr.Exec(f.Strings[i]) then begin
      result:=RegExpr.Match[1];
      break;
   end;
   end;
   SYS.SET_CACHE_VERSION('APP_DANSGUARDIAN',result);
   RegExpr.Free;
   f.free;
end;
//#############################################################################
FUNCTION tdansguardian.DANSGUARDIAN_PID():string;
var
  RegExpr:TRegExpr;
  i:integer;
  tmp:string;
begin
  if length(dansguardian_mem_pid)>0 then exit(dansguardian_mem_pid);
  tmp:=logs.FILE_TEMP();
  if FileExists(BIN_PATH()) then begin
     tmp:=SYS.ExecPipe(BIN_PATH()+' -s');
  end else begin
      exit;
  end;

  RegExpr:=TRegExpr.Create;
  RegExpr.expression:='([0-9]+)';
  if RegExpr.Exec(tmp) then begin
       result:=RegExpr.Match[1];
  end else begin
       logs.Debuglogs(BIN_PATH()+' -s return null "'+tmp+'"');
       result:=SYS.PIDOF(BIN_PATH());
  end;
 dansguardian_mem_pid:=result;
 RegExpr.Free;


end;

//##############################################################################
FUNCTION tdansguardian.C_ICAP_PID():string;
var PID,PID2:string;
begin

 if length(cicap_mem_pid)>0 then exit(cicap_mem_pid);


 if not FileExists('/var/run/c-icap/c-icap.pid') then begin
    result:=SYS.PidByProcessPath(C_ICAP_BIN_PATH());
    cicap_mem_pid:=result;
    exit;
 end;
 PID:=SYS.GET_PID_FROM_PATH('/var/run/c-icap/c-icap.pid');
 
 if (PID='0') OR (length(PID)=0) then begin
    result:=SYS.PidByProcessPath(C_ICAP_BIN_PATH());
    cicap_mem_pid:=result;
    exit;
 end;
 
 PID2:=SYS.PidByProcessPath(C_ICAP_BIN_PATH());
 if SYS.PROCESS_EXIST(PID2) and not SYS.PROCESS_EXIST(PID) then begin
    result:=PID2;
    cicap_mem_pid:=PID2;
    exit;
 end;
 
 result:=PID;
 cicap_mem_pid:=PID;
 

end;
//##############################################################################
function tdansguardian.transparent_image_path():string;
begin
if Fileexists('/usr/share/dansguardian/transparent1x1.gif') then exit('/usr/share/dansguardian/transparent1x1.gif');

end;

//##############################################################################
procedure tdansguardian.DANSGUARDIAN_RELOAD();
var
   pid:string;

begin

if not FileExists(BIN_PATH()) then begin
   logs.Debuglogs('Starting......: DansGuardian is not installed');
   exit;
end;

if DansGuardianEnabled=0 then begin
     logs.Debuglogs('Starting......: DansGuardian is disabled, aborting');
     DANSGUARDIAN_TAIL_STOP();
     exit;
end;

  pid:=DANSGUARDIAN_PID();
  if FileExists('/etc/artica-postfix/settings/Daemons/DansGuardianDefaultexceptionsitelist') then begin
     logs.OutputCmd('/bin/cp -f /etc/artica-postfix/settings/Daemons/DansGuardianDefaultexceptionsitelist /etc/dansguardian/lists/exceptionsitelist');
  end;

if SYS.PROCESS_EXIST(pid) then begin
     logs.Debuglogs('Starting......: DansGuardian reload dansgardian with PID '+ pid);
     BLACKLIST_USER_CATEGORIES();
     BUILD_DEFAULT_RULE();
     verify_content_scanners();
     VERIFY_CONFFILE();
     DEFAULT_CATEGORIES();
     DEFAULT_WEIGHTED_PHRASELIST();
     VERIFY_PARENT_PROXY();
     DANSGUARDIAN_FIX_GROUPS_NUMBER();
     logs.Syslogs('Starting......: DansGuardian will be reloaded');
     logs.OutputCmd(BIN_PATH() + ' -r');
     DANSGUARDIAN_TAIL_STOP();
     DANSGUARDIAN_TAIL_START();
     exit;
end;


DANSGUARDIAN_START();
end;

//##############################################################################

procedure tdansguardian.DEFAULT_CATEGORIES();
var
   l:tstringList;
   t:TstringList;
   i:Integer;
   category:string;

begin

    l:=TstringList.Create;
    t:=TstringList.Create;

    if FileExists('/etc/artica-postfix/settings/Daemons/DansguardianDefaultCategories') then begin
       l.LoadFromFile('/etc/artica-postfix/settings/Daemons/DansguardianDefaultCategories');
       for i:=0 to l.Count-1 do begin
           category:=trim(l.Strings[i]);
           if length(category)>0 then begin
              logs.Debuglogs('Starting......: Dansguardian checking category "' +l.Strings[i]+'"');
              if FileExists('/etc/dansguardian/lists/blacklists/'+category+'/domains') then l.Add('.Include</etc/dansguardian/lists/blacklists/'+category+'/domains>');
              if FileExists('/etc/dansguardian/lists/blacklists/'+category+'/urls') then t.Add('.Include</etc/dansguardian/lists/blacklists/'+category+'/urls>');
           end;
       end;

    end;

   try
      l.SaveToFile('/etc/dansguardian/lists/bannedsitelist');
    except
     logs.Syslogs('DEFAULT_CATEGORIES():: FATAL ERROR WHILE SAVING /etc/dansguardian/lists/bannedsitelist');
    end;

   try
      t.SaveToFile('/etc/dansguardian/lists/bannedurllist');
    except
     logs.Syslogs('DEFAULT_CATEGORIES():: FATAL ERROR WHILE SAVING /etc/dansguardian/lists/bannedurllist');
    end;

l.Free;
t.free;
end;
//##############################################################################
procedure tdansguardian.DEFAULT_WEIGHTED_PHRASELIST();
var
   l:tstringList;
   t:TstringList;
   z:tstringlist;
   f:TstringList;
   i,k:Integer;
   category:string;

begin

   l:=TstringList.Create;
   t:=TstringList.Create;
   z:=TstringList.Create;
   f:=TstringList.Create;
   z.Add('weighted_chinese');
   z.Add('weighted_danish');
   z.Add('weighted_dutch');
   z.Add('weighted_french');
   z.Add('weighted_german');
   z.Add('weighted_italian');
   z.Add('weighted_japanese');
   z.Add('weighted_malay');
   z.Add('weighted_norwegian');
   z.Add('weighted_polish');
   z.Add('weighted_portuguese');
   z.Add('weighted_russian');
   z.Add('weighted_spanish');

   f.Add('weighted_general');
   f.Add('weighted_news');
   f.Add('weighted_general_danish');
   f.Add('weighted_general_dutch');
   f.Add('weighted_general_malay');
   f.Add('weighted_general_polish');
   f.Add('weighted_general_portuguese');


for i:=0 to f.Count-1 do begin
       if FileExists('/etc/dansguardian/lists/phraselists/goodphrases/'+ f.Strings[i]) then begin
          t.add('.Include</etc/dansguardian/lists/phraselists/goodphrases/'+ f.Strings[i]);
       end;
end;


if FileExists('/etc/artica-postfix/settings/Daemons/DansguardianDefaultWeightedphraselist') then begin
       l.LoadFromFile('/etc/artica-postfix/settings/Daemons/DansguardianDefaultWeightedphraselist');
       for i:=0 to l.Count-1 do begin
          category:=trim(l.Strings[i]);
          logs.Debuglogs('Starting......: Dansguardian checking Weighted phrase list category "' +l.Strings[i]+'"');
          if length(category)>0 then begin
             if FileExists('/etc/dansguardian/lists/phraselists/'+category+'/weighted') then begin
                t.Add('.Include</etc/dansguardian/lists/phraselists/'+category+'/weighted>');
             end;
             if FileExists('/etc/dansguardian/lists/phraselists/'+category+'/weighted') then begin
                t.Add('.Include</etc/dansguardian/lists/phraselists/'+category+'/weighted>');
             end;

             for k:=0 to z.Count-1 do begin
                   if FileExists('/etc/dansguardian/lists/phraselists/'+category+'/'+z.Strings[i]) then begin
                      t.Add('.Include</etc/dansguardian/lists/phraselists/'+category+'/'+z.Strings[i]+'>');
                   end;
             end;
          end;
      end;
end;


try
   t.SaveToFile('/etc/dansguardian/lists/weightedphraselist');
except
      logs.Syslogs('DEFAULT_WEIGHTED_PHRASELIST():: error, unable to save /etc/dansguardian/lists/weightedphraselist');
end;

l.free;
t.free;
z.free;
f.free;
end;
//##############################################################################




procedure tdansguardian.DANSGUARDIAN_START();
var
   count:integer;
   pid:string;
   FileTemp:string;
begin
count:=0;

logs.Debuglogs('###################### DANSGUARDIAN #####################');


if not FileExists(BIN_PATH()) then begin
   logs.Debuglogs('Starting......: DansGuardian is not installed');
   exit;
end;

if DansGuardianEnabled=0 then begin
   logs.Debuglogs('Starting......: DansGuardian is disabled');
   exit;
end;


FileTemp:=artica_path+'/ressources/logs/dansguardian.start';
if FileExists(transparent_image_path()) then logs.OutputCmd('/bin/ln -s --force '+transparent_image_path()+' /etc/dansguardian/transparent1x1.gif');



forcedirectories('/var/log/dansguardian');
logs.OutputCmd('/bin/chown -R '+username+':'+username+' /var/log/dansguardian');
C_ICAP_START();
pid:=DANSGUARDIAN_PID();



  if length(pid)=0 then begin
     pid:=SYS.PIDOF(BIN_PATH());
     if length(pid)>0 then begin
         logs.DebugLogs('Starting......: DansGuardian kill all bad pids ' + pid);
         fpsystem('/bin/kill -9 ' + pid);
     end;
  end;


 logs.Debuglogs('DANSGUARDIAN_START() -> PID='+ DANSGUARDIAN_PID());
 if SYS.PROCESS_EXIST(DANSGUARDIAN_PID()) then begin
    logs.DebugLogs('Starting......: DansGuardian already running using pid ' + DANSGUARDIAN_PID()+ '...');
    exit;
 end;

 BLACKLIST_USER_CATEGORIES();
 BUILD_DEFAULT_RULE();
 verify_content_scanners();
 VERIFY_CONFFILE();
 DEFAULT_CATEGORIES();
 DEFAULT_WEIGHTED_PHRASELIST();
 VERIFY_PARENT_PROXY();
 DANSGUARDIAN_FIX_GROUPS_NUMBER();
 logs.Debuglogs('Starting......: DansGuardian width username '+username);
 logs.Debuglogs('Starting......: DansGuardian...');
 if FileExists('/tmp/.dguardianipc') then logs.DeleteFile('/tmp/.dguardianipc');
 if FileExists('/tmp/.dguardianurlipc') then logs.DeleteFile('/tmp/.dguardianurlipc');


 logs.OutputCmd(BIN_PATH());
     

 while not SYS.PROCESS_EXIST(DANSGUARDIAN_PID()) do begin
        sleep(100);
        inc(count);
        if count>10 then begin
           logs.DebugLogs('Starting......: DansGuardian (failed)');
           break;
        end;
  end;

 logs.Debuglogs('Starting......: DansGuardian...');
 sleep(200);


 logs.OutputCmd(BIN_PATH());

 count:=0;
 while not SYS.PROCESS_EXIST(DANSGUARDIAN_PID()) do begin
        sleep(100);
        inc(count);
        if count>10 then begin
           logs.DebugLogs('Starting......: DansGuardian (failed)');
           exit;
        end;
  end;

 logs.DebugLogs('Starting......: DansGuardian started with new pid ' + DANSGUARDIAN_PID());
 DANSGUARDIAN_TAIL_START();
end;
//##############################################################################
procedure tdansguardian.VERIFY_PARENT_PROXY();
var
   squid:tsquid;
   http_port,tmp:string;
   RegExpr     :TRegExpr;
begin
   squid:=tsquid.Create;
   http_port:=squid.SQUID_GET_CONFIG('http_port');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='([0-9]+)';

   if RegExpr.Exec(http_port) then http_port:=RegExpr.Match[1];
logs.DebugLogs('Starting......: Squid configuration file:' + squid.SQUID_CONFIG_PATH());
logs.DebugLogs('Starting......: Squid listen on port : 127.0.0.1:' + http_port);

if FileExists('/etc/artica-postfix/settings/Daemons/DansGuardianMasterConf') then begin
   logs.DebugLogs('Starting......: DansGuardian Replicate Master configuration..');
   logs.OutputCmd('/bin/cp -f /etc/artica-postfix/settings/Daemons/DansGuardianMasterConf ' + CONF_PATH);
end;

DANSGUARDIAN_CONFIG_VALUE_SET('proxyport',http_port);
DANSGUARDIAN_CONFIG_VALUE_SET('proxyip','127.0.0.1');

tmp:=DANSGUARDIAN_CONFIG_VALUE('maxchildren');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('maxchildren','120');

tmp:=DANSGUARDIAN_CONFIG_VALUE('minchildren');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('minchildren','8');

tmp:=DANSGUARDIAN_CONFIG_VALUE('minsparechildren');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('minsparechildren','4');

tmp:=DANSGUARDIAN_CONFIG_VALUE('preforkchildren');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('preforkchildren','6');

tmp:=DANSGUARDIAN_CONFIG_VALUE('maxsparechildren');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('maxsparechildren','32');

tmp:=DANSGUARDIAN_CONFIG_VALUE('maxagechildren');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('maxagechildren','500');

tmp:=DANSGUARDIAN_CONFIG_VALUE('maxcontentfiltersize');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('maxcontentfiltersize','256');

tmp:=DANSGUARDIAN_CONFIG_VALUE('maxcontentramcachescansize');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('maxcontentramcachescansize','2000');

tmp:=DANSGUARDIAN_CONFIG_VALUE('maxcontentfilecachescansize');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('maxcontentfilecachescansize','20000');

tmp:=DANSGUARDIAN_CONFIG_VALUE('filterport');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('filterport','8080');

tmp:=DANSGUARDIAN_CONFIG_VALUE('reportinglevel');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('reportinglevel','3');

tmp:=DANSGUARDIAN_CONFIG_VALUE('LogLevel');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('loglevel','3');

tmp:=DANSGUARDIAN_CONFIG_VALUE('logexceptionhits');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('logexceptionhits','2');

tmp:=DANSGUARDIAN_CONFIG_VALUE('logfileformat');
if length(tmp)=0 then begin
   if fileExists('/usr/bin/sarg') then  begin
      DANSGUARDIAN_CONFIG_VALUE_SET('logfileformat','3');
   end else begin
       DANSGUARDIAN_CONFIG_VALUE_SET('logfileformat','1');
   end;
end;


tmp:=DANSGUARDIAN_CONFIG_VALUE('filtergroups');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('filtergroups','1');

tmp:=DANSGUARDIAN_CONFIG_VALUE('custombannedimagefile');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('custombannedimagefile','/usr/share/dansguardian/transparent1x1.gif');

tmp:=DANSGUARDIAN_CONFIG_VALUE('filtergroupslist');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('filtergroupslist','/etc/dansguardian/filtergroupslist');

tmp:=DANSGUARDIAN_CONFIG_VALUE('bannediplist');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('bannediplist','/etc/dansguardian/bannediplist');

tmp:=DANSGUARDIAN_CONFIG_VALUE('exceptioniplist');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('exceptioniplist','/etc/dansguardian/exceptioniplist');

tmp:=DANSGUARDIAN_CONFIG_VALUE('languagedir');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('languagedir','/etc/dansguardian/languages');

tmp:=DANSGUARDIAN_CONFIG_VALUE('language');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('language','ukenglish');
//   = 'espagnol'
tmp:=DANSGUARDIAN_CONFIG_VALUE('loglocation');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('loglocation','/var/log/dansguardian/access.log');

tmp:=DANSGUARDIAN_CONFIG_VALUE('statlocation');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('statlocation','/var/log/dansguardian/stats');


tmp:=DANSGUARDIAN_CONFIG_VALUE('trickledelay');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('trickledelay','10');


tmp:=DANSGUARDIAN_CONFIG_VALUE('initialtrickledelay');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('initialtrickledelay','20');



tmp:=DANSGUARDIAN_CONFIG_VALUE('daemonuser');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('daemonuser',username);
if tmp<>username then DANSGUARDIAN_CONFIG_VALUE_SET('daemonuser',username);

tmp:=DANSGUARDIAN_CONFIG_VALUE('daemongroup');
if length(tmp)=0 then DANSGUARDIAN_CONFIG_VALUE_SET('daemongroup',username);
if tmp<>username then DANSGUARDIAN_CONFIG_VALUE_SET('daemongroup',username);


end;
//##############################################################################
procedure tdansguardian.C_ICAP_RELOAD();
var
   pid:string;
begin
   if CicapEnabled=0 then begin
     logs.Debuglogs('Starting......: c-icap is disabled by artica by "CicapEnabled" token...');
     C_ICAP_STOP();
     exit;
   end;

   PID:= C_ICAP_PID();
   if not SYS.PROCESS_EXIST(pid) then begin
        C_ICAP_START();
        exit;
   end;

   logs.Debuglogs('Starting......: reloading c-icap pid '+PID);
   logs.OutputCmd('/bin/kill -HUP ' + PID);
end;
//##############################################################################

procedure tdansguardian.C_ICAP_START();
var
   count:integer;
   pid:string;


begin
count:=0;
if not FileExists(C_ICAP_BIN_PATH()) then begin
   logs.Debuglogs('C_ICAP_START():: unable to stat c-icap bin...');
   exit;
end;

if not FileExists(clamav.CLAMSCAN_BIN_PATH()) then begin
      logs.Debuglogs('Starting......: c-icap Unable to stat clamscan bin path, aborting...');
      exit;
end;

if CicapEnabled=0 then begin
     logs.Debuglogs('Starting......: c-icap is disabled by artica by "CicapEnabled" token...');
     C_ICAP_STOP();
     exit;
end;


PID:= C_ICAP_PID();


 logs.Debuglogs('C_ICAP_START() -> PID='+ PID);
 if SYS.PROCESS_EXIST(PID) then begin
    logs.Debuglogs('Starting......: c-icap already running using pid ' + PID+ '...');
    exit;
 end;
  C_ICAP_CONFIGURE();
 logs.Debuglogs('Starting......: c-icap...');
 fpsystem(C_ICAP_BIN_PATH() + ' -f '+C_ICAP_CONF_PATH()+' &');

 

 while not SYS.PROCESS_EXIST(C_ICAP_PID()) do begin

        sleep(100);
        inc(count);
        if count>40 then begin
           logs.DebugLogs('Starting......: c-icap (timeout)');
           break;
        end;
  end;

 
 PID:= C_ICAP_PID();
 
 if length(PID)>0 then begin
    logs.DebugLogs('Starting......: c-icap started with new pid ' + PID);
 end else begin
    writeln('Starting......: c-icap failed');
 end;
 
end;
//##############################################################################
procedure tdansguardian.C_ICAP_CONFIGURE();
begin
ForceDirectories('/var/log/squid');
ForceDirectories('/var/log/squid');
ForceDirectories('/var/lib/c_icap/temporary');
ForceDirectories('/var/run/c-icap');
ForceDirectories('/opt/artica/share/www/squid-attachments');
logs.OutputCmd('/bin/chown -R squid:squid /var/log/squid');
logs.OutputCmd('/bin/chown -R squid:squid /var/run/c-icap');
logs.OutputCmd('/bin/chown -R squid:squid /var/lib/c_icap/temporary');
logs.OutputCmd('/bin/chown -R squid:squid /opt/artica/share/www/squid-attachments');

if FileExists('/etc/artica-postfix/settings/Daemons/CicapMainConfiguration') then begin
   logs.OutputCmd('/bin/cp -f /etc/artica-postfix/settings/Daemons/CicapMainConfiguration ' + C_ICAP_CONF_PATH());
   exit;
end;

C_ICAP_VALUE_SET('ServerLog','/var/log/squid/c-icap_server.log');
C_ICAP_VALUE_SET('AccessLog','/var/log/squid/c-icap_access.log');
C_ICAP_VALUE_SET('User','squid');
C_ICAP_VALUE_SET('Group','squid');
C_ICAP_VALUE_SET('Port','1351');
C_ICAP_VALUE_SET('PidFile','/var/run/c-icap/c-icap.pid');
C_ICAP_VALUE_SET('CommandsSocket','/var/run/c-icap/c-icap.ctl');
C_ICAP_VALUE_SET('Timeout','300');
C_ICAP_VALUE_SET('KeepAlive','On');
C_ICAP_VALUE_SET('MaxKeepAliveRequests','100');
C_ICAP_VALUE_SET('KeepAliveTimeout','600');
C_ICAP_VALUE_SET('StartServers','3');
C_ICAP_VALUE_SET('MaxServers','10');
C_ICAP_VALUE_SET('MinSpareThreads','10');
C_ICAP_VALUE_SET('MaxSpareThreads','20');
C_ICAP_VALUE_SET('ThreadsPerChild','10');
C_ICAP_VALUE_SET('MaxRequestsPerChild','0');
C_ICAP_VALUE_SET('TmpDir','/var/lib/c_icap/temporary');
C_ICAP_VALUE_SET('ServicesDir','/usr/lib/c_icap');
C_ICAP_VALUE_SET('Service','echo_module srv_echo.so');
C_ICAP_VALUE_SET('Service','url_check_module srv_url_check.so');
C_ICAP_VALUE_SET('Service','antivirus_module srv_clamav.so');
C_ICAP_VALUE_SET('ModulesDir' ,'/usr/lib/c_icap');
C_ICAP_VALUE_SET('Module logger','sys_logger.so');
C_ICAP_VALUE_SET('ServiceAlias','avscan srv_clamav?allow204=on&sizelimit=off&mode=simple');
C_ICAP_VALUE_SET('srv_clamav.ScanFileTypes','TEXT DATA EXECUTABLE ARCHIVE MSOFFICE');
C_ICAP_VALUE_SET('srv_clamav.SendPercentData','5');
C_ICAP_VALUE_SET('srv_clamav.StartSendPercentDataAfter','2M');
C_ICAP_VALUE_SET('srv_clamav.MaxObjectSize','5M');
C_ICAP_VALUE_SET('srv_clamav.ClamAvTmpDir','/tmp');
C_ICAP_VALUE_SET('srv_clamav.ClamAvMaxFilesInArchive','0');
C_ICAP_VALUE_SET('srv_clamav.ClamAvMaxFileSizeInArchive','100M');
C_ICAP_VALUE_SET('srv_clamav.VirSaveDir','/opt/artica/share/www/squid-attachments');





end;
//##############################################################################
procedure tdansguardian.DANSGUARDIAN_FILE_IP_CONF();
var
   l:TstringList;
   DansGuardianAuthpluginsIP:string;
begin
l:=TstringList.Create;
l.add('# IP-based auth plugin');
l.add('#');
l.add('# Maps client IPs to filter groups.');
l.add('# If "usexforwardedfor" is enabled, grabs the IP from the X-Forwarded-For');
l.add('# header, if available.');
l.add('');
l.add('plugname = ''ip''');
l.add('');
l.add('# ipgroups file');
l.add('# List file assigning IP addresses, subnets and ranges to filter groups');
l.add('ipgroups = ''/etc/dansguardian/lists/authplugins/ipgroups''');
if not FileExists('/etc/dansguardian/lists/authplugins/ipgroups') then logs.OutputCmd('/bin/touch /etc/dansguardian/lists/authplugins/ipgroups');
forceDirectories('/etc/dansguardian/authplugins');

DansGuardianAuthpluginsIP:=SYS.GET_INFO('DansGuardianAuthpluginsIP');
logs.WriteToFile(DansGuardianAuthpluginsIP,'/etc/dansguardian/lists/authplugins/ipgroups');

try
   l.SaveToFile('/etc/dansguardian/authplugins/ip.conf');
except
   logs.Syslogs('tdansguardian.FILE_IP_CONF() unable to save /etc/dansguardian/authplugins/ip.conf');
   exit;
end;
l.free;
end;
//##############################################################################


procedure tdansguardian.DANSGUARDIAN_STOP();
 var
    pid:string;
    count:integer;
begin
count:=0;
  if not FileExists(BIN_pATH) then begin
     writeln('Stopping DansGuardian........: Already stopped');
     C_ICAP_STOP();
     exit;
  end;
  pid:=DANSGUARDIAN_PID();
  if SYS.PROCESS_EXIST(pid) then begin
  writeln('Stopping DansGuardian........: ' + pid + ' PID');
  logs.OutputCmd('/bin/kill '+pid);
  logs.OutputCmd(BIN_pATH()+' -q');
  pid:=trim(DANSGUARDIAN_PID());
  if length(trim(pid))=0 then begin
      writeln('Stopping DansGuardian........: Stopped success');
       if FileExists('/tmp/.dguardianipc') then logs.DeleteFile('/tmp/.dguardianipc');
       if FileExists('/tmp/.dguardianurlipc') then logs.DeleteFile('/tmp/.dguardianurlipc');
       exit;
  end;


       while SYS.PROCESS_EXIST(pid) do begin
        sleep(100);
        inc(count);
        if length(trim(pid))=0 then break;
        logs.OutputCmd('/bin/kill '+pid);
        logs.OutputCmd(BIN_pATH()+' -q');
        dansguardian_mem_pid:='';
        if count>30 then break;
        pid:=trim(DANSGUARDIAN_PID());
       end;
  end;

  if not SYS.PROCESS_EXIST(DANSGUARDIAN_PID()) then begin
     writeln('Stopping DansGuardian........: Stopped success');
     if FileExists('/tmp/.dguardianipc') then logs.DeleteFile('/tmp/.dguardianipc');
     if FileExists('/tmp/.dguardianurlipc') then logs.DeleteFile('/tmp/.dguardianurlipc');
  end;

  DANSGUARDIAN_TAIL_STOP();
  C_ICAP_STOP();
end;
//##############################################################################

procedure tdansguardian.C_ICAP_STOP();
 var
    pid:string;
    allpids:string;
    count:integer;
begin
count:=0;
  if not FileExists(C_ICAP_BIN_PATH()) then begin
     writeln('Stopping C-icap..............: Not installed');
     exit;
  end;
  
  pid:=C_ICAP_PID();
  if not SYS.PROCESS_EXIST(pid) then begin
     PID:=SYS.PidByProcessPath(C_ICAP_BIN_PATH());
  end;
  
if SYS.PROCESS_EXIST(pid) then begin
   writeln('Stopping C-icap..............: ' + pid + ' PID');
   logs.OutputCmd('/bin/kill '+ pid);

  while SYS.PROCESS_EXIST(pid) do begin
        sleep(100);
        inc(count);
        if count>30 then break;
  end;
  end;

  allpids:=SYS.PidAllByProcessPath(C_ICAP_BIN_PATH());
  if length(allpids)>0 then begin
     writeln('Stopping C-icap..............: ' + allpids + ' PIDs');
     fpsystem('/bin/kill -9 '+ allpids);
  end;

  cicap_mem_pid:='';
  if not SYS.PROCESS_EXIST(C_ICAP_PID()) then begin
     writeln('Stopping C-icap..............: Stopped');
  end else begin
     writeln('Stopping C-icap..............: Failed');
  end;
end;
//##############################################################################

function tdansguardian.DANSGUARDIAN_STATUS():string;
var
ini:TstringList;
begin
   ini:=TstringList.Create;
   ini.Add('[DANSGUARDIAN]');
   if FileExists(BIN_PATH()) then  begin
      if SYS.PROCESS_EXIST(DANSGUARDIAN_PID()) then ini.Add('running=1') else  ini.Add('running=0');
      ini.Add('dansguardian_installed=1');
      ini.Add('application_installed=1');
      ini.Add('master_pid='+ DANSGUARDIAN_PID());
      ini.Add('master_memory=' + IntToStr(SYS.PROCESS_MEMORY(DANSGUARDIAN_PID())));
      ini.Add('master_version=' + DANSGUARDIAN_VERSION());
      ini.Add('status='+SYS.PROCESS_STATUS(DANSGUARDIAN_PID()));
      ini.Add('service_name=APP_DANSGUARDIAN');
      ini.Add('service_disabled='+ IntToStr(DansGuardianEnabled));
      ini.Add('service_cmd=dansgardian');
   end;

   result:=ini.Text;
   ini.free;

end;
//##############################################################################
function tdansguardian.C_ICAP_STATUS():string;
var
ini:TstringList;
begin
   ini:=TstringList.Create;
   ini.Add('[C-ICAP]');
   if FileExists(C_ICAP_BIN_PATH()) then  begin
      if SYS.PROCESS_EXIST(C_ICAP_PID()) then ini.Add('running=1') else  ini.Add('running=0');
      ini.Add('application_installed=1');
      ini.Add('master_pid='+ C_ICAP_PID());
      ini.Add('master_memory=' + IntToStr(SYS.PROCESS_MEMORY(C_ICAP_PID())));
      ini.Add('master_version=060708rc2');
      ini.Add('status='+SYS.PROCESS_STATUS(C_ICAP_PID()));
      ini.Add('service_name=APP_C_ICAP');
      ini.Add('service_disabled='+ IntToStr(CicapEnabled));
      ini.Add('service_cmd=cicap');
   end else begin
      ini.Add('application_installed=0');             
      ini.Add('service_name=APP_C_ICAP');
   end;

   result:=ini.Text;
   ini.free;

end;
//##############################################################################
function tdansguardian.DANSGUARDIAN_STATS():string;
var
   tmpstr:string;
   phpfile:string;
begin
if not FileExists(BIN_PATH) then exit;
phpfile:=artica_path+'/cron.dansguardian.php';
if not FileExists(phpfile) then begin
   writeln('Unable to stat ' +phpfile);
   logs.Syslogs('Unable to stat '+phpfile);
   exit;
end;

DANSGUARDIAN_STOP();
logs.OutputCmd('/bin/mv /var/log/dansguardian/access.log /var/log/dansguardian/access_work.log');
logs.OutputCmd('/bin/touch /var/log/dansguardian/access.log');
logs.OutputCmd('/bin/chown '+username+':'+username+' /var/log/dansguardian/access.log');
DANSGUARDIAN_START();
writeln('');
logs.OutputCmd(SYS.EXEC_NICE()+SYS.LOCATE_PHP5_BIN() + ' ' +phpfile+ ' /var/log/dansguardian/access_work.log &');
writeln('');
end;
//##############################################################################
procedure tdansguardian.DANSGUARDIAN_TAIL_START();
var
   pid:string;
   log_path:string;
   count:integer;
begin

if FileExists('/usr/bin/sarg') then begin

      exit;
end;

pid:=SYS.PIDOF(artica_path+'/bin/artica-dansguardian-stats');
if SYS.PROCESS_EXIST(pid) then begin
      if FileExists('/usr/bin/sarg') then DANSGUARDIAN_TAIL_STOP();
      logs.DebugLogs('Starting......: artica-dansguardian realtime logs already running with pid '+pid);
      exit;
end;
log_path:='/var/log/dansguardian/access.log';

if not FileExists(log_path) then begin
   logs.DebugLogs('Starting......: artica-dansguardian realtime stats, unable to stats logfile');
   exit;
end;

logs.DebugLogs('Starting......: artica-dansguardian realtime logs path: '+log_path);
fpsystem('/usr/bin/nohup /usr/bin/tail -f -n 0 '+log_path+'|'+artica_path+'/bin/artica-dansguardian-stats >/dev/null 2>&1 &');
pid:=SYS.PIDOF(artica_path+'/bin/artica-dansguardian-stats');
count:=0;
while not SYS.PROCESS_EXIST(SYS.PIDOF(artica_path+'/bin/artica-dansguardian-stats')) do begin

        sleep(100);
        inc(count);
        if count>40 then begin
           logs.DebugLogs('Starting......: artica-dansguardian realtime logs (timeout)');
           break;
        end;
  end;

pid:=SYS.PIDOF(artica_path+'/bin/artica-dansguardian-stats');
if SYS.PROCESS_EXIST(pid) then begin
      logs.DebugLogs('Starting......: artica-dansguardian realtime logs success with pid '+pid);
      exit;
end else begin
    logs.DebugLogs('Starting......: artica-dansguardian realtime logs failed');
end;
end;
//#####################################################################################
function tdansguardian.DANSGUARDIAN_TAIL_STATUS():string;
var
ini:TstringList;
pid:string;
Enabled:integer;
begin
   pid:=SYS.PIDOF('artica-dansguardian-stats');
   Enabled:=DansGuardianEnabled;
   ini:=TstringList.Create;

   if FileExists('/usr/bin/sarg') then Enabled:=0;


   ini.Add('[ARTICA_DANS_TAIL]');
      if SYS.PROCESS_EXIST(pid) then ini.Add('running=1') else  ini.Add('running=0');
      ini.Add('application_installed=1');
      ini.Add('master_pid='+ pid);
      ini.Add('master_memory=' + IntToStr(SYS.PROCESS_MEMORY(pid)));
      ini.Add('master_version=' + SYS.ReadFileIntoString(artica_path+'/VERSION'));
      ini.Add('status='+SYS.PROCESS_STATUS(pid));
      ini.Add('service_name=APP_ARTICA_DANSGUARDIAN_TAIL');
      ini.Add('service_cmd=dansguardian-tail');
      ini.Add('service_disabled='+ IntToStr(Enabled));

   result:=ini.Text;
   ini.free;
end;
//#####################################################################################
procedure tdansguardian.DANSGUARDIAN_TAIL_STOP();
var
   pid:string;
begin
pid:=SYS.PIDOF(artica_path+'/bin/artica-dansguardian-stats');
if not SYS.PROCESS_EXIST(pid) then begin
      writeln('artica-dansguardian realtime logs.: Already stopped');
      exit;
end;

writeln('artica-dansguardian realtime logs.: Stopping pid '+pid);
fpsystem('/bin/kill '+pid);

pid:=SYS.PIDOF(artica_path+'/bin/artica-dansguardian-stats');
if not SYS.PROCESS_EXIST(pid) then begin
      writeln('artica-dansguardian realtime logs.: stopped');
      exit;
end;

end;
//#####################################################################################


function tdansguardian.DANSGUARDIAN_CONFIG_VALUE(key:string):string;
var
   l           :TstringList;
   RegExpr     :TRegExpr;
   i           :integer;
begin

    if not FileExists(CONF_PATH()) then exit;
    RegExpr:=TRegExpr.Create;
    l:=TstringList.create;

    RegExpr.Expression:='^'+key+'[\s=]+(.*)';
    l.LoadFromFile(CONF_PATH());
    For i:=0 to l.Count-1 do begin
        if RegExpr.Exec(l.Strings[i]) then begin
               result:=trim(RegExpr.Match[1]);
               result:=trim(result);
         end;

    end;
    
    
    result:=AnsiReplaceText(result,'''','');
    RegExpr.free;
    l.free;

end;
 //#############################################################################
function tdansguardian.DANSGUARDIAN_DELETE_VALUE(key:string):string;
var
   l           :TstringList;
   RegExpr     :TRegExpr;
   i           :integer;
begin
    result:='';
    if not FileExists(CONF_PATH()) then exit;
    RegExpr:=TRegExpr.Create;
    l:=TstringList.create;

    RegExpr.Expression:='^'+key+'[\s=]+(.*)';
    l.LoadFromFile(CONF_PATH());
    For i:=0 to l.Count-1 do begin
        if RegExpr.Exec(l.Strings[i]) then begin
               l.Delete(i);
               logs.DebugLogs('Starting......: Dansguardian delete key ' + key + ' line ' + IntToStr(i));
               l.SaveToFile(CONF_PATH());
               break;
         end;

    end;

    RegExpr.free;
    l.free;

end;
 //#############################################################################
 procedure tdansguardian.VERIFY_CONFFILE();
 var
  l:TstringList;
  i:Integer;
  kavExists:boolean;
  downloadmanager:string;
 begin
 kavExists:=false;
  if FileExists(C_ICAP_BIN_PATH()) then begin
       if FileExists(clamav.CLAMSCAN_BIN_PATH()) then begin
          kavExists:=true;
       end;
  end;
  DANSGUARDIAN_TEMPLATE();
  DANSGUARDIAN_FILE_IP_CONF();
  downloadmanager:=DANSGUARDIAN_CONFIG_VALUE('downloadmanager');
  if length(downloadmanager)=0 then begin
       logs.Debuglogs('Starting......: DansGuardian choosing default download manager');
       DANSGUARDIAN_CONFIG_VALUE_SET('downloadmanager','/etc/dansguardian/downloadmanagers/default.conf');
  end;

  if not FileExists('/etc/dansguardian/filtergroupslist') then begin
     if FIleExists('/etc/dansguardian/lists/filtergroupslist') then begin
        logs.Debuglogs('Starting......: Dansguardian creating filtergroupslist');
        if not FileExists('/etc/dansguardian/filtergroupslist') then logs.OutputCmd('/bin/ln -s /etc/dansguardian/lists/filtergroupslist /etc/dansguardian/filtergroupslist');
     end else begin
        logs.Debuglogs('Starting......: Dansguardian creating filtergroupslist');
        logs.OutputCmd('/bin/touch  /etc/dansguardian/filtergroupslist');
     end;
  end;


  if DirectoryExists('/etc/dansguardian/lists/phraselists') then begin
     if not DirectoryExists('/etc/dansguardian/phraselists') then logs.OutputCmd('/bin/ln -s /etc/dansguardian/lists/phraselists /etc/dansguardian/phraselists');
  end;

  if not FileExists('/etc/dansguardian/phraselists/goodphrases/exception') then fpsystem('/bin/touch /etc/dansguardian/phraselists/goodphrases/exception');
  
  if not FileExists('/etc/dansguardian/exceptioniplist') then begin
     if FileExists('/etc/dansguardian/lists/exceptioniplist') then begin
        if not FileExists('/etc/dansguardian/exceptioniplist') then logs.OutputCmd('/bin/ln -s /etc/dansguardian/lists/exceptioniplist /etc/dansguardian/exceptioniplist');
     end;
  end;
  
  if not FileExists('/etc/dansguardian/bannediplist') then begin
     if FileExists('/etc/dansguardian/lists/bannediplist') then begin
        logs.OutputCmd('/bin/ln -s /etc/dansguardian/lists/bannediplist /etc/dansguardian/bannediplist');
     end;
  end;
  
  if not DirectoryExists('/etc/dansguardian/languages') then begin
     if DirectoryExists('/usr/share/dansguardian/languages') then begin
        logs.OutputCmd('/bin/ln -s /usr/share/dansguardian/languages /etc/dansguardian/languages');
     end;
  end;
  
  if not FileExists('/etc/dansguardian/downloadmanagers/trickle.conf') then begin
     logs.OutputCmd('/bin/ln -s /etc/dansguardian/downloadmanagers/default.conf /etc/dansguardian/downloadmanagers/trickle.conf');
  end;
  
     l:=TstringList.Create;
     l.AddStrings(SYS.DirFiles('/etc/dansguardian','dansguardian*.conf'));


     for i:=0 to l.Count-1 do begin
         logs.Debuglogs('Checking /etc/dansguardian/'+l.Strings[i]);
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'exceptionextensionlist','/etc/dansguardian/exceptionextensionlist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'exceptionmimetypelist' ,'/etc/dansguardian/exceptionmimetypelist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'exceptionphraselist'   ,'/etc/dansguardian/lists/exceptionphraselist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'exceptionurllist'      ,'/etc/dansguardian/lists/exceptionurllist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'weightedphraselist'    ,'/etc/dansguardian/lists/weightedphraselist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'exceptionphraselist'   ,'/etc/dansguardian/lists/exceptionphraselist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'bannedsitelist'        ,'/etc/dansguardian/lists/bannedsitelist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'greysitelist'          ,'/etc/dansguardian/lists/greysitelist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'exceptionsitelist'     ,'/etc/dansguardian/lists/exceptionsitelist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'bannedurllist'         ,'/etc/dansguardian/lists/bannedurllist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'greyurllist'           ,'/etc/dansguardian/lists/greyurllist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'exceptionurllist'      ,'/etc/dansguardian/lists/exceptionurllist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'exceptionregexpurllist','/etc/dansguardian/lists/exceptionregexpurllist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'bannedregexpurllist'   ,'/etc/dansguardian/lists/bannedregexpurllist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'bannedregexpheaderlist','/etc/dansguardian/lists/bannedregexpheaderlist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'picsfile'              ,'/etc/dansguardian/lists/pics');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'contentregexplist'     ,'/etc/dansguardian/lists/contentregexplist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'urlregexplist'         ,'/etc/dansguardian/lists/urlregexplist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'exceptionextensionlist','/etc/dansguardian/lists/exceptionextensionlist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'exceptionmimetypelist' ,'/etc/dansguardian/lists/exceptionmimetypelist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'exceptionfilesitelist' ,'/etc/dansguardian/lists/exceptionfilesitelist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'exceptionfileurllist'  ,'/etc/dansguardian/lists/exceptionfileurllist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'bannedextensionlist'   ,'/etc/dansguardian/lists/bannedextensionlist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'bannedmimetypelist'    ,'/etc/dansguardian/lists/bannedmimetypelist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'logsitelist'           ,'/etc/dansguardian/lists/logsitelist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'logurllist'            ,'/etc/dansguardian/lists/logurllist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'logregexpurllist'      ,'/etc/dansguardian/lists/logregexpurllist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'headerregexplist'      ,'/etc/dansguardian/lists/headerregexplist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'bannedregexpheaderlist','/etc/dansguardian/lists/bannedregexpheaderlist');
         VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'headerregexplist'      ,'/etc/dansguardian/lists/headerregexplist');
         


         
         if kavExists then begin
            VERIFY_CONFFILE_FILE_2('/etc/dansguardian/'+l.Strings[i],'contentscanner','/etc/dansguardian/contentscanners/icapscan.conf');
         end else begin
             DANSGUARDIAN_DELETE_VALUE('contentscanner');
         end;


         end;
         
         
         
         
    end;
 //#############################################################################
procedure tdansguardian.VERIFY_CONFFILE_FILE_2(conf:string;key:string;path:string);
var
   l           :TstringList;
   RegExpr     :TRegExpr;
   RegExpr2    :tRegExpr;
   i           :integer;
   found       :boolean;
   Ipath        :string;
   confname     :string;
begin
  found:=false;
  if not FileExists(conf) then exit;
  if not FileExists(path) then logs.OutputCmd('/bin/touch ' + path);
  confname:=ExtractFileName(conf);
  
  
  l:=TstringList.Create;
  l.LoadFromFile(conf);
  RegExpr:=TRegExpr.Create;
  RegExpr2:=TRegExpr.Create;
  RegExpr.Expression:='^'+key;
  for i:=0 to l.Count-1 do begin
     if RegExpr.Exec(l.Strings[i]) then begin
          logs.Debuglogs('VERIFY_CONFFILE_FILE_2:: Found "'+l.Strings[i]+'"' );
          l.Strings[i]:=AnsiReplaceText(l.Strings[i],'''','');
          RegExpr2.Expression:='(.+?)\s+=\s+(.+)';
          if RegExpr2.Exec(l.Strings[i]) then begin
             Ipath:=trim(RegExpr2.Match[2]);
             Ipath:=AnsiReplaceText(Ipath,'"','');
             logs.Debuglogs('VERIFY_CONFFILE_FILE_2:: Check ipath="'+Ipath+'"');
             if Copy(Ipath,0,1)<>'/' then continue;
             if not FileExists(Ipath) then begin
                if Not DirectoryExists(ExtractFilePath(Ipath)) then ForceDirectories(ExtractFilePath(Ipath));
                logs.Debuglogs('VERIFY_CONFFILE_FILE_2::['+confname+'] "'+Ipath+'" doesn''t exist... create it');
                logs.OutputCmd('/bin/touch '+Ipath);
             end;
          end;
         found:=True;
         break;
     end;
  end;

  if not found then begin
     logs.Debuglogs('VERIFY_CONFFILE_FILE_2::['+confname+'] Adding '+path);
     l.Add(key + ' = '+''''+path+'''');
     try
     l.SaveToFile(conf);
     except
      logs.Syslogs('VERIFY_CONFFILE_FILE_2::['+confname+'] Fatal error while saving '+path);
      exit;
     end;
  end;
  l.free;
  RegExpr.free;

end;
 //#############################################################################

procedure tdansguardian.DANSGUARDIAN_TEMPLATE();
var
DansGuardianHTMLTemplate:string;
l:TstringList;
i:integer;
begin

DansGuardianHTMLTemplate:=SYS.GET_INFO('DansGuardianHTMLTemplate');
if length(DansGuardianHTMLTemplate)<10 then begin
   if FileExists('/usr/share/artica-postfix/bin/install/dansguardian/template.html') then begin
      logs.DebugLogs('Starting......: Dansguardian installing new template file..');
      SYS.set_INFO('DansGuardianHTMLTemplate',logs.ReadFromFile('/usr/share/artica-postfix/bin/install/dansguardian/template.html'));
      DansGuardianHTMLTemplate:=SYS.GET_INFO('DansGuardianHTMLTemplate');
   end;

end;

if not CheckUserButton() then begin
      logs.DebugLogs('Starting......: Dansguardian unable to parse USER_BUTTON, installing default template');
      SYS.set_INFO('DansGuardianHTMLTemplate',logs.ReadFromFile('/usr/share/artica-postfix/bin/install/dansguardian/template.html'));
      CheckUserButton();
end;

DansGuardianHTMLTemplate:=SYS.GET_INFO('DansGuardianHTMLTemplate');




l:=TstringList.Create;
l.Add('/etc/dansguardian/languages/ukenglish/template.html');
l.add('/etc/dansguardian/languageslithuanian/template.html');
l.add('/etc/dansguardian/languagesptbrazilian/template.html');
l.add('/etc/dansguardian/languagesslovak/template.html');
l.add('/etc/dansguardian/languagesitalian/template.html');
l.add('/etc/dansguardian/languagesmalay/template.html');
l.add('/etc/dansguardian/languagesportuguese/template.html');
l.add('/etc/dansguardian/languageshebrew/template.html');
l.add('/etc/dansguardian/languagesrussian-koi8-r/template.html');
l.add('/etc/dansguardian/languagesfrench/template.html');
l.add('/etc/dansguardian/languagesdanish/template.html');
l.add('/etc/dansguardian/languageschinesegb2312/template.html');
l.add('/etc/dansguardian/languagesjapanese/template.html');
l.add('/etc/dansguardian/languagesukenglish/template.html');
l.add('/etc/dansguardian/languagesturkish/template.html');
l.add('/etc/dansguardian/languagesmxspanish/template.html');
l.add('/etc/dansguardian/languagespolish/template.html');
l.add('/etc/dansguardian/languagesspanish/template.html');
l.add('/etc/dansguardian/languagesswedish/template.html');
l.add('/etc/dansguardian/languageshungarian/template.html');
l.add('/etc/dansguardian/languagesarspanish/template.html');
l.add('/etc/dansguardian/languagesbulgarian/template.html');
l.add('/etc/dansguardian/languagesindonesian/template.html');
l.add('/etc/dansguardian/languageschinesebig5/template.html');
l.add('/etc/dansguardian/languagesgerman/template.html');
l.add('/etc/dansguardian/languagesczech/template.html');
l.add('/etc/dansguardian/languagesdutch/template.html');
l.add('/etc/dansguardian/languagesrussian-1251/template.html');
      logs.DebugLogs('Starting......: Dansguardian installing template file in all language');
for i:=0 to l.Count-1 do begin
    if FileExists(l.Strings[i]) then logs.WriteToFile(DansGuardianHTMLTemplate,l.Strings[i]);
end;
    l.free;


end;
//##############################################################################
function tdansguardian.CheckUserButton():boolean;
var
   l:TstringList;
   RegExpr     :TRegExpr;
   i:integer;
   DansGuardianEnableUserArticaIP:string;
   script:string;
begin
result:=false;
DansGuardianEnableUserArticaIP:=trim(SYS.GET_INFO('DansGuardianEnableUserArticaIP'));

if not FileExists('/etc/artica-postfix/settings/Daemons/DansGuardianHTMLTemplate') then exit();

script:='<script>';
script:=script+'function ljs(){';
script:=script+'var myhostname="'+DansGuardianEnableUserArticaIP+'";';
script:=script+'var myport="";var myurl="-URL-";';
script:=script+'var myreason="-REASONLOGGED-";var hostname=location.hostname;';
script:=script+'if(myhostname.length==0){myhostname=hostname;}if(myport.length==0){myport="9000";}';
script:=script+'var src="https://"+myhostname+":"+myport+"/dansguardian.users.index.php?uri="+myurl+"&myreason="+myreason;';
script:=script+'document.location.href=src;';
script:=script+'}';
script:=script+'</script><tr><td colspan=2 align="center"><input type="button" OnClick="javascript:ljs();" value="Continue..."></td></tr>';



   l:=TstringList.Create;
   l.LoadFromFile('/etc/artica-postfix/settings/Daemons/DansGuardianHTMLTemplate');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='USER_BUTTON';
   for i:=0 to l.Count-1 do begin
      if RegExpr.Exec(l.Strings[i]) then begin
         logs.DebugLogs('Starting......: Dansguardian Enable release banned site: ' + IntToStr(DansGuardianEnableUserFrontEnd));
         if DansGuardianEnableUserFrontEnd=1 then l.Strings[i]:='<!-- USER_BUTTON -->'+ script else l.Strings[i]:='<!-- USER_BUTTON -->';
         result:=true;
         break;
      end;
   end;
   l.SaveToFile('/etc/artica-postfix/settings/Daemons/DansGuardianHTMLTemplate');
   RegExpr.free;
   l.free;
end;
//#############################################################################
procedure tdansguardian.DANSGUARDIAN_FIX_GROUPS_NUMBER();
begin
    SYS.DirFiles('/etc/dansguardian','dansguardianf*.conf');
    logs.Debuglogs('Starting......: Dansguardian store ' + IntToStr(SYS.DirListFiles.Count) + ' rule(s) number');
    DANSGUARDIAN_CONFIG_VALUE_SET('filtergroups',IntToStr(SYS.DirListFiles.Count));
end;
//#############################################################################
procedure tdansguardian.BLACKLIST_USER_CATEGORIES();
var
   l:TstringList;
   RegExpr     :TRegExpr;
   i:integer;
begin

    if Not FileExists('/etc/artica-postfix/settings/Daemons/DansGuardianBlackListUserCategoriesIndex') then exit;
    l:=TstringList.Create;
    l.LoadFromFile('/etc/artica-postfix/settings/Daemons/DansGuardianBlackListUserCategoriesIndex');

    for i:=0 to l.Count-1 do begin
        if not DirectoryExists('/etc/dansguardian/lists/blacklists/'+l.Strings[i]) then begin
           forceDirectories('/etc/dansguardian/lists/blacklists/'+l.Strings[i]);
        end;

        logs.OutputCmd('/bin/touch /etc/dansguardian/lists/blacklists/'+l.Strings[i]+'/domains');
        if FIleExists('/etc/artica-postfix/settings/Daemons/DansGuardianBlackListUserCategories_'+l.Strings[i]) then begin
          logs.OutputCmd('/bin/cp -f /etc/artica-postfix/settings/Daemons/DansGuardianBlackListUserCategories_'+l.Strings[i]+' /etc/dansguardian/lists/blacklists/'+l.Strings[i]+'/domains');
        end;
    end;
end;
//#############################################################################
procedure tdansguardian.WEIGHTED_PHRASES_LIST_USER_CATEGORIES();
var
   l:TstringList;
   RegExpr     :TRegExpr;
   i:integer;
begin

    if Not FileExists('/etc/artica-postfix/settings/Daemons/DansGuardianWeightedPhraseUserCategoriesIndex') then exit;
    l:=TstringList.Create;
    l.LoadFromFile('/etc/artica-postfix/settings/Daemons/DansGuardianWeightedPhraseUserCategoriesIndex');

    for i:=0 to l.Count-1 do begin
        if not DirectoryExists('/etc/dansguardian/lists/phraselists/'+l.Strings[i]) then begin
           forceDirectories('/etc/dansguardian/lists/phraselists/'+l.Strings[i]);
        end;

        logs.OutputCmd('/bin/touch /etc/dansguardian/lists/phraselists/'+l.Strings[i]+'/weighted');
        if FIleExists('/etc/artica-postfix/settings/Daemons/DansGuardianWeightedPhraseListUserCategories'+l.Strings[i]) then begin
          logs.OutputCmd('/bin/cp -f /etc/artica-postfix/settings/Daemons/DansGuardianWeightedPhraseListUserCategories'+l.Strings[i]+' /etc/dansguardian/lists/phraselists/'+l.Strings[i]+'/weighted');
        end;
    end;
end;
//#############################################################################




procedure tdansguardian.DANSGUARDIAN_CONFIG_VALUE_SET(key:string;value:string);
var
   l           :TstringList;
   RegExpr     :TRegExpr;
   i           :integer;
   found       :boolean;
begin
    found:=false;
    if not FileExists(CONF_PATH()) then exit;
    RegExpr:=TRegExpr.Create;
    l:=TstringList.create;

    RegExpr.Expression:='^'+Lowercase(key)+'[\s=]+(.*)';
    l.LoadFromFile(CONF_PATH());
    For i:=0 to l.Count-1 do begin
      if RegExpr.Exec(Lowercase(l.Strings[i])) then begin
              found:=true;
              l.Strings[i]:=key + ' = ' + value;
              break;
         end;

    end;

    if not found then begin
        logs.DebugLogs('Starting......: Dansguardian adding setting '+ key + ' "' + value+'"');
        l.Add(key + ' = ' + value);
    end;

    logs.WriteToFile(l.Text,CONF_PATH());
    RegExpr.free;
    l.free;

end;


//#############################################################################
 procedure tdansguardian.C_ICAP_VALUE_SET(key:string;value:string);
var
   l           :TstringList;
   RegExpr     :TRegExpr;
   i           :integer;
   found       :boolean;
   keyF        :string;
begin
    found:=false;
    if not FileExists(C_ICAP_CONF_PATH()) then begin
       logs.Debuglogs('C_ICAP_VALUE_SET:: unable to stat c-icap.conf');
       exit;
    end;
    RegExpr:=TRegExpr.Create;
    l:=TstringList.create;
    keyF:=key;
    keyF:=AnsiReplaceText(keyF,'.','\.');

    RegExpr.Expression:='^'+keyF+'\s+(.*)';
    l.LoadFromFile(C_ICAP_CONF_PATH());
    For i:=0 to l.Count-1 do begin
      if RegExpr.Exec(l.Strings[i]) then begin
              found:=true;
              logs.Debuglogs('C_ICAP_VALUE_SET:: (modify) '+key + ' ' + value);
              l.Strings[i]:=key + ' ' + value;
              break;
         end;

    end;

    if not found then begin
        logs.Debuglogs('C_ICAP_VALUE_SET:: (Add) '+key + ' ' + value);
        l.Add(key + ' ' + value);
    end;

    l.SaveToFile(C_ICAP_CONF_PATH());
    RegExpr.free;
    l.free;

end;


//#############################################################################
function tdansguardian.DANSGUARDIAN_BIN_VERSION(version:string):int64;
var
   tmp            :string;
   tmp2           :string;
   RegExpr        :TRegExpr;
   t              :integer;
   i              :int64;
begin
   result:=0;
   RegExpr:=TRegExpr.Create;
   tmp2:=trim(AnsiReplaceText(version,'-',''));
   tmp2:=trim(AnsiReplaceText(version,'.',''));
   if length(tmp2)=3 then tmp2:=tmp2+'0';
   if length(tmp2)=2 then tmp2:=tmp2+'00';
   if not TryStrToInt64(tmp2,result) then writeln('int64 failed');
end;
//#############################################################################
procedure tdansguardian.BUILD_DEFAULT_RULE();
var
l:TstringList;
begin
l:=TstringList.Create;
if FileExists('/etc/dansguardian/dansguardianf1.conf') then exit;
l.Add('groupmode = 1');
l.Add('groupname = ''Default rule''');
l.Add('bannedphraselist = ''/etc/dansguardian/lists/bannedphraselist''');
l.Add('weightedphraselist = ''/etc/dansguardian/lists/weightedphraselist''');
l.Add('exceptionphraselist = ''/etc/dansguardian/lists/exceptionphraselist''');
l.Add('bannedsitelist = ''/etc/dansguardian/lists/bannedsitelist''');
l.Add('greysitelist = ''/etc/dansguardian/lists/greysitelist''');
l.Add('exceptionsitelist = ''/etc/dansguardian/lists/exceptionsitelist''');
l.Add('bannedurllist = ''/etc/dansguardian/lists/bannedurllist''');
l.Add('greyurllist = ''/etc/dansguardian/lists/greyurllist''');
l.Add('exceptionurllist = ''/etc/dansguardian/lists/exceptionurllist''');
l.Add('exceptionregexpurllist = ''/etc/dansguardian/lists/exceptionregexpurllist''');
l.Add('bannedregexpurllist = ''/etc/dansguardian/lists/bannedregexpurllist''');
l.Add('picsfile = ''/etc/dansguardian/lists/pics''');
l.Add('contentregexplist = ''/etc/dansguardian/lists/contentregexplist''');
l.Add('urlregexplist = ''/etc/dansguardian/lists/urlregexplist''');
l.Add('blockdownloads = off');
l.Add('exceptionextensionlist = ''/etc/dansguardian/lists/exceptionextensionlist''');
l.Add('exceptionmimetypelist = ''/etc/dansguardian/lists/exceptionmimetypelist''');
l.Add('bannedextensionlist = ''/etc/dansguardian/lists/bannedextensionlist''');
l.Add('bannedmimetypelist = ''/etc/dansguardian/lists/bannedmimetypelist''');
l.Add('exceptionfilesitelist = ''/etc/dansguardian/lists/exceptionfilesitelist''');
l.Add('exceptionfileurllist = ''/etc/dansguardian/lists/exceptionfileurllist''');
l.Add('logsitelist = ''/etc/dansguardian/lists/logsitelist''');
l.Add('logurllist = ''/etc/dansguardian/lists/logurllist''');
l.Add('logregexpurllist = ''/etc/dansguardian/lists/logregexpurllist''');
l.Add('headerregexplist = ''/etc/dansguardian/lists/headerregexplist''');
l.Add('bannedregexpheaderlist = ''/etc/dansguardian/lists/bannedregexpheaderlist''');
l.Add('naughtynesslimit = 50');
l.Add('categorydisplaythreshold = 0');
l.Add('embeddedurlweight = 0');
l.Add('enablepics = off');
l.Add('bypass = 0');
l.Add('bypasskey = ''''''');
l.Add('infectionbypass = 0');
l.Add('infectionbypasskey = ''''''');
l.Add('infectionbypasserrorsonly = on');
l.Add('disablecontentscan = off');
l.Add('deepurlanalysis = off');
l.Add('reportinglevel = 3');
l.Add('#accessdeniedaddress = ''http://YOURSERVER.YOURDOMAIN/cgi-bin/dansguardian.pl''');
l.Add('usesmtp = off');
l.Add('mailfrom = ''''''');
l.Add('avadmin = ''''''');
l.Add('contentadmin = ''''''');
l.Add('avsubject = ''dansguardian virus block''');
l.Add('contentsubject = ''dansguardian violation''');
l.Add('notifyav = off');
l.Add('notifycontent = off');
l.Add('thresholdbyuser = off');
l.Add('violations = 0');
l.Add('threshold = 0');
try
   l.SaveToFile('/etc/dansguardian/dansguardianf1.conf');
except
   logs.Syslogs('tdansguardian.BUILD_DEFAULT_RULE():: Warning, unable to build default rule /etc/dansguardian/dansguardianf1.conf');
end;

l.free;
end;
//#############################################################################


end.
