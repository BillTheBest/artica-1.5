unit global_conf;
{$MODE DELPHI}
//{$mode objfpc}{$H+}
{$LONGSTRINGS ON}

interface

uses
//depreciated oldlinux -> linux
Classes, SysUtils,Process,strutils,IniFiles,RegExpr in 'RegExpr.pas',unix,libc,logs,dateutils,zsystem,uHashList,Geoip,BaseUnix,md5,samba,
cyrus,clamav,spamass,pureftpd,openldap,roundcube,ntpd,spfmilter,mimedefang,squid,stunnel4,dkimfilter,postfix_class,mailgraph_class,miltergreylist,lighttpd,xfce,monitorix,
dansguardian,kav4samba;
type
  TStringDynArray = array of string;

  type

  { MyConf }

  MyConf=class


private
       GLOBAL_INI:TIniFile;
       procedure  killfile(path:string);
       function   GetIPAddressOfInterface( if_name:ansistring):ansistring;
       procedure  ShowScreen(line:string);
       function   POSTFIX_EXTRAINFOS_PATH(filename:string):string;
       LOGS                :tlogs;
       notdebug2           :boolean;
       download_silent     :boolean;
       function FileSize_ko(path:string):longint;
       CCYRUS:Tcyrus;
       clamav:Tclamav;
       spamass:Tspamass;
       Cpureftpd:Tpureftpd;
       ldap:topenldap;
       roundcube:Troundcube;
       ntpd:tNTPD;
       spfm:tspf;
       samba:tsamba;
       mimedef:tmimedefang;
       squid:Tsquid;
       stunnel:tstunnel;
       dkim: tdkim;
       postfix:tpostfix;
       mailgraph:tMailgraphClass;
       miltergreylist:tmilter_greylist;
       lighttpd:Tlighttpd;
       global_backup_usb_path:string;
       dansguardian:Tdansguardian;
       monitorix:Tmonitorix;
       kav4samba:Tkav4Samba;

public

      function ARTICA_AutomaticConfig():boolean;
      procedure ARTICA_POLICY_START();
      FUNCTION ADD_PROCESS_QUEUE(command:string):string;
      FUNCTION GLOBAL_STATUS():string;
      function CGI_ALL_APPLIS_INSTALLED():string;
      function INYADIN_VERSION():string;
      PROCEDURE BuildDeb(targetfile:string;targetversion:string);


      procedure THREAD_COMMAND_SET(zcommands:string);
      function CheckInterface( if_name:string):boolean;
      function GetIPInterface( if_name:string):string;

      function  ReadFileIntoString(path:string):string;
      procedure set_INFOS(key:string;val:string);
      function  get_INFOS(key:string):string;
      procedure set_LDAP(key:string;val:string);
      function  get_LDAP(key:string):string;
      procedure ExecProcess(commandline:string);
      procedure MonShell(cmd:string;sh:boolean);
      function  MD5FromString(value:string):string;


      // Kaspersky Anti-spam
      function  KAS_INIT():string;
      function  KAS_GET_VALUE(key:string):string;
      procedure KAS_WRITE_VALUE(key:string;datas:string);
      function  KAS_STATUS():string;
      function  KAS_VERSION():string;
      procedure KAS_DELETE_VALUE(key:string);
      function  KAS_APPLY_RULES(path:string):boolean;
      FUNCTION  KAS_AP_SPF_PID():string;
      FUNCTION  KAS_AP_PROCESS_SERVER_PID():string;
      FUNCTION  KAS_LICENCE_PID():string;
      FUNCTION  KAS_THTTPD_PID():string;
      FUNCTION  KAS_MILTER_PID():string;
      procedure KAS_MILTER_START();
      procedure KAS_MILTER_STOP();
      FUNCTION  KAS_MILTER_STATUS():string;

      procedure KAV6_STOP();
      procedure KAV6_START();
      function  KAV_MILTER_PID():string;
      function  KAV_MILTER_MEMORY():string;
      function  KAVMILTER_GET_VALUE(KEY:string;VALUE:string):string;
      function  KAVMILTER_PATTERN_DATE():string;
      function  KAVMILTERD_GET_LASTLOGS():string;
      function  KAVMILTERD_GET_LOGS_PATH():string;
      function  KAVMILTER_GET_VERSION():string;

      function  PERL_VERSION():string;
      function  PERL_BIN_PATH():string;
      function  PERL_INCFolders():TstringList;
      procedure PERL_PATCHING_HEADER(path:string);





      //LDAP

      function     LDAP_GET_DAEMON_USERNAME():string;
      function     LDAP_GET_BIN_PATH:string;
      PROCEDURE    LDAP_DB_CONFIG();
      function     LDAP_INITD():string;
      function     LDAP_SLAPADD_BIN_PATH():string;

      //AWSTATS
      function  AWSTATS_GET_VALUE(key:string):string;
      function  AWSTATS_SET_VALUE(key:string;value:string):string;
      function  AWSTATS_SET_PLUGIN(value:string):string;
      function  AWSTATS_MAILLOG_CONVERT_PATH_SOURCE():string;
      function  AWSTATS_PATH():string;
      function  AWSTATS_VERSION():string;
      procedure AWSTATS_ADD_ETCPATH();
      procedure AWSTATS_GENERATE();
      function  AWSTATS_ETC_PATH():string;

      //Mailromd
      procedure      MAILFROMD_START();
      function       MAILFROMD_STOP():string;
      function       MAILFROMD_PID():string;
      FUNCTION       MAILFROMD_STATUS():string;
      function       MAILFROMD_VALUES(key:string):string;
      function       MAILFROMD_PATH():string;

      //CYRUS


      procedure      CYRUS_SET_V2(val:string);
      function       CYRUS_GET_V2():string;
      FUNCTION       CYRUS_IMAP_GET_VALUE(key:string):string;


      //MHONARC
      function       MHONARC_VERSION():string;

      //USB
      function       SCAN_USB():string;
      function       usb_devinfo_path(path:string):string;
      function       usb_mount_point(path:string):string;
      function       usb_size(pathFrom:string;pathTo:string):string;
      function       UsbExists(uuid:string):boolean;
      function       usbMountPoint(target_uuid:string):string;
      procedure      BACKUP_USB();


      //CLAMAV

      function       CLAMD_GETINFO(Key:String):string;
      procedure      CLAMD_SETINFO(Key:String;value:string);
      function       CLAMD_CONF_PATH():string;
      function       CLAMDSCAN_BIN_PATH():string;
      

      
      //backup
      FUNCTION       TEMP_DATE():string;
      FUNCTION       BACKUP_MYSQL():string;
      FUNCTION       BACKUP_ARTICA_STATUS():string;


      //AMAVISD-NEW
      function       AMAVISD_VERSION():string;
      function       AMAVISD_PID() :string;
      procedure      AMAVISD_START();
      procedure      AMAVISD_STOP();
      procedure      AMAVISD_PF_START();
      procedure      AMAVISD_PF_STOP();

      //iptables
      function       IPTABLES_PATH():string;
      function       IPTABLES_VERSION():string;
      function       IPTABLES_STATUS():string;
      function       IPTABLES_LIST_NICS():string;
      FUNCTION       IPTABLES_CURRENT_RULES():string;
      FUNCTION       IPTABLES_EVENTS():string;


      //pure-ftpd
      procedure      PURE_FTPD_PREPARE_LDAP_CONFIG();
      procedure      PURE_FTPD_DELCONFIG(key:string);
      procedure      PURE_FTPD_SETCONFIG(key:string;value:string);

      
      //ARTICA TAIL
      function       ARTICA_TAIL_PID():string;
      procedure      ARTICA_TAIL_START();
      procedure      ARTICA_TAIL_STOP();
      FUNCTION       ARTICA_TAIL_STATUS():string;

      //SHARED FOLDERS
      function       SHARED_CONF_GET_CLIENTS(SharedSource:string):TStringList;


      //OBM
      function       APACHE_OBM_PID():string;
      FUNCTION       OBM_APACHE_STATUS():string;
      procedure      APACHE_OBM_START();
      procedure      APACHE_OBM_STOP();
      procedure      OBM_SYNCHRO();


      function  MAILMAN_GET_PID():string;
      function  MAILMAN_VERSION():string;

      function  RRDTOOL_SecondsBetween(longdate:string):string;
      function  RRDTOOL_VERSION():string;
      function  RRDTOOL_TIMESTAMP(longdate:string):string;
      function  RRDTOOL_LOAD_AVERAGE():string;
      function  RRDTOOL_BIN_PATH():string;
      PROCEDURE RRDTOOL_FIX();

      function RRDTOOL_STAT_LOAD_AVERAGE_DATABASE_PATH():string;
      function RRDTOOL_STAT_LOAD_CPU_DATABASE_PATH():string;
      function RRDTOOL_STAT_LOAD_MEMORY_DATABASE_PATH():string;
      function RRDTOOL_STAT_POSTFIX_MAILS_SENT_DATABASE_PATH():string;

      procedure RDDTOOL_POSTFIX_MAILS_SENT_STATISTICS();
      procedure RDDTOOL_POSTFIX_MAILS_CREATE_DATABASE();

      procedure RDDTOOL_LOAD_AVERAGE_GENERATE();
      procedure RDDTOOL_LOAD_CPU_GENERATE();
      procedure RDDTOOL_LOAD_MEMORY_GENERATE();
      function  RRDTOOL_GRAPH_HEIGHT():string;
      function  RRDTOOL_GRAPH_WIDTH():string;
      procedure RDDTOOL_POSTFIX_MAILS_SENT_GENERATE();

      function  DSPAM_GET_PARAM(key:string):string;
      procedure DSPAM_EDIT_PARAM(key:string;value:string);
      function  DSPAM_IS_PARAM_EXISTS(key:string;value:string):boolean;
      procedure DSPAM_EDIT_PARAM_MULTI(key:string;value:string);
      procedure DSPAM_REMOVE_PARAM(key:string);
      function  DSPAM_BIN_PATH():string;

      function       FETCHMAIL_VERSION():string;
      function       FETCHMAIL_STATUS():string;
      function       FETCHMAIL_DAEMON_POOL():string;
      function       FETCHMAIL_DAEMON_POSTMASTER():string;
      function       FETCHMAIL_BIN_PATH():string;
      function       FETCHMAIL_START_DAEMON():boolean;
      function       FETCHMAIL_PID():string;
      procedure      FETCHMAIL_APPLY_CONF(conf_datas:string);
      procedure      FETCHMAIL_APPLY_GETLIVE(conf_datas:string);
      procedure      FETCHMAIL_APPLY_GETLIVE_CONF();
      function       GETLIVE_VERSION():string;

      function       INADYN_PERFORM(IniData:String;UpdatePeriod:integer):string;
      function       INADYN_PID():string;
      procedure      INADYN_PERFORM_STOP();

      function       XINETD_BIN():string;
      function       XINETD_PID():string;
      procedure      HOTWAYD_START();
      function       HOTWAYD_VERSION():string;


      function RENATTACH_VERSION():string;
      function FETCHMAIL_SERVER_PARAMETERS(param:string):string;
      function FETCHMAIL_COUNT_SERVER():integer;
      function FETCHMAIL_DAEMON_STOP():string;
      function get_repositories_librrds_perl():boolean;

      function  CRON_CREATE_SCHEDULE(ProgrammedTime:string;Croncommand:string;name:string):boolean;
      function  CRON_PID():string;
      function  CROND_INIT_PATH():string;

      function PHP5_LIB_MODULES_PATH():string;

      function CERTIFICATE_PASS(path:string):string;
      function CERTIFICATE_PATH(path:string):string;
      function CERTIFICATE_CA_FILENAME(path:string):string;
      function CERTIFICATE_KEY_FILENAME(path:string):string;
      function CERTIFICATE_CERT_FILENAME(path:string):string;

      function PROCMAIL_VERSION():string;
      function PROCMAIL_INSTALLED():boolean;
      function PROCMAIL_LOGS_PATH():string;
      function PROCMAIL_USER():string;
      function PROCMAIL_QUARANTINE_PATH():string;
      function PROCMAIL_QUARANTINE_SIZE(username:string):string;
      function PROCMAIL_QUARANTINE_USER_FILE_NUMBER(username:string):string;
      function PROCMAIL_READ_QUARANTINE(fromFileNumber:integer;tofilenumber:integer;username:string):TstringList;
      function PROCMAIL_READ_QUARANTINE_FILE(file_to_read:string):string;

      function  DNSMASQ_SET_VALUE(key:string;value:string):string;
      function  DNSMASQ_GET_VALUE(key:string):string;
      function  DNSMASQ_BIN_PATH():string;
      function  DNSMASQ_VERSION:string;
      procedure DNSMASQ_START_DAEMON();
      procedure DNSMASQ_STOP_DAEMON();
      function  DNSMASQ_PID():string;



      function  BOGOFILTER_VERSION():string;
      function  BOGOFILTER_BIN_PATH():string;
      function  LIB_GSL_VERSION():string;

      //OPENSSL
      function  OPENSSL_TOOL_PATH():string;
      function  OPENSSL_VERSION():string;
      procedure OPENSSL_CERTIFCATE_CONFIG();

      function ROUNDCUBE_VERSION():string;
      function ROUNDCUBE_DEFAULT_CONFIG():string;
      function ROUNDCUBE_MYSQL_CONFIG():string;


      function GetAllApplisInstalled():string;

      function          KAV4PROXY_VERSION():string;
      function          KAV4PROXY_PID():string;
      procedure         KAV4PROXY_START();
      procedure         KAV4PROXY_STOP();
      function          KAV4PROXY_GET_VALUE(KEY:string;VALUE:string):string;
      function          KAV4PROXY_PATTERN_DATE():string;

      function  get_repositories_Checked():boolean;

      //POSTFIX
      function  POSTFIX_HEADERS_CHECKS():string;
      procedure POSTFIX_CHECK_POSTMAP();
      function  POSTFIX_QUEUE_FILE_NUMBER(directory_name:string):string;
      function  POSFTIX_READ_QUEUE_FILE_LIST(fromFileNumber:integer;tofilenumber:integer;queuepath:string;include_source:boolean):TstringList;
      function  POSTFIX_READ_QUEUE_MESSAGE(MessageID:string):string;
      function  POSFTIX_CACHE_QUEUE_FILE_LIST(QueueName:string):boolean;
      function  POSFTIX_CACHE_QUEUE():boolean;
      function  POSFTIX_DELETE_FILE_FROM_CACHE(MessageID:string):boolean;
      procedure POSTFIX_REPLICATE_MAIN_CF(mainfile:string);
      function  POSTFIX_EXPORT_LOGS():boolean;
      function  POSTFIX_LAST_ERRORS():string;
      procedure POSTFIX_CONFIGURE_MAIN_CF();




      
      
      // CYRUS
      function SASLPASSWD_PATH():string;


      //APACHE

      function  APACHE_GET_INITD_PATH:string;
      procedure APACHE_ARTICA_START();
      procedure APACHE_ARTICA_STOP();
      function  APACHE2_DirectoryAddOptions(Change:boolean;WichOption:string):string;
      function  APACHE_PID():string;
      function  APACHE_VERSION():string;
      function  APACHE_ARTICA_ENABLED():string;

      function QUEUEGRAPH_TEMP_PATH():string;


      function  AVESERVER_GET_VALUE(KEY:string;VALUE:string):string;
      function  AVESERVER_GET_PID():string;
      function  AVESERVER_GET_VERSION():string;
      function  AVESERVER_GET_LICENCE():string;
      function  AVESERVER_STATUS():string;
      function  AVESERVER_PATTERN_DATE():string;
      function  AVESERVER_GET_KEEPUP2DATE_LOGS_PATH():string;
      function  AVESERVER_SET_VALUE(KEY:string;VALUE:string;DATA:string):string;
      function  AVESERVER_GET_DAEMON_PORT():string;
      function  AVESERVER_GET_TEMPLATE_DATAS(family:string;ztype:string):string;
      procedure AVESERVER_REPLICATE_TEMPLATES();
      procedure AVESERVER_REPLICATE_kav4mailservers(mainfile:string);
      function  AVESERVER_GET_LOGS_PATH():string;


      function get_repositories_openssl():boolean;

      function  Cyrus_get_sasl_pwcheck_method:string;
      procedure Cyrus_set_sasl_pwcheck_method(val:string);
      function  Cyrus_get_servername:string;
      procedure Cyrus_set_value(info:string;val:string);
      function  Cyrus_get_admins:string;
      function  Cyrus_get_unixhierarchysep:string;
      function  Cyrus_get_virtdomain:string;
      function  Cyrus_get_adminpassword:string;
      function  Cyrus_get_admin_name():string;
      procedure Cyrus_set_admin_name(val:string);
      procedure Cyrus_set_adminpassword(val:string);
      function  Cyrus_get_lmtpsocket:string;
      function  Cyrus_get_value(value:string):string;
      function  CYRUS_REPLICATION_MINUTES():integer;
      function  CYRUS_LAST_REPLIC_TIME():integer;
      procedure CYRUS_RESET_REPLIC_TIME();
      function  CYRUS_DELIVER_BIN_PATH():string;
      function  CYRUS_IMAPD_CONF_GET_INFOS(value:string):string;
      function  CYRUS_enabled_in_master_cf():boolean;

      function  KAV_LAST_REPLIC_TIME():integer;
      procedure KAV_RESET_REPLIC_TIME();
      function  KAV_REPLICATION_MINUTES():integer;

      procedure KEEPUP2DATE_RESET_REPLIC_TIME();
      function  KEEPUP2DATE_LAST_REPLIC_TIME():integer;
      function  KEEPUP2DATE_REPLICATION_MINUTES():integer;

      function  SYSTEM_GMT_SECONDS():string;
      function  SYSTEM_GET_ALL_LOCAL_IP():string;
      function  SYSTEM_GET_LOCAL_IP(ifname:string):string;
      function  SYSTEM_DAEMONS_STATUS():TstringList;
      function  SYSTEM_DAEMONS_STOP_START(APPS:string;mode:string;return_string:boolean):string;
      procedure SYSTEM_CHDIR(path:string);

      //start the service
      function  SYSTEM_START_ARTICA_DAEMON():boolean;
      function  SYSTEM_START_ARTICA_ALL_DAEMON():boolean;
      procedure SYSTEM_START_MINIMUM_DAEMON();
      procedure LDAP_VERIFY_PASSWORD();
      procedure ARTICA_START();
      procedure ARTICA_STOP();

      function  SYSTEM_PROCESS_EXISTS(processname:string):boolean;
      function  SYSTEM_KERNEL_VERSION():string;
      function  SYSTEM_LIBC_VERSION():string;
      function  SYSTEM_LD_SO_CONF_ADD(path:string):string;
      function  SYSTEM_CRON_TASKS():TstringList;
      function  SYSTEM_USER_LIST():string;
      function  SYSTEM_CRON_REPLIC_CONFIGS():string;
      function  SYSTEM_ADD_NAMESERVER(nameserver:string):boolean;
      function  SYSTEM_NETWORK_INITD():string;
      function  SYSTEM_NETWORK_LIST_NICS():string;
      function  SYSTEM_NETWORK_INFO_NIC_DEBIAN(nicname:string):string;
      function  SYSTEM_NETWORK_INFO_NIC_REDHAT(nicname:string):string;
      function  SYSTEM_NETWORK_INFO_NIC(nicname:string):string;
      function  SYSTEM_NETWORK_IFCONFIG():string;
      function  SYSTEM_NETWORK_IFCONFIG_ETH(ETH:string):string;
      function  SYSTEM_NETWORK_RECONFIGURE():string;
      function  SYSTEM_PROCESS_PS():string;
      function  SYSTEM_PROCESS_INFO(PID:string):string;
      function  SYSTEM_ALL_IPS():string;
      function  SYSTEM_PROCESS_EXIST(pid:string):boolean;
      function  SYSTEM_PROCESS_MEMORY(PID:string):integer;
      function  SYSTEM_GET_PID(pidPath:string):string;
      function  SYSTEM_MAKE_PATH():string;
      function  SYSTEM_GCC_PATH():string;
      function  SYSTEM_ENV_PATHS():string;
      procedure SYSTEM_ENV_PATH_SET(path:string);
      function  SYSTEM_VERIFY_CRON_TASKS():string;
      function  SYSTEM_GET_SYS_DATE():string;
      function  SYSTEM_GET_HARD_DATE():string;
      function  SYSTEM_FQDN():string;
      function  SYSTEM_IS_HOSTNAME_VALID():boolean;
      function  SYSTEM_MARK_DEB_CDROM():string;
      procedure SYSTEM_SET_HOSTENAME(hostname:string);
      function  SYSTEM_IP_OVERINTERNET():string;
      function  SYSTEM_GET_HTTP_PROXY:string;
      function  SYSTEM_GET_FOLDERSIZE(folderpath:string):string;
      function  SYSTEM_FILE_BETWEEN_NOW(filepath:string):LongInt;
      function  SYSTEM_FILE_DAYS_BETWEEN_NOW(filepath:string):LongInt;
      function  SYSTEM_FILE_TIME(filepath:string):string;
      function  SYSTEM_FILE_MIN_BETWEEN_NOW(filepath:string):LongInt;
      function  SYSTEM_FILE_SECONDS_BETWEEN_NOW(filepath:string):LongInt;
      function  SYSTEM_PROCESS_LIST_PID(processname:string):string;
      function  SYSTEM_GET_PLATEFORM():string;
      function  SYSTEM_ISIP_LOCAL(ipToTest:string):boolean;
      function  SYSTEM_LOCAL_SID():string;
      FUNCTION  SYSTEM_GET_SYSLOG_PATH():string;
      function  SYSTEM_PROCESS_MEMORY_FATHER(PID:string):integer;
      function  SYSTEM_PROCESS_MEMORY_SINGLE(PID:string):integer;
      function  SYSTEM_PROCESS_STATUS(PID:string):string;
      procedure PATCHING_PERL_TO_ARTICA(TargetPath:string);
      function  PathIsDirectory(path:string):boolean;
      procedure SYSTEM_CHANGE_MOTD();

      function  ExecPipe(commandline:string):string;
      function  WGET_DOWNLOAD_FILE(uri:string;file_path:string):boolean;
      function  MD5FromFile(path:string):string;
      function  CURL_HTTPS_ENABLED():boolean;

      //BOA
      function         BOA_SET_CONFIG():boolean;
      procedure        BOA_FIX_ETC_HOSTS();
      function         BOA_DAEMON_GET_PID():string;
      procedure        BOA_STOP();
      procedure        BOA_START();

      //CROSSROADS
      function         CROSSROADS_VERSION():string;
      FUNCTION         CROSSROADS_MASTERNAME():string;
      procedure        CROSSROADS_SEND_REQUESTS_TO_SERVER(uri:string);
      FUNCTION         CROSSROADS_POOLING_TIME():integer;

      function GEOIP_VERSION():string;

      function  SASLAUTHD_PATH_GET():string;
      function  SASLAUTHD_VALUE_GET(key:string):string;
      function  SASLAUTHD_TEST_INITD():boolean;
      function  SASLAUTHD_PID():string;
      procedure SASLAUTHD_START();
      procedure SASLAUTHD_STOP();
      procedure SASLAUTHD_CONFIGURE();
      function  SASLAUTHD_VERSION():string;

      function  postfix_get_virtual_mailboxes_maps():string;
      procedure YOREL_VERIFY_START();
      function  YOREL_RECONFIGURE(database_path:string):string;

      function get_MYSQL_INSTALLED():boolean;
      function get_POSTFIX_DATABASE():string;
      function get_POSTFIX_HASH_FOLDER():string;


      function get_www_root():string;
      function get_www_userGroup():string;
      function get_httpd_conf():string;

      function get_MANAGE_MAILBOXES():string;
      function get_MANAGE_MAILBOX_SERVER():string;

      function get_INSTALL_PATH():string;
      function get_DISTRI():string;
      function get_UPDATE_TOOLS():string;

      procedure set_FileStripDiezes(filepath:string);
      function set_repositories_checked(val:boolean):string;
      procedure set_MYSQL_INSTALLED(val:boolean);
      function set_POSTFIX_DATABASE(val:string):string;
      function set_POSTFIX_HASH_FOLDER(val:string):string;

      function set_MANAGE_MAILBOXES(val:string):string;
      procedure set_MANAGE_MAILBOX_SERVER(val:string);
      function get_MANAGE_SASL_TLS():boolean;
      procedure set_MANAGE_SASL_TLS(val:boolean);

      function set_INSTALL_PATH(val:string):string;
      function set_DISTRI(val:string):string;
      function set_UPDATE_TOOLS(val:string):string;

      procedure set_LINUX_DISTRI(val:string);


      function get_LINUX_DISTRI():string;
      function get_LINUX_MAILLOG_PATH():string;
      function get_LINUX_INET_INTERFACES():string;
      function get_LINUX_DOMAIN_NAME():string;
      function get_SELINUX_ENABLED():boolean;
      procedure set_SELINUX_DISABLED();

      function LINUX_GET_HOSTNAME:string;
      function LINUX_DISTRIBUTION():string;
      function LINUX_CONFIG_INFOS():string;
      function LINUX_APPLICATION_INFOS(inikey:string):string;
      function LINUX_INSTALL_INFOS(inikey:string):string;
      function LINUX_CONFIG_PATH():string;
      function LINUX_REPOSITORIES_INFOS(inikey:string):string;
      function LINUX_LDAP_INFOS(inikey:string):string;



      procedure MYSQL_INIT_ERROR();
      function  MYSQL_ACTION_TESTS_ADMIN():boolean;
      function  MYSQL_ACTION_CREATE_ADMIN(username:string;password:string):boolean;
      function  MYSQL_ACTION_IMPORT_DATABASE(filenname:string;database:string):boolean;
      function  MYSQL_ACTION_COUNT_TABLES(database_name:string):integer;
      function  MYSQL_ACTION_QUERY_DATABASE(database:string;sql:string):boolean;
      function  MYSQL_MYSQLD_BIN_PATH():string;
      function  MYSQL_PASSWORD():string;
      function  MYSQL_ROOT():string;
      function  MYSQL_ENABLED:boolean;
      function  MYSQL_SERVER():string;
      function  MYSQL_VERSION:string;
      function  MYSQL_PORT():string;
      function  MYSQL_BIN_PATH:string;
      function  MYSQL_INIT_PATH:string;
      function  MYSQL_MYCNF_PATH:string;
      function  MYSQL_PID_PATH():string;
      function  MYSQL_STATUS():string;
      function  MYSQL_EXEC_BIN_PATH():string;
      function  MYSQL_SERVER_PARAMETERS_CF(key:string):string;
      function  MYSQL_READ_CF(key:string;mycfpath:string):string;
      function  MYSQL_ACTION_IMPORT_FILE(filenname:string;database:string;mycf_path:string):boolean;
      function  MYSQL_DATABASE_CHECK_LIST(BasePath:string):TstringList;
      procedure MYSQL_RECONFIGURE_DB();
      function  MYSQL_PARSE_TABLE_NAME_INFILE(path:string):string;
      function  MYSQL_ARTICA_START_CMDLINE():string;
      function  MYSQL_DETERMINE_DATABASE_IN_FILEQUERY(path:string):string;
      function  MYSQL_COUNT_SYS_EVENTS():integer;
      function  mysqldump_path():string;

      procedure MYSQL_ARTICA_STOP();
      procedure MYSQL_ARTICA_START();
      function  MYSQL_ARTICA_PID():string;

      function set_ARTICA_PHP_PATH(val:string):string;
      function set_ARTICA_DAEMON_LOG_MaxSizeLimit(val:integer):integer;
      function get_ARTICA_LISTEN_IP():string;
      function get_ARTICA_LOCAL_PORT():integer;
      procedure SET_ARTICA_LOCAL_SECOND_PORT(val:integer);
      function get_ARTICA_LOCAL_SECOND_PORT():integer;
      function ARTICA_MYSQL_INFOS(val:string):string;
      function ARTICA_MYSQL_SET_INFOS(val:string;value:string):boolean;
      function ARTICA_POLICY_GET_PID():string;

       //Mailgraph operations



      function   get_MAILGRAPH_RRD():string;
      function   get_MAILGRAPH_RRD_VIRUS():string;
      function   MAILGRAPGH_PID_PATH():string;
      function   MAILGRAPH_RDD_PATH():string;
      procedure  MAILGRAPGH_FIX_PERL();

      




      
      //files operations
      function ln(frompath:string;topath:string):boolean;

      function  get_ARTICA_PHP_PATH():string;
      function  get_ARTICA_DAEMON_LOG_MaxSizeLimit():integer;
      function  get_DEBUG_DAEMON():boolean;


      function  ARTICA_DAEMON_GET_PID():string;
      function  ARTICA_FILTER_GET_PID():string;
      function  ARTICA_FILTER_GET_ALL_PIDS():string;
      function  ARTICA_SEND_QUEUE_PATH():string;
      function  ARTICA_SEND_SUBQUEUE_NUMBER(QueueNumber:string):integer;
      function  ARTICA_SEND_MAX_SUBQUEUE_NUMBER:integer;
      function  ARTICA_FILTER_CHECK_PERMISSIONS():string;
      function  ARTICA_SEND_PID(QueueNumber:String):string;
      function  ARTICA_SEND_QUEUE_NUMBER():integer;
      procedure ARTICA_SEND_WATCHDOG_QUEUE();

      function  ARTICA_FILTER_QUEUEPATH():string;
      procedure ARTICA_FILTER_CLEAN_QUEUE();
      function  ARTICA_SQL_QUEUE_NUMBER():integer;
      function  ARTICA_SQL_PID():string;
      function  ARTICA_VERSION():string;

      function EMAILRELAY_PID():string;
      function EMAILRELAY_VERSION():string;
      procedure WATCHDOG_PURGE_BIGHTML();
      function ARTICA_FILTER_PID():string;


      function  get_kaspersky_mailserver_smtpscanner_logs_path():string;
      function  ExecStream(commandline:string;ShowOut:boolean):TMemoryStream;
      function  GetMonthNumber(MonthName:string):integer;

      procedure StripDiezes(filepath:string);
      function  PHP5_INI_PATH:string;
      procedure PHP5_ENABLE_GD_LIBRARY();
      function  PHP5_INI_SET_EXTENSION(librari:string):string;
      function  PHP5_IS_MODULE_EXISTS(modulename:string):boolean;


      function COMMANDLINE_PARAMETERS(FoundWhatPattern:string):boolean;
      function COMMANDLINE_EXTRACT_PARAMETERS(pattern:string):string;
      procedure DeleteFile(Path:string);
      procedure StatFile(path:string);
      function  FileSymbolicExists(path:string):boolean;
      function  StatFileSymbolic(Path:string):string;
      procedure deb_files_extists_between(patha:string;pathb:string);
      function  HtmlToText(error_text:string):string;
      procedure ParseMyqlQueue();
      function  TEMP_SEC():string;
      procedure PERL_CREATE_DEFAULT_SCRIPTS();
      
      function Explode(const Separator, S: string; Limit: Integer = 0):TStringDynArray;
      debug:boolean;
      echo_local:boolean;
      ArrayList:TStringList;
      procedure splitexample(s:string;sep:string);
      constructor Create();
      destructor Destroy;virtual;

END;

implementation

constructor MyConf.Create();
begin
       LOGS:=tlogs.Create;
       CCYRUS:=TCYRUS.Create();
       roundcube:=Troundcube.Create;
       clamav:=Tclamav.Create();
       spamass:=Tspamass.Create();
       Cpureftpd:=Tpureftpd.Create();
       SYSTEM_CHDIR(get_ARTICA_PHP_PATH());
       ldap:=Topenldap.Create;
       ntpd:=TNTPD.Create;
       ArrayList:=TStringList.Create;
       download_silent:=false;
       spfm:=tspf.Create;
       samba:=Tsamba.Create;
       mimedef:=Tmimedefang.Create;
       squid:=Tsquid.Create;
       stunnel:=Tstunnel.Create;
       dkim:=Tdkim.Create;
       postfix:=Tpostfix.Create;
       mailgraph:=tMailgraphClass.Create;
       miltergreylist:=tmilter_greylist.Create;
       lighttpd:=Tlighttpd.Create;
       dansguardian:=Tdansguardian.Create;
       monitorix:=Tmonitorix.Create;
       kav4samba:=Tkav4samba.Create;
       
       if Not DirectoryExists('/opt/artica/logs') then begin
          forceDirectories('/opt/artica/logs');
          fpsystem('/bin/chmod 755 /opt/artica/logs');
       end;
end;

destructor MyConf.Destroy;
begin
  LOGS.Free;
  CCYRUS.Free;
  inherited Destroy;
end;
//##############################################################################
function myconf.SYSTEM_MARK_DEB_CDROM():string;
 var

    A:Boolean;
    l:TstringList;
    i:integer;
    RegExpr:TRegExpr;

begin
    A:=false;

    if not FileExists('/etc/apt/sources.list') then exit;

    l:=TstringList.Create;
    l.LoadFromFile('/etc/apt/sources.list');
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='^deb cdrom';


    for i:=0 to l.Count-1 do begin
        if RegExpr.Exec(l.Strings[i]) then begin
           l.Strings[i]:='#' + l.Strings[i];
           A:=True;
        end;

    end;

    if A then l.SaveToFile('/etc/apt/sources.list');
    l.free;
    RegExpr.Free;

    result:='';
end;
//##############################################################################
function myconf.HtmlToText(error_text:string):string;

         const
            CR = #$0d;
            LF = #$0a;
            CRLF = CR + LF;
begin
     error_text:=AnsiReplaceText(error_text,CRLF,'');
     error_text:=AnsiReplaceText(error_text,CR,'');
     error_text:=AnsiReplaceText(error_text,LF,'');
     error_text:=AnsiReplaceText(error_text,'  ',' ');
     error_text:=AnsiReplaceText(error_text,'&quot;','"');
     error_text:=AnsiReplaceText(error_text,'<br>',', ');
     error_text:=AnsiReplaceText(error_text,'<p>','');
     error_text:=AnsiReplaceText(error_text,'<tt>','');
     error_text:=AnsiReplaceText(error_text,'</tt>','');
     result:=error_text;
end;
//##############################################################################
procedure myconf.SYSTEM_SET_HOSTENAME(hostname:string);
 var
    F:boolean;
    l:TStringList;
    RegExpr:TRegExpr;
    i:integer;
begin

    fpsystem('/bin/echo "'+ hostname + '"  >/etc/hostname');
    fpsystem('/bin/echo "'+ hostname + '"  >/proc/sys/kernel/hostname');
    l:=TStringList.Create;
    F:=false;
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='127\.0\.1\.1';;
    l.LoadFromFile('/etc/hosts');
     RegExpr.Expression:='127\.0\.1\.1';;
    for i:=0 to l.Count-1 do begin

      if RegExpr.Exec(l.Strings[i]) then begin
         l.Strings[i]:='127.0.1.1' + chr(9) + hostname;
         F:=true;
      end;
    end;

  if not F then begin
  RegExpr.Expression:='127\.0\.0\.1';;
    for i:=0 to l.Count-1 do begin

      if RegExpr.Exec(l.Strings[i]) then begin
         l.Strings[i]:='127.0.0.1' + chr(9) + hostname;
      end;
    end;

end;
l.SaveToFile('/etc/hosts');

end;
//##############################################################################

function myconf.SYSTEM_FQDN():string;
 var D:boolean;
begin
    D:=COMMANDLINE_PARAMETERS('debug');
    fpsystem('/bin/hostname >/opt/artica/logs/hostname.txt');
    result:=ReadFileIntoString('/opt/artica/logs/hostname.txt');
    result:=trim(result);
    if D then writeln('hostname=',result);
end;


//##############################################################################
function myconf.SHARED_CONF_GET_CLIENTS(SharedSource:string):TStringList;
var
   l:TstringList;
   i:integer;
   RegExpr:TRegExpr;
   res:TstringList;
begin
  res:=TStringList.Create;
  result:=res;
  l:=TStringList.Create;
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='(.+?)\s+(\/.+?)\s+none\s+.+?bind\s+';
  if FileExists('/etc/mtab') then begin
      l.LoadFromFile('/etc/mtab');
      for i:=0 to l.Count-1 do begin
          if RegExpr.Exec(l.Strings[i]) then begin
              if RegExpr.Match[1]=SharedSource then res.Add(RegExpr.Match[2]);
          end;
      end;
  end;
  result:=res;

end;

//##############################################################################
procedure  myconf.PURE_FTPD_SETCONFIG(key:string;value:string);
var
   l:TstringList;
   i:integer;
   RegExpr:TRegExpr;
   Found:boolean;
begin
  if not FileExists('/opt/artica/etc/pure-ftpd.conf') then exit;
  Found:=false;
  l:=TstringList.Create;
  l.LoadFromFile('/opt/artica/etc/pure-ftpd.conf');
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='^' + key + '\s+';
  for i:=0 to l.Count -1 do begin
      if RegExpr.Exec(l.Strings[i]) then begin
          l.Strings[i]:=key + chr(9) + value;
          Found:=true;
          break;
      end;

  end;

  if Found=false then begin
  l.Add(key + chr(9) + value);
  l.SaveToFile('/opt/artica/etc/pure-ftpd.conf');
  end;
  l.Free;
  RegExpr.Free;

end;
procedure  myconf.PURE_FTPD_DELCONFIG(key:string);
var
   l:TstringList;
   i:integer;
   RegExpr:TRegExpr;
begin
  if not FileExists('/opt/artica/etc/pure-ftpd.conf') then exit;
  l:=TstringList.Create;
  l.LoadFromFile('/opt/artica/etc/pure-ftpd.conf');
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='^' + key + '\s+';
  for i:=0 to l.Count -1 do begin
      if RegExpr.Exec(l.Strings[i]) then begin
          l.Delete(i);
          break;
      end;

  end;

  l.Free;
  RegExpr.Free;

end;



//##############################################################################
function myconf.SCAN_USB():string;
var
   l,s:TstringList;
   i:integer;
   RegExpr:TRegExpr;
   tmpfile:string;
   SYS:Tsystem;
   fpath:string;
   fmd5:string;
   fline:string;
   UUID:string;
   fLABEL:string;
   fTYPE:string;
   SEC_TYPE:string;
   mountp:string;
begin
   SYS:=Tsystem.Create();
   tmpfile:=logs.FILE_TEMP();
   fpsystem(SYS.LOCATE_BLKID() + ' >'+tmpfile + ' 2>&1');
   if not FileExists(tmpfile) then exit;
   l:=TstringList.Create;
   l.LoadFromFile(tmpfile);
   logs.DeleteFile(tmpfile);
   
   RegExpr:=TRegExpr.Create;
   s:=Tstringlist.Create;
   s.Add('$_GLOBAL["usb_list"]=array(');
   for i:=0 to l.Count-1 do begin
       RegExpr.Expression:='^(.+?):(.+)';
       if RegExpr.Exec(l.Strings[i]) then begin
           fpath:=RegExpr.Match[1];
           fline:=RegExpr.Match[2];
           RegExpr.Expression:='UUID="(.+?)"';
           if RegExpr.Exec(fline) then UUID:=RegExpr.Match[1];
           RegExpr.Expression:='LABEL="(.+?)"';
           if RegExpr.Exec(fline) then fLABEL:=RegExpr.Match[1];
           RegExpr.Expression:='TYPE="(.+?)"';
           if RegExpr.Exec(fline) then fTYPE:=RegExpr.Match[1];
           RegExpr.Expression:='SEC_TYPE="(.+?)"';
           if RegExpr.Exec(fline) then SEC_TYPE:=RegExpr.Match[1];
           mountp:=usb_mount_point(fpath);
           
           s.Add(chr(9)+chr(9)+'"'+UUID+'"=>array(');
           s.Add(chr(9)+chr(9)+chr(9)+'"PATH"=>"'+fpath+'","UUID"=>"'+ UUID+'","LABEL"=>"'+fLABEL+'","TYPE"=>"'+fTYPE+'","SEC_TYPE"=>"'+SEC_TYPE+'","model"=>"'+usb_devinfo_path(fpath)+'","mounted"=>"'+mountp+'","SIZE"=>"'+usb_size(fpath,mountp)+'"),');

       end;

   
   end;
   s.Add(chr(9)+chr(9)+');');
   result:=s.Text;
   s.free;
   l.free;
   RegExpr.free;
   


end;
//##############################################################################
procedure myconf.BACKUP_USB();
var
   remote_uuid:string;
   mountpoint:string;
   RegExpr:TRegExpr;
   dev_point,target_point:string;
   D:boolean;
   lasttime:integer;
   SYS:Tsystem;
   perform:boolean;
begin
  D:=COMMANDLINE_PARAMETERS('--verbose');
  perform:=false;
  remote_uuid:=get_INFOS('ArticaUsbBackupKeyID');
  if D then logs.Debuglogs('BACKUP_USB():: target UUID='+remote_uuid);
  if length(remote_uuid)=0 then exit;
  
  
  if not UsbExists(remote_uuid) then begin
     if D then logs.Debuglogs('BACKUP_USB():: target UsbExists=FALSE');
     exit;
  end;
  mountpoint:=usbMountPoint(remote_uuid);
  if D then logs.Debuglogs('BACKUP_USB():: target UsbExists=TRUE dev='+mountpoint);
  
  if COMMANDLINE_PARAMETERS('--force') then logs.DeleteFile('/etc/artica-postfix/' + remote_uuid);
  
  if not FileExists('/etc/artica-postfix/' + remote_uuid) then begin
     perform:=true;
  end else begin
    SYS:=Tsystem.Create;
    if SYS.FILE_TIME_BETWEEN_MIN('/etc/artica-postfix/' + remote_uuid)>120 then perform:=True;
  end;
  
  if not perform then begin
      if D then logs.Debuglogs('BACKUP_USB():: no time to perform this operation...');
      exit;
  end;
    
  logs.DeleteFile('/etc/artica-postfix/' + remote_uuid);
  logs.OutputCmd('/bin/touch /etc/artica-postfix/' + remote_uuid);
  
  if length(mountpoint)=0 then begin
     logs.Debuglogs('BACKUP_USB()::  bad mount point returned ' + mountpoint );
     RegExpr.free;
     exit;
  end;
  dev_point:=mountpoint;
  target_point:=usb_mount_point(dev_point);

  
  if length(target_point)=0 then begin
      logs.Debuglogs('BACKUP_USB():: mount '+dev_point );
      logs.OutputCmd(get_ARTICA_PHP_PATH()+'/bin/hmount -v ' + dev_point);
      target_point:=usb_mount_point(dev_point);
       if length(target_point)=0 then begin
         logs.Debuglogs('BACKUP_USB()::  unable to mount point '+dev_point );
         exit;
       end;
  
  end;
  if D then logs.Debuglogs('BACKUP_USB():: mounted on='+target_point);
  global_backup_usb_path:=target_point;
  BACKUP_MYSQL();

  



end;


//##############################################################################
function myconf.usbMountPoint(target_uuid:string):string;
var
   l,s:TstringList;
   i:integer;
   RegExpr:TRegExpr;
   tmpfile:string;
   SYS:Tsystem;
   fpath:string;
   fmd5:string;
   fline:string;
   UUID:string;
   mountp:string;
begin
   SYS:=Tsystem.Create();
   tmpfile:=logs.FILE_TEMP();
   fpsystem(SYS.LOCATE_BLKID() + ' >'+tmpfile + ' 2>&1');
   if not FileExists(tmpfile) then exit;
   l:=TstringList.Create;
   l.LoadFromFile(tmpfile);
   logs.DeleteFile(tmpfile);

   RegExpr:=TRegExpr.Create;


   for i:=0 to l.Count-1 do begin
       RegExpr.Expression:='^(.+?):(.+)';
       if RegExpr.Exec(l.Strings[i]) then begin
           fpath:=RegExpr.Match[1];
           fline:=RegExpr.Match[2];
           RegExpr.Expression:='UUID="(.+?)"';
           if RegExpr.Exec(fline) then UUID:=RegExpr.Match[1];
           if target_uuid=UUID then begin
               result:=fpath;
               break;
           end;
       end;


   end;
   l.free;
   RegExpr.free;



end;
//##############################################################################
function myconf.UsbExists(uuid:string):boolean;
var
   l:TstringList;
   i:integer;
   RegExpr:TRegExpr;
   tmpfile:string;
   SYS:Tsystem;
   fpath:string;
   fline:string;
begin
   result:=false;
   SYS:=Tsystem.Create();
   tmpfile:=logs.FILE_TEMP();
   fpsystem(SYS.LOCATE_BLKID() + ' >'+tmpfile + ' 2>&1');
   if not FileExists(tmpfile) then exit;
   l:=TstringList.Create;
   l.LoadFromFile(tmpfile);
   logs.DeleteFile(tmpfile);

   RegExpr:=TRegExpr.Create;
for i:=0 to l.Count-1 do begin
       RegExpr.Expression:='^(.+?):(.+)';
       if RegExpr.Exec(l.Strings[i]) then begin
           fpath:=RegExpr.Match[1];
           fline:=RegExpr.Match[2];
           RegExpr.Expression:='UUID="(.+?)"';
           if RegExpr.Exec(fline) then begin
                 if uuid=RegExpr.Match[1] then begin
                    result:=true;
                    break;
                 end;
           end;
           
       end;
end;

   l.free;
   RegExpr.free;

end;
//##############################################################################

function myconf.usb_devinfo_path(path:string):string;
var
tmpfile:string;
l,s:TstringList;
   i:integer;
   RegExpr:TRegExpr;
   model:string;
   vendor:string;
   product:string;
   manufacturer:string;
   idVendor:string;
   idProduct:string;
   speed:string;
   cmd:string;
begin
  tmpfile:=logs.FILE_TEMP();
  cmd:='/usr/bin/udevinfo -a -p `/usr/bin/udevinfo -q path -n ' + path+ '`';
  fpsystem(cmd+' >'+tmpfile + ' 2>&1');
  if not FileExists(tmpfile) then exit;
  l:=TstringList.Create;
  l.LoadFromFile(tmpfile);
  logs.DeleteFile(tmpfile);
  RegExpr:=TRegExpr.Create;
  speed:='';
  for i:=0 to l.Count-1 do begin
     RegExpr.Expression:='ATTRS\{model\}=="(.*?)"';
     if RegExpr.Exec(l.Strings[i]) then model:=RegExpr.Match[1];
     RegExpr.Expression:='ATTRS\{vendor\}=="(.*?)"';
     if RegExpr.Exec(l.Strings[i]) then vendor:=RegExpr.Match[1];

     if length(product)=0 then begin
        RegExpr.Expression:='ATTRS\{product\}=="(.*?)"';
        if RegExpr.Exec(l.Strings[i]) then product:=RegExpr.Match[1];
     end;

     if length(manufacturer)=0 then begin
        RegExpr.Expression:='ATTRS\{manufacturer\}=="(.*?)"';
        if RegExpr.Exec(l.Strings[i]) then manufacturer:=RegExpr.Match[1];
     end;
     
 if length(idVendor)=0 then begin
        RegExpr.Expression:='ATTRS\{idVendor\}=="([0-9]+)"';
        if RegExpr.Exec(l.Strings[i]) then idVendor:=RegExpr.Match[1];
     end;
     
 if length(idProduct)=0 then begin
        RegExpr.Expression:='ATTRS\{idProduct\}=="([0-9]+)"';
        if RegExpr.Exec(l.Strings[i]) then idProduct:=RegExpr.Match[1];
     end;


 if length(speed)=0 then begin
        RegExpr.Expression:='ATTRS\{speed\}=="([0-9]+)"';
        if RegExpr.Exec(l.Strings[i]) then speed:=RegExpr.Match[1];
     end;
     
     
     if (length(vendor)>0) and (length(model)>0) and (length(product)>0)  and (length(manufacturer)>0) and (length(speed)>0) then break;
  end;
  
  result:=trim(vendor)+';'+trim(model)+';'+trim(product)+';'+trim(manufacturer)+';' + idVendor+':'+idProduct+';'+speed+'Mbps;'+cmd;
  RegExpr.free;
  l.free;
  
  
end;
//##############################################################################

function myconf.usb_mount_point(path:string):string;
var
tmpfile:string;
l,s:TstringList;
   i:integer;
   RegExpr:TRegExpr;
   model:string;
   vendor:string;
   D:boolean;
begin
D:=false;
D:=COMMANDLINE_PARAMETERS('--debug');

tmpfile:=logs.FILE_TEMP();
  fpsystem('/bin/mount -l >'+tmpfile + ' 2>&1');
  if not FileExists(tmpfile) then begin
     if D then logs.Debuglogs('usb_mount_point():: tmpfile "'+tmpfile+'" IS NULL');
     exit;
  end;
  
  l:=TstringList.Create;
  l.LoadFromFile(tmpfile);
  logs.DeleteFile(tmpfile);
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:=path+'\s+on\s+(.+?)\s+type';
  for i:=0 to l.Count-1 do begin
     if RegExpr.Exec(l.Strings[i]) then begin
        if D then logs.Debuglogs('usb_mount_point():: Found "'+l.Strings[i]+'" IS NULL');
        result:=trim(RegExpr.Match[1]);
        break;
     end;
  end;

  RegExpr.free;
  l.free;

end;
//##############################################################################
function myconf.usb_size(pathFrom:string;pathTo:string):string;
var
tmpfile:string;
l,s:TstringList;
   i:integer;
   RegExpr:TRegExpr;
begin
tmpfile:=logs.FILE_TEMP();
fpsystem('/bin/df -h >'+tmpfile + ' 2>&1');
if not FileExists(tmpfile) then exit;
  l:=TstringList.Create;
  l.LoadFromFile(tmpfile);
  logs.DeleteFile(tmpfile);
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:=pathFrom+'\s+(.+?)\s+(.+?)\s+(.+?)\s+(.+?)\s+'+pathTo;
for i:=0 to l.Count-1 do begin
     if RegExpr.Exec(l.Strings[i]) then begin
        result:=trim(RegExpr.Match[1]+';'+RegExpr.Match[2]+';'+RegExpr.Match[3]+';'+RegExpr.Match[4]);
        break;
     end;
  end;

  RegExpr.free;
  l.free;
end;
//##############################################################################

procedure myconf.PURE_FTPD_PREPARE_LDAP_CONFIG();
var
   artica_admin            :string;
   artica_password         :string;
   artica_suffix           :string;
   ldap_server             :string;
   ldap_server_port        :string;
   l                       :TstringList;
   SYS                     :Tsystem;
begin

    artica_admin:=get_LDAP('admin');
    artica_password:=get_LDAP('password');
    artica_suffix:=get_LDAP('suffix');
    ldap_server:=Get_LDAP('server');
    ldap_server_port:=Get_LDAP('port');
    SYS:=Tsystem.Create();

    if length(ldap_server)=0 then ldap_server:='127.0.0.1';
    if length(ldap_server_port)=0 then ldap_server_port:='389';
    l:=TstringList.Create;


    if not SYS.IsUserExists('ftpuser') then begin
        writeln('Starting......: pure-ftpd create user ftpuser on system');
        SYS.AddUserToGroup('ftpuser','ftpuser','','');
    end;

L.Add('LDAPServer ' + ldap_server);
L.Add('LDAPPort   ' + ldap_server_port);
L.Add('LDAPBaseDN ' + artica_suffix);
L.Add('LDAPBindDN cn=' + artica_admin + ',' + artica_suffix);
L.Add('LDAPBindPW ' + artica_password);
L.Add('LDAPFilter (&(objectClass=userAccount)(uid=\L)(FTPStatus=TRUE))');
L.Add('# LDAPHomeDir homeDirectory');
L.Add('LDAPVersion 3');
L.SaveToFile('/opt/artica/etc/pure-ftpd.ldap.conf');
l.free;

forceDirectories('/opt/artica/var/pureftpd');
PURE_FTPD_SETCONFIG('PIDFile','/var/run/pure-ftpd.pid');
PURE_FTPD_SETCONFIG('AltLog','w3c:/opt/artica/logs/pureftpd.log');
PURE_FTPD_SETCONFIG('CreateHomeDir','yes');
//PURE_FTPD_SETCONFIG('#LDAPConfigFile','/opt/artica/etc/pure-ftpd.ldap.conf');
PURE_FTPD_DELCONFIG('LDAPConfigFile');
PURE_FTPD_SETCONFIG('PureDB','/opt/artica/var/pureftpd/pureftpd.pdb');
end;
//##############################################################################
procedure myConf.CROSSROADS_SEND_REQUESTS_TO_SERVER();
var
   cross      :TiniFile;
   master_ip  :string;
   slave_ip   :string;
   cmdline    :string;
   PHP_PATH   :string;
   FileDate   :integer;
   syslogPath :string;
begin
 FileDate:=0;
 if not FileExists('/etc/artica-postfix/crossroads.indentities.conf') then exit;
 cross:=TiniFile.Create('/etc/artica-postfix/crossroads.indentities.conf');
 master_ip:=cross.ReadString('INFOS','mastr_ip','');
 slave_ip:=cross.ReadString('INFOS','slave_ip','');
if ParamStr(1)<>'-cross-rq'then begin
 if FileExists('/opt/artica/logs/crossroads.syslog.log') then begin
    FileDate:=SYSTEM_FILE_SECONDS_BETWEEN_NOW('/opt/artica/logs/crossroads.syslog.log');
    if FileDate>0 then begin
       logs.logs('CROSSROADS_SEND_REQUESTS_TO_SERVER::FileDate="' + IntToStr(FileDate) + '"');
       if FileDate<CROSSROADS_POOLING_TIME() then exit;
    end;
 end;
end;

 logs.logs('CROSSROADS_SEND_REQUESTS_TO_SERVER:: IP=' +master_ip + ' local ip=' + slave_ip + ' FileDate=' + intToStr(FileDate));
 uri:='https://'+master_ip +':9000/listener.balance.php?Check='+slave_ip;
 PHP_PATH:=get_ARTICA_PHP_PATH();
 syslogPath:=SYSTEM_GET_SYSLOG_PATH();

 logs.logs('CROSSROADS_SEND_REQUESTS_TO_SERVER:: Export logs');
 POSTFIX_EXPORT_LOGS();

 if not FileExists(syslogPath) then begin
    logs.logs('CROSSROADS_SEND_REQUESTS_TO_SERVER:: Warning !! Unable to stat "' + syslogPath + '" syslog path');
    exit;
 end;

 logs.logs('CROSSROADS_SEND_REQUESTS_TO_SERVER:: EXEC: /usr/bin/tail -n 100 ' + syslogPath + '>/opt/artica/logs/crossroads.syslog.log');
 fpsystem('/usr/bin/tail -n 100 ' + syslogPath + '>/opt/artica/logs/crossroads.syslog.log');

 cmdline:='/opt/artica/bin/curl -k -A artica --connect-timeout 5  ';
 cmdline:=cmdline + ' -F "postfixevents=@' + PHP_PATH + '/ressources/logs/postfix-all-events.log"';
 cmdline:=cmdline + ' -F "crossroads.syslog.log=@/opt/artica/logs/crossroads.syslog.log"';
 cmdline:=cmdline + ' -F "global_status=@'+ PHP_PATH + '/ressources/logs/global-status.ini"';
 cmdline:=cmdline + ' ' + uri;

 logs.logs('CROSSROADS_SEND_REQUESTS_TO_SERVER:: ' + cmdline);
 fpsystem(cmdline + ' >/opt/artica/logs/curl.logs 2>&1');

 if ParamStr(1)='-cross-rq' then writeln(ReadFileIntoString('/opt/artica/logs/curl.logs'));

 logs.logs(ReadFileIntoString('/opt/artica/logs/curl.logs'));


end;


//##############################################################################
function myconf.SYSTEM_IS_HOSTNAME_VALID() :boolean;
var
   hostname:string;
   exp:TStringDynArray;
   D:Boolean;
begin
    result:=false;
    hostname:=SYSTEM_FQDN();
     D:=COMMANDLINE_PARAMETERS('debug');
    exp:=Explode('.',hostname);

     if D then writeln(hostname + '=',length(exp));


    if length(exp)<2 then begin
       if D then writeln(intTostr(length(exp)) + '<2');
       result:=false;
       exit;
    end;
    result:=true;

end;
//##############################################################################
procedure myconf.ARTICA_SEND_WATCHDOG_QUEUE();
var
   QueuePath     :String;
   SYS           :TSystem;
   i             :integer;
   D             :boolean;
begin
 exit;
  D:=COMMANDLINE_PARAMETERS('debug');
  SYS:=TSystem.Create;
  QueuePath:=ARTICA_FILTER_QUEUEPATH();
  if not DirectoryExists(QueuePath) then exit;
  SYS.DirFiles(QueuePath , '*.eml');
  if SYS.DirListFiles.Count=0 then begin
     SYS.Free;
     exit;
  end;

  for i:=0 to SYS.DirListFiles.Count -1 do begin
      if D then writeln('File....:',SYS.DirListFiles.Strings[i],' ',SYSTEM_FILE_BETWEEN_NOW(SYS.DirListFiles.Strings[i]));
      if SYSTEM_FILE_BETWEEN_NOW(SYS.DirListFiles.Strings[i])>5 then begin
          if D then writeln('File....:'+SYS.DirListFiles.Strings[i] + ' as more than 5 minutes on ' + QueuePath + ' dir, release it');
          logs.logs('ARTICA_SEND_WATCHDOG_QUEUE::'+ SYS.DirListFiles.Strings[i] + ' as more than 5 minutes on ' + QueuePath + ' dir, release it' );
          if D then writeln(ExtractFilePath(Paramstr(0)) + 'artica-send --release ' + SYS.DirListFiles.Strings[i]);
          fpsystem(ExtractFilePath(Paramstr(0)) + 'artica-send --release ' + SYS.DirListFiles.Strings[i]);
      end;
  end;
  SYS.Free;
end;
//##############################################################################
function myconf.SYSTEM_GCC_PATH():string;
 begin
     if FileExists('/usr/bin/gcc') then exit('/usr/bin/gcc');
 end;
//##############################################################################
function myconf.SYSTEM_MAKE_PATH():string;
 begin
     if FileExists('/usr/bin/make') then exit('/usr/bin/make');
 end;
//##############################################################################
function  myconf.SYSTEM_GET_HTTP_PROXY:string;
var
   l:TStringList;
   i:integer;
   RegExpr:TRegExpr;

 begin
  if not FileExists('/etc/environment') then begin
     l:=TStringList.Create;
     l.Add('LANG="en_US.UTF-8"');
     l.SaveToFile('/etc/environment');
     exit;
  end;


  l:=TStringList.Create;
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='(http_proxy|HTTP_PROXY)=(.+)';

  l.LoadFromFile('/etc/environment');
  for i:=0 to l.Count -1 do begin
      if RegExpr.Exec(l.Strings[i]) then result:=RegExpr.Match[2];

  end;
 l.FRee;
 RegExpr.free;

end;
//##############################################################################
function myconf.WGET_DOWNLOAD_FILE(uri:string;file_path:string):boolean;
var SYS:Tsystem;
begin
SYS:=Tsystem.Create;
result:=SYS.WGET_DOWNLOAD_FILE(uri,file_path);
SYS.Free;
end;
//##############################################################################



FUNCTION myconf.SYSTEM_ENV_PATHS():string;
var
   Path:string;
   res:string;

 begin
     if FileExists('/usr/bin/printenv') then Path:='/usr/bin/printenv';
     if length(Path)=0 then exit;
     res:=ExecPipe(Path + ' PATH');
     result:=res;
end;
//##############################################################################
procedure Myconf.SYSTEM_ENV_PATH_SET(path:string);
var
 Table:TStringDynArray;
 datas:string;
 i:integer;
 newpath:string;
 D:Boolean;
begin
     D:=COMMANDLINE_PARAMETERS('debug');
     datas:=SYSTEM_ENV_PATHS();
     if length(datas)>1 then begin
        Table:=Explode(':',SYSTEM_ENV_PATHS());
        For i:=0 to Length(Table)-1 do begin
                 if D then writeln('SYSTEM_ENV_PATH_SET -> ' + path + ' already exists in env');
                 LOGS.logs('SYSTEM_ENV_PATH_SET -> ' + path + ' already exists in env');
                if Table[i]=path then exit;
        end;
     end;

    LOGS.logs('SYSTEM_ENV_PATH_SET -> ' + path);
    newpath:=SYSTEM_ENV_PATHS() + ':' + path;
    fpsystem('/usr/bin/env PATH=' + newpath + ' >/opt/artica/logs/env.tmp');

end;
//##############################################################################


function myconf.SYSTEM_VERIFY_CRON_TASKS();
var
   l:Tstringlist;
   logs:Tlogs;
begin
  l:=TStringList.Create;
  logs:=Tlogs.Create;
  forceDirectories('/etc/cron.d');
  
  if Not FileExists('/etc/cron.d/artica-cron-quarantine') then begin
      logs.Debuglogs('Create quarantine maintenance task in background;...');
      l.Add('#{artica-cron-quarantine_text}');
      l.Add('0 3 * * *  root ' +get_ARTICA_PHP_PATH() +'/bin/artica-quarantine -maintenance >/dev/null');
      l.SaveToFile('/etc/cron.d/artica-cron-quarantine');
  end;

l.Free;

if not FileExists('/etc/cron.d/artica_yorel') then YOREL_RECONFIGURE('');
logs.Debuglogs('SYSTEM_VERIFY_CRON_TASKS() end...');
result:='';

end;
//##############################################################################


function myconf.COMMANDLINE_PARAMETERS(FoundWhatPattern:string):boolean;
var
   i:integer;
   s:string;
   RegExpr:TRegExpr;

begin
 result:=false;
 s:='';
 if ParamCount>1 then begin
     for i:=2 to ParamCount do begin
        s:=s  + ' ' +ParamStr(i);
     end;
 end;
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:=FoundWhatPattern;
   if RegExpr.Exec(s) then begin
      RegExpr.Free;
      result:=True;
   end;


end;
//##############################################################################
function myconf.COMMANDLINE_EXTRACT_PARAMETERS(pattern:string):string;
var
   i:integer;
   s:string;
   RegExpr:TRegExpr;

begin
s:='';
 result:='';
 if ParamCount>0 then begin
     for i:=1 to ParamCount do begin
        s:=s  + ' ' +ParamStr(i);
     end;
 end;

         RegExpr:=TRegExpr.Create;
         RegExpr.Expression:=pattern;
         RegExpr.Exec(s);
         Result:=RegExpr.Match[1];
         RegExpr.Free;
end;
//##############################################################################
procedure myconf.DSPAM_EDIT_PARAM(key:string;value:string);
var
   i:integer;
   s:string;
   RegExpr:TRegExpr;
   l:TstringList;
   D:boolean;
begin
D:=COMMANDLINE_PARAMETERS('debug');
if not FileExists('/etc/dspam/dspam.conf') then exit;
l:=TstringList.Create;
l.LoadFromFile('/etc/dspam/dspam.conf');
s:=DSPAM_GET_PARAM(key);
   if length(s)=0 then begin
        if D then writeln('DSPAM_EDIT_PARAM:: Add the value "'+value+'"');
        l.Add(key + ' ' + value);
        l.SaveToFile('/etc/dspam/dspam.conf');
        l.free;
        exit();
   end;

RegExpr:=TRegExpr.Create;
RegExpr.Expression:='^' + key + '\s+(.+)';
for i:=0 to l.Count -1 do begin
   if RegExpr.Exec(l.Strings[i]) then begin
       l.Strings[i]:=key + ' ' + value;
       l.SaveToFile('/etc/dspam/dspam.conf');
       break;
   end;
end;
 RegExpr.Free;
 l.Free;

end;
//##############################################################################
function myconf.DSPAM_BIN_PATH():string;
begin
if FileExists('/usr/local/bin/dspam') then exit('/usr/local/bin/dspam');
if FileExists('/usr/bin/dspam') then exit('/usr/bin/dspam');
end;


//##############################################################################
procedure myconf.DSPAM_EDIT_PARAM_MULTI(key:string;value:string);
var

   s:string;
   l:TstringList;
   D:boolean;
begin
s:='';
D:=COMMANDLINE_PARAMETERS('debug');
if not FileExists('/etc/dspam/dspam.conf') then exit;
if DSPAM_IS_PARAM_EXISTS(key,value) then exit;
l:=TstringList.Create;
l.LoadFromFile('/etc/dspam/dspam.conf');



   if length(s)=0 then begin
        if D then writeln('DSPAM_EDIT_PARAM:: Add the value "'+value+'"');
        l.Add(key + ' ' + value);
        l.SaveToFile('/etc/dspam/dspam.conf');
        l.free;
        exit();
   end;

 l.Free;

end;

//##############################################################################
procedure myconf.DSPAM_REMOVE_PARAM(key:string);
var
   i:integer;
   RegExpr:TRegExpr;
   l:TstringList;
   D:boolean;
begin
D:=COMMANDLINE_PARAMETERS('debug');
if not FileExists('/etc/dspam/dspam.conf') then exit;
l:=TstringList.Create;
l.LoadFromFile('/etc/dspam/dspam.conf');


RegExpr:=TRegExpr.Create;
RegExpr.Expression:='^' + key + '\s+(.+)';
for i:=0 to l.Count -1 do begin
   if RegExpr.Exec(l.Strings[i]) then begin
      if D then writeln('remove line:',i);
       l.Delete(i);
       l.SaveToFile('/etc/dspam/dspam.conf');
       RegExpr.Free;
       l.Free;
       DSPAM_REMOVE_PARAM(key);
       exit;
   end;
end;


 l.SaveToFile('/etc/dspam/dspam.conf');
 RegExpr.Free;
 l.Free;

end;

//##############################################################################
function myconf.DSPAM_GET_PARAM(key:string):string;
var
   i:integer;
   RegExpr:TRegExpr;
   l:TStringList;

begin
if not FileExists('/etc/dspam/dspam.conf') then exit;
l:=TStringList.Create;
l.LoadFromFile('/etc/dspam/dspam.conf');
RegExpr:=TRegExpr.Create;
RegExpr.Expression:='^' + key + '\s+(.+)';
for i:=0 to l.Count -1 do begin
   if RegExpr.Exec(l.Strings[i]) then begin
       result:=trim(RegExpr.Match[1]);
       break;
   end;

end;
 RegExpr.Free;
 l.Free;


end;
//##############################################################################
function myconf.DSPAM_IS_PARAM_EXISTS(key:string;value:string):boolean;
var
   i:integer;
   RegExpr:TRegExpr;
   l:TStringList;

begin
result:=false;
if not FileExists('/etc/dspam/dspam.conf') then exit;
l:=TStringList.Create;
l.LoadFromFile('/etc/dspam/dspam.conf');
RegExpr:=TRegExpr.Create;
RegExpr.Expression:='^' + key + '\s+(.+)';
for i:=0 to l.Count -1 do begin
   if RegExpr.Exec(l.Strings[i]) then begin
       if value=RegExpr.Match[1] then begin
          result:=true;
          break;
       end;
   end;

end;
 RegExpr.Free;
 l.Free;


end;
//##############################################################################


function MyConf.get_SELINUX_ENABLED():boolean;
var filedatas:string;
RegExpr:TRegExpr;
begin
result:=false;
if not FileExists('/etc/selinux/config') then exit(False);
 filedatas:=ReadFileIntoString('/etc/selinux/config');
  RegExpr:=TRegExpr.create;
  RegExpr.Expression:='SELINUX=(enforcing|permissive|disabled)';
  if RegExpr.Exec(filedatas) then begin
         if RegExpr.Match[1]='permissive' then result:=True;
         if RegExpr.Match[1]='enforcing' then result:=True;
         if RegExpr.Match[1]='disabled' then result:=false;
       end
       else begin
          result:=False;
  end;
 end;
//##############################################################################
procedure Myconf.PHP5_ENABLE_GD_LIBRARY();
var
     RegExpr:TRegExpr;
     php_ini,apache_init:string;
     logs:Tlogs;
     FileData:TStringList;
     i:integer;
begin
logs:=Tlogs.Create();
php_ini:=PHP5_INI_PATH();
apache_init:=APACHE_GET_INITD_PATH();

if length(php_ini)=0 then begin
  logs.logsInstall('PHP5_ENABLE_GD_LIBRARY:: WARNING unable to locate php.ini file !!!');
  writeln('WARNING unable to locate php.ini file !!!');
  exit;
end;

if length(apache_init)=0 then begin
  logs.logsInstall('PHP5_ENABLE_GD_LIBRARY:: WARNING unable to locate apache init !!!');
  writeln('WARNING unable to locate apache init !!!');
  exit;
end;


    if debug then writeln('Enable GD Library for PHP');
    FileData:=TStringList.Create;
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='^extension=gd.so';

    if debug then begin
       writeln('Reading file "' + php_ini + '"');
       logs.logsInstall('PHP5_ENABLE_GD_LIBRARY::Reading file "' + php_ini + '"');
    end;

    FileData.LoadFromFile(php_ini);

    for i:=0 to FileData.Count -1 do begin
        if RegExpr.exec(FileData.Strings[i]) then begin
            logs.logsInstall('PHP5_ENABLE_GD_LIBRARY:: gd library is already set');
            writeln('GD Library already set...nothing to do');
            RegExpr.Free;
            FileData.Free;
            exit();
        end;
    end;

 logs.logsInstall('PHP5_ENABLE_GD_LIBRARY:: adding gd library');
 if debug then writeln('Set GD Library..');
 FileData.Add('extension=gd.so');
 FileData.SaveToFile(php_ini);
  if debug then writeln('Restarting apache');
  fpsystem(apache_init + ' restart');


end;
//#############################################################################

procedure MyConf.set_SELINUX_DISABLED();
var list:TstringList;
begin

if fileExists('/etc/rc.d/boot.apparmor') then begin
      ShowScreen('set_SELINUX_DISABLED:: Disable AppArmor...');
      fpsystem('/etc/init.d/boot.apparmor stop');
      fpsystem('/sbin/chkconfig -d boot.apparmor');
end;

if fileExists('/sbin/SuSEfirewall2') then begin
   ShowScreen('set_SELINUX_DISABLED:: Disable SuSEfirewall2...');
   fpsystem('/sbin/SuSEfirewall2 off');
end;
if FileExists('/etc/selinux/config') then begin
   killfile('/etc/selinux/config');
   list:=TstringList.Create;
   list.Add('SELINUX=disabled');
   list.SaveToFile('/etc/selinux/config');
   list.Free;
end;
end;
//#############################################################################
function MyConf.ARTICA_MYSQL_INFOS(val:string):string;
var ini:TIniFile;
begin
if not FileExists('/etc/artica-postfix/artica-mysql.conf') then exit();
ini:=TIniFile.Create('/etc/artica-postfix/artica-mysql.conf');
result:=ini.ReadString('MYSQL',val,'');
ini.Free;
end;
//#############################################################################
function MyConf.MYSQL_INIT_PATH:string;
begin
  if FileExists('/etc/init.d/mysql') then exit('/etc/init.d/mysql');
  if FileExists('/etc/init.d/mysqld') then exit('/etc/init.d/mysqld');
end;
//#############################################################################
function MyConf.MYSQL_MYCNF_PATH:string;
begin
  if FileExists('/opt/artica/mysql/etc/my.cnf') then exit('/opt/artica/mysql/etc/my.cnf');
  if FileExists('/etc/mysql/my.cnf') then exit('/etc/mysql/my.cnf');
  if FileExists('/etc/my.cnf') then exit('/etc/my.cnf');
end;
//#############################################################################
function Myconf.MYSQL_SERVER_PARAMETERS_CF(key:string):string;
var ini:TiniFile;
begin
  result:='';
  if not FileExists(MYSQL_MYCNF_PATH()) then exit();
  ini:=TIniFile.Create(MYSQL_MYCNF_PATH());
  result:=ini.ReadString('mysqld',key,'');
  
  if length(result)=0 then result:=ini.ReadString('mysqld_safe',key,'');
  
  ini.free;
end;
//#############################################################################
function Myconf.MYSQL_READ_CF(key:string;mycfpath:string):string;
var ini:TiniFile;
begin
  result:='';
  if not FileExists(mycfpath) then exit();
  ini:=TIniFile.Create(mycfpath);
  result:=ini.ReadString('mysqld',key,'');
  ini.free;
end;
//#############################################################################
function MyConf.MYSQL_BIN_PATH:string;
begin
  if FileExists('/usr/bin/mysql') then exit('/usr/bin/mysql');
  if FileExists('/opt/artica/bin/mysql') then exit('/opt/artica/bin/mysql');
end;
//#############################################################################
function MyConf.MYSQL_VERSION:string;
var mysql_bin,returned:string;
    RegExpr:TRegExpr;
begin
   mysql_bin:=MYSQL_BIN_PATH();
   if not FileExists(mysql_bin) then exit;
   returned:=ExecPipe(mysql_bin + ' -V');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='([0-9]+\.[0-9]+\.[0-9]+)';
   if RegExpr.Exec(returned) then result:=RegExpr.Match[1];
   RegExpr.Free;

end;
//#############################################################################
function MyConf.AWSTATS_MAILLOG_CONVERT_PATH_SOURCE():string;
begin
if FileExists('/opt/artica/awstats/tools/maillogconvert.pl') then exit('/opt/artica/awstats/tools/maillogconvert.pl');
if FileExists('/usr/share/doc/awstats/examples/maillogconvert.pl') then exit('/usr/share/doc/awstats/examples/maillogconvert.pl');
if FileExists('/usr/share/awstats/tools/maillogconvert.pl') then exit('/usr/share/awstats/tools/maillogconvert.pl');
if FileExists('/usr/share/doc/packages/awstats/tools/maillogconvert.pl') then exit('/usr/share/doc/packages/awstats/tools/maillogconvert.pl');
end;
//#############################################################################
function MyConf.AWSTATS_PATH():string;
begin
if FileExists('/opt/artica/awstats/wwwroot/cgi-bin/awstats.pl') then exit('/opt/artica/awstats/wwwroot/cgi-bin/awstats.pl');
if FileExists('/usr/lib/cgi-bin/awstats.pl') then exit('/usr/lib/cgi-bin/awstats.pl');
if FileExists('/srv/www/cgi-bin/awstats.pl') then exit('/srv/www/cgi-bin/awstats.pl');
if FileExists('/var/www/awstats/awstats.pl') then exit('/var/www/awstats/awstats.pl');
if FileExists('/usr/share/awstats/wwwroot/cgi-bin/awstats.pl') then exit('/usr/share/awstats/wwwroot/cgi-bin/awstats.pl');
end;

//#############################################################################
function myconf.AWSTATS_ETC_PATH():string;
begin
if DirectoryExists('/etc/awstats') then exit('/etc/awstats/awstats.mail.conf');
if DirectoryExists('/opt/artica/etc/awstats') then exit('/opt/artica/etc/awstats/awstats.mail.conf');
end;
//#############################################################################
function MyConf.AWSTATS_GET_VALUE(key:string):string;
var
    RegExpr:TRegExpr;
    FileDatas:TStringList;
    i:integer;
    ValueResulted:string;
    logs:Tlogs;
begin
   logs:=Tlogs.Create;
   if not FileExists(AWSTATS_ETC_PATH()) then  begin
      if FileExists(get_ARTICA_PHP_PATH() + '/bin/install/awstats/awstats.model.conf') then begin
         fpsystem('/bin/cp ' + get_ARTICA_PHP_PATH() + '/bin/install/awstats/awstats.model.conf ' + AWSTATS_ETC_PATH());
      end else begin
          logs.Debuglogs('AWSTATS_GET_VALUE:: unable to stat /opt/artica/etc/awstats/awstats.mail.conf');
          exit;
      end;
   end;

   if not FileExists('/opt/artica/etc/awstats/awstats.mail.conf') then  begin
      logs.Debuglogs('AWSTATS_GET_VALUE:: unable to stat /opt/artica/etc/awstats/awstats.mail.conf');
      exit;
   end;
   FileDatas:=TStringList.Create;
   FileDatas.LoadFromFile(AWSTATS_ETC_PATH());
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='^'+key+'([="''\s]+)(.+)';
   for i:=0 to FileDatas.Count -1 do begin
           if RegExpr.Exec(FileDatas.Strings[i]) then begin
              FileDatas.Free;
              ValueResulted:=RegExpr.Match[2];
              if ValueResulted='"' then ValueResulted:='';
              RegExpr.Free;
              exit(ValueResulted);
           end;

   end;
   FileDatas.Free;
   RegExpr.Free;

end;
//#############################################################################

function MyConf.AWSTATS_SET_VALUE(key:string;value:string):string;
var
    RegExpr:TRegExpr;
    FileDatas:TStringList;
    i:integer;
begin
   if not FileExists(AWSTATS_ETC_PATH()) then  begin
      logs.Debuglogs('AWSTATS_GET_VALUE:: unable to stat awstats.mail.conf');
      exit;
   end;
   FileDatas:=TStringList.Create;
   FileDatas.LoadFromFile(AWSTATS_ETC_PATH());
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='^'+key+'([="''\s]+)(.+)';
   for i:=0 to FileDatas.Count -1 do begin
           if RegExpr.Exec(FileDatas.Strings[i]) then begin
                FileDatas.Strings[i]:=key + '=' + value;
                FileDatas.SaveToFile(AWSTATS_ETC_PATH());
                FileDatas.Free;
                RegExpr.Free;
                exit;

           end;

   end;

  FileDatas.Add(key + '=' + value);
  FileDatas.SaveToFile(AWSTATS_ETC_PATH());
  FileDatas.Free;
  RegExpr.Free;
  result:='';

end;
//#############################################################################
procedure MyConf.AWSTATS_ADD_ETCPATH();
var
    FileDatas:TStringList;
    i:integer;
begin

   if Not FileExists(AWSTATS_PATH()) then exit;
   if FileExists('/etc/awstats') then exit;
   
   FileDatas:=TStringList.Create;
   FileDatas.LoadFromFile(AWSTATS_PATH());
   For i:=0 to FileDatas.Count-1 do begin
      if pos('"/etc/opt/awstats")',FileDatas.Strings[i])>0 then begin
            if pos('/opt/artica/etc/awstats',FileDatas.Strings[i])=0 then begin
               FileDatas.Strings[i]:=AnsiReplaceStr(FileDatas.Strings[i],'"/etc/opt/awstats"','"/etc/opt/awstats","/opt/artica/etc/awstats"');
            end;
      end;

   end;
   FileDatas.SaveToFile(AWSTATS_PATH());
   FileDatas.free;
end;

//#############################################################################

function MyConf.SASLAUTHD_VERSION():string;
var
    RegExpr:TRegExpr;
    FileDatas:TStringList;
    i:integer;
begin
if not FileExists('/opt/artica/bin/saslauthd') then exit;
fpsystem('/opt/artica/bin/saslauthd -v >/opt/artica/logs/saslauth.tmp 2>&1');
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='^saslauthd\s+([0-9\.]+)';
    FileDatas:=TStringList.Create;
    FileDatas.LoadFromFile('/opt/artica/logs/saslauth.tmp');
    for i:=0 to FileDatas.Count-1 do begin
        if RegExpr.Exec(FileDatas.Strings[i]) then begin
             result:=RegExpr.Match[1];
             break;
        end;
    end;
             RegExpr.free;
             FileDatas.Free;

end;
//#############################################################################
function myconf.CLAMDSCAN_BIN_PATH():string;
begin
if FileExists('/usr/bin/clamdscan') then exit('/usr/bin/clamdscan');
if FileExists('/opt/artica/bin/clamdscan') then exit('/opt/artica/bin/clamdscan');
end;
//#############################################################################
function MyConf.AMAVISD_VERSION():string;
var
    RegExpr:TRegExpr;
    FileDatas:TStringList;
    i:integer;
    D:boolean;
begin

D:=COMMANDLINE_PARAMETERS('--verbose');

if not FileExists('/opt/artica/bin/amavisd') then begin
   if D then writeln('AMAVISD_VERSION:: unable to stat /opt/artica/bin/amavisd');
   exit;
end;

if D then writeln('AMAVISD_VERSION:: /opt/artica/bin/amavisd -V >/opt/artica/logs/amavisd.tmp 2>&1');
fpsystem('/opt/artica/bin/amavisd -V >/opt/artica/logs/amavisd.tmp 2>&1');
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='amavisd-new-([0-9\.]+)';
    FileDatas:=TStringList.Create;

    FileDatas.LoadFromFile('/opt/artica/logs/amavisd.tmp');
    if D then writeln('AMAVISD_VERSION:: ',FileDatas.Count,' lines number');
    for i:=0 to FileDatas.Count-1 do begin
        if RegExpr.Exec(FileDatas.Strings[i]) then begin
             result:=RegExpr.Match[1];
             break;
        end;
    end;
       if D then writeln('AMAVISD_VERSION:: ',result,' result');
             RegExpr.free;
             FileDatas.Free;

end;
//#############################################################################


function MyConf.DNSMASQ_GET_VALUE(key:string):string;
var
    RegExpr:TRegExpr;
    FileDatas:TStringList;
    i:integer;
    ValueResulted:string;
begin
   if not FileExists('/etc/dnsmasq.conf') then  exit;
   FileDatas:=TStringList.Create;
   FileDatas.LoadFromFile('/etc/dnsmasq.conf');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='^'+key+'([="''\s]+)(.+)';
   for i:=0 to FileDatas.Count -1 do begin
           if RegExpr.Exec(FileDatas.Strings[i]) then begin
              FileDatas.Free;
              ValueResulted:=RegExpr.Match[2];
              if ValueResulted='"' then ValueResulted:='';
              RegExpr.Free;
              exit(ValueResulted);
           end;

   end;
   FileDatas.Free;
   RegExpr.Free;

end;
//#############################################################################
function MyConf.DNSMASQ_SET_VALUE(key:string;value:string):string;
var
    RegExpr:TRegExpr;
    FileDatas:TStringList;
    i:integer;
    FileToEdit:string;
begin
   FileToEdit:='/etc/dnsmasq.conf';
   if not FileExists(FileToEdit) then  fpsystem('/bin/touch ' + FileToEdit);
   FileDatas:=TStringList.Create;
   FileDatas.LoadFromFile(FileToEdit);
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='^'+key+'([="''\s]+)(.+)';
   for i:=0 to FileDatas.Count -1 do begin
           if RegExpr.Exec(FileDatas.Strings[i]) then begin
                FileDatas.Strings[i]:=key + '=' + value;
                FileDatas.SaveToFile(FileToEdit);
                FileDatas.Free;
                RegExpr.Free;
                exit;

           end;

   end;

  FileDatas.Add(key + '=' + value);
  FileDatas.SaveToFile(FileToEdit);
  FileDatas.Free;
  RegExpr.Free;
  result:='';

end;
//#############################################################################
function MyConf.SYSTEM_ADD_NAMESERVER(nameserver:string):boolean;
var
   FileDatas:Tstringlist;
   RegExpr:TRegExpr;
   FileToEdit:string;
   i:integer;
begin
   FileToEdit:='/etc/resolv.conf';
   if not FileExists(FileToEdit) then  begin
      showscreen('SYSTEM_ADD_NAMESERVER:: unable to stat ' + FileToEdit);
      exit(false);
   end;

   FileDatas:=TStringList.Create;
   FileDatas.LoadFromFile(FileToEdit);
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='^nameserver\s+' +nameserver;
   for i:=0 to FileDatas.Count -1 do begin
       if RegExpr.Exec(FileDatas.Strings[i]) then begin
          RegExpr.free;
          FileDatas.free;
          exit(true);
       end;
   end;

   FileDatas.Insert(0,'nameserver ' + nameserver);
   FileDatas.SaveToFile(FileToEdit);
   RegExpr.free;
   FileDatas.free;
   exit(true);
end;

//#############################################################################
function MyConf.DNSMASQ_BIN_PATH():string;
begin
    if FileExists('/usr/sbin/dnsmasq') then exit('/usr/sbin/dnsmasq');
    if FileExists('/usr/local/sbin/dnsmasq') then exit('/usr/local/sbin/dnsmasq');
end;
//#############################################################################
function MyConf.SYSTEM_LD_SO_CONF_ADD(path:string):string;
var
 FileDatas:TStringList;
 i:integer;
begin
     FileDatas:=TStringList.Create;
    FileDatas.LoadFromFile('/etc/ld.so.conf');
    for i:=0 to FileDatas.Count -1 do begin
      if trim(FileDatas.Strings[i])=path then begin
         ShowScreen('SYSTEM_LD_SO_CONF_ADD:: "' + path + '" already added to /etc/ld.so.conf');
         FileDatas.Free;
         exit;
      end;
    end;

     FileDatas.Add(path);
     FileDatas.SaveToFile('/etc/ld.so.conf');
     FileDatas.Free;
     ShowScreen('SYSTEM_LD_SO_CONF_ADD:: -> ldconfig ... Please wait...');
     fpsystem('ldconfig');
     result:='';




end;

//#############################################################################
function MyConf.AWSTATS_VERSION():string;
var
    RegExpr,RegExpr2:TRegExpr;
    FileDatas:TStringList;
    i:integer;
    Major,minor,awstats_root:string;
    D:boolean;
begin
     D:=COMMANDLINE_PARAMETERS('debug');
    awstats_root:=AWSTATS_PATH();



    if length(awstats_root)=0 then begin
       if D then ShowScreen('AWSTATS_VERSION::unable to locate awstats.pl');
      exit;
   end;

    if D then ShowScreen('AWSTATS_VERSION:: ->'+ awstats_root);

   FileDatas:=TStringList.Create;
   FileDatas.LoadFromFile(awstats_root);
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='^\$VERSION="([0-9\.]+)';

   RegExpr2:=TRegExpr.Create;
   RegExpr2.Expression:='^\$REVISION=''\$Revision:\s+([0-9\.]+)';

   for i:=0 to FileDatas.Count -1 do begin
           if RegExpr.Exec(FileDatas.Strings[i]) then begin
              if D then ShowScreen('AWSTATS_VERSION:: found ->'+ FileDatas.Strings[i] + '(' +RegExpr.Match[1]  + ')' );
              Major:=RegExpr.Match[1];
           end;
           if RegExpr2.Exec(FileDatas.Strings[i]) then begin
              if D then ShowScreen('AWSTATS_VERSION:: found ->'+ FileDatas.Strings[i] + '(' +RegExpr2.Match[1]  + ')' );
              minor:=RegExpr2.Match[1];
           end;
           if length(Major)>0 then begin
                  if length(minor)>0 then begin
                  AWSTATS_VERSION:=major + ' rev ' + minor;
                  FileDatas.Free;
                  RegExpr.Free;
                  RegExpr2.Free;
                  exit;
                  end;
           end;

   end;
                  FileDatas.Free;
                  RegExpr.Free;
                  RegExpr2.Free;
                  AWSTATS_VERSION:=major;

end;

//#############################################################################

procedure MyConf.AWSTATS_GENERATE();
var maintool,artica_path:string;
 FileDatas:TStringList;
 D:boolean;
 i:integer;
 Zcommand,zConfig:string;
 MLOGS:TLOGS;
begin
     D:=COMMANDLINE_PARAMETERS('debug');
    if not D then D:=COMMANDLINE_PARAMETERS('generate');
    if not D then D:=COMMANDLINE_PARAMETERS('reconfigure');

    mLogs:=Tlogs.Create;
    artica_path:=get_INSTALL_PATH();
    maintool:=AWSTATS_PATH();
    FileDatas:=TStringList.Create;
    FileDatas.LoadFromFile(artica_path + '/ressources/databases/awstats.pages.db');

    if length(maintool)=0 then begin
       if D then ShowScreen('AWSTATS_GENERATE:: unable to locate awstats.pl');
       mLogs.logs('AWSTATS_GENERATE:: unable to locate awstats.pl');
       exit;
    end;

    fpsystem(maintool + ' -update -config=mail');
    for i:=0 to FileDatas.Count -1 do begin
          zConfig:=trim(FileDatas.Strings[i]);
          if zConfig='index' then begin
             Zcommand:=maintool + ' -config=mail -staticlinks -output >' + artica_path + '/ressources/logs/awstats.' + zConfig + '.tmp';
          end else begin
              Zcommand:=maintool + ' -config=mail -output=' + zConfig + ' -staticlinks >' + artica_path + '/ressources/logs/awstats.' + zConfig + '.tmp';
          end;
          if D then ShowScreen('AWSTATS_GENERATE::' + Zcommand);
          fpsystem(Zcommand);
    end;
   FileDatas.Free;

end;



//#############################################################################
function MyConf.AWSTATS_SET_PLUGIN(value:string):string;
var
    RegExpr:TRegExpr;
    FileDatas:TStringList;
    i:integer;
begin
   result:='';
   AWSTATS_SET_PLUGIN:='';
   if not FileExists(AWSTATS_ETC_PATH()) then  begin
      showscreen('AWSTATS_SET_PLUGIN:: unable to stat awstats.mail.conf');
      exit;
   end;
   FileDatas:=TStringList.Create;
   FileDatas.LoadFromFile(AWSTATS_ETC_PATH());
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='^LoadPlugin="' + value + '"';
   for i:=0 to FileDatas.Count -1 do begin
           if RegExpr.Exec(FileDatas.Strings[i]) then begin
                ShowScreen('AWSTATS_SET_PLUGIN:: Plugin ' + value + ' already added');
                FileDatas.Free;
                RegExpr.Free;
                exit;

           end;

   end;
  ShowScreen('AWSTATS_SET_PLUGIN:: Add Plugin ' + value);
  FileDatas.Add('LoadPlugin="' + value + '"');
  FileDatas.SaveToFile(AWSTATS_ETC_PATH());
  FileDatas.Free;
  RegExpr.Free;


end;

//#############################################################################


function MyConf.ARTICA_MYSQL_SET_INFOS(val:string;value:string):boolean;
var ini:TIniFile;
begin
result:=true;
ini:=TIniFile.Create('/etc/artica-postfix/artica-mysql.conf');
ini.WriteString('MYSQL',val,value);
ini.Free;
end;
//#############################################################################
function MyConf.MYSQL_ROOT():string;
begin
   result:=ARTICA_MYSQL_INFOS('database_admin');
   if length(result)=0 then result:='root';
end;
//#############################################################################
function MyConf.MYSQL_PASSWORD():string;
begin
   result:=ARTICA_MYSQL_INFOS('database_password');
   if length(result)=0 then result:='';
end;
//#############################################################################
function MyConf.MYSQL_SERVER():string;
begin
   result:=ARTICA_MYSQL_INFOS('mysql_server');
   if length(result)=0 then result:='127.0.0.1';
end;
//#############################################################################
function MyConf.MYSQL_PORT():string;
var
   mycf_path   :string;
   logs:Tlogs;
begin
   mycf_path:=MYSQL_MYCNF_PATH();
   result:=MYSQL_READ_CF('port',mycf_path);
   
   if length(result)=0 then begin
      logs:=Tlogs.Create;
      logs.Debuglogs('MYSQL_PORT:: ' + mycf_path + ' did not store info ?? for port -> 3306 by default');
   end;
   if length(result)=0 then result:='3306';
end;
//#############################################################################


function MyConf.MYSQL_ENABLED():boolean;
var s:string;
begin
   result:=true;
   s:=ARTICA_MYSQL_INFOS('use_mysql');
   s:=LowerCase(s);
   if s='yes' then result:=true;
   if s='no' then result:=false;
end;
//#############################################################################
function MyConf.ARTICA_VERSION():string;
var
   l:string;
   F:TstringList;

begin
   l:=get_ARTICA_PHP_PATH() + '/VERSION';
   if not FileExists(l) then exit('0.00');
   F:=TstringList.Create;
   F.LoadFromFile(l);
   result:=trim(F.Text);
   F.Free;
end;
//#############################################################################
function MyConf.MYSQL_ACTION_TESTS_ADMIN():boolean;
    var root,password,commandline,cmd_result:string;
begin
  root:=MYSQL_ROOT();
  password:=MYSQL_PASSWORD();
  if not fileExists('/usr/bin/mysql') then exit(false);
  if length(password)>0 then password:=' -p'+password;
  commandline:=MYSQL_EXEC_BIN_PATH() + ' -e ''select User,Password from user'' -u '+ root +password+' mysql';
  cmd_result:=ExecPipe(commandline);
  if length(cmd_result)>0 then exit(true) else exit(false);
end;
//#############################################################################
function MyConf.MYSQL_ACTION_COUNT_TABLES(database_name:string):integer;
    var root,commandline,password:string;
    list:TStringList;
    i:integer;
    XDebug:boolean;
    RegExpr:TRegExpr;
    count:integer;
begin
  count:=0;
  root:=MYSQL_ROOT();
  password:=MYSQL_PASSWORD();
  XDebug:=COMMANDLINE_PARAMETERS('debug');
  if length(password)>0 then password:=' -p'+password;
  if not fileExists('/usr/bin/mysql') then exit(0);
  commandline:=MYSQL_EXEC_BIN_PATH() + ' -N -s -X -e ''show tables'' -u '+ root +password + ' ' + database_name;
  if XDebug then ShowScreen('MYSQL_ACTION_COUNT_TABLES::'+commandline);
  list:=TStringList.Create;
  list.LoadFromStream(ExecStream(commandline,false));
  if list.Count<2 then begin
    list.free;
    exit(0);
  end;

RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='<field name="Tables_in_' +database_name + '">(.+)<\/field>';
  //ShowScreen('MYSQL_ACTION_COUNT_TABLES::'+RegExpr.Expression);
  for i:=0 to list.count-1 do begin
      if RegExpr.Exec(list.Strings[i]) then inc(count);

  end;

list.free;
RegExpr.free;
exit(count);

end;
//#############################################################################
function MyConf.MYSQL_ACTION_IMPORT_DATABASE(filenname:string;database:string):boolean;
    var
    Logs:Tlogs;
begin
  result:=true;
  logs:=Tlogs.Create;
  logs.EXECUTE_SQL_FILE(filenname,database);
end;
//#############################################################################

procedure myconf.MYSQL_RECONFIGURE_DB();
var
   list:Tstringlist;
   path,tablename,database:string;
   sys:TSystem;
   i:integer;
   logs:Tlogs;
   RegExpr:TRegExpr;
   datadir:string;
   DatabaseName:string;
   DB:string;
begin
 Path:=ExtractFilePath(ParamStr(0)) + 'install/mysqldb';
 logs:=Tlogs.Create;
 if not DirectoryExists(Path) then begin
    logs.Debuglogs('MYSQL_RECONFIGURE_DB:: unable to stat ' + path);
    exit;
 end;
 logs.Debuglogs('MYSQL_RECONFIGURE_DB:: start');
 sys:=Tsystem.Create();
 list:=TStringList.Create;
 list.AddStrings(sys.RecusiveListFiles(path));
 RegExpr:=TRegExpr.Create;
 datadir:=MYSQL_SERVER_PARAMETERS_CF('datadir');
 
 logs.Debuglogs('MYSQL_RECONFIGURE_DB::datadir='+datadir );
 logs.Debuglogs('MYSQL_RECONFIGURE_DB::Conntection ->' );
 
if not logs.Connect() then exit;
 logs.Debuglogs('MYSQL_RECONFIGURE_DB:: ' + IntTostr(list.Count) + ' files in '+Path);
 RegExpr.Expression:='db\.(.+)\.[0-9]+\.db';
 for i:=0 to list.Count-1 do begin
     if RegExpr.Exec(list.Strings[i]) then begin
         DatabaseName:=RegExpr.Match[1];
         tablename:=MYSQL_PARSE_TABLE_NAME_INFILE(list.Strings[i]);

         
         
         if not DirectoryExists(datadir + '/' + DatabaseName)then begin
                  DB:='CREATE DATABASE ' + DatabaseName;
                  logs.QUERY_SQL( pChar(DB),'');
         end;
         if length(tablename)>0 then begin
            if not FileExists(datadir+'/' + RegExpr.Match[1] + '/'+ tablename + '.frm') then begin
            logs.Debuglogs('');
            logs.Debuglogs('MYSQL_RECONFIGURE_DB::------------------------------------------------------------------------------');
            logs.Debuglogs('MYSQL_RECONFIGURE_DB::TableName.........: ' + tablename);
            logs.Debuglogs('MYSQL_RECONFIGURE_DB::Base Path.........: ' + datadir + '/' + RegExpr.Match[1]);
            logs.Debuglogs('MYSQL_RECONFIGURE_DB::Table Path........: ' + datadir+'/' + RegExpr.Match[1] + '/'+ tablename + '.frm');
            logs.Debuglogs('MYSQL_RECONFIGURE_DB::datadir...........: "'+datadir+'"');
            logs.Debuglogs('MYSQL_RECONFIGURE_DB::my.cnf............: "'+MYSQL_MYCNF_PATH()+'"');
            logs.Debuglogs('MYSQL_RECONFIGURE_DB::Filename..........: "'+list.Strings[i]+'"');
            logs.Debuglogs('MYSQL_RECONFIGURE_DB:: Parsing file ' + list.Strings[i] + ' table ' + tablename + ' in DB ' + RegExpr.Match[1]);
            logs.Debuglogs('MYSQL_RECONFIGURE_DB::' + datadir + '/' + RegExpr.Match[1] + '/'+ tablename + '.frm doesn''t exists');
            MYSQL_ACTION_IMPORT_FILE(list.Strings[i],RegExpr.Match[1],MYSQL_MYCNF_PATH());
            end;
         end else begin
              MYSQL_ACTION_IMPORT_FILE(list.Strings[i],RegExpr.Match[1],MYSQL_MYCNF_PATH());
         end;
     end;


 end;

 RegExpr.Expression:='ins\.(.+?)\.(.+?)\.db';
 for i:=0 to list.Count-1 do begin
    if RegExpr.Exec(list.Strings[i]) then begin
         tablename:=RegExpr.Match[2];
         database:=RegExpr.Match[1];
         path:=datadir+'s/' + database + '/'+ tablename + '.MYD';
         if FileExists(path) then begin
         logs.Debuglogs('MYSQL_RECONFIGURE_DB:: instert values in' + tablename + ' table in '+database + ' ('+path +')');
            if logs.GetFileBytes(path)<150 then begin

                MYSQL_ACTION_IMPORT_FILE(list.Strings[i],database,MYSQL_MYCNF_PATH());
            end;
         end else begin
             logs.Debuglogs('MYSQL_RECONFIGURE_DB:: unable to stat ' +path);
         end;
    end;
 end;
 
logs.Disconnect();

end;
//#############################################################################
function myconf.MYSQL_DETERMINE_DATABASE_IN_FILEQUERY(path:string):string;
var
   list:Tstringlist;
   i:integer;
   RegExpr:TRegExpr;
   D:boolean;
begin


     D:=COMMANDLINE_PARAMETERS('debug');

     if not FileExists(path) then begin
        if D then writeln('MYSQL_DETERMINE_DATABASE_IN_FILEQUERY:: unable to stat ' + path);
        exit;
     end;



     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='INSERT INTO\s+(.+?)\.';
     list:=Tstringlist.Create;
     list.LoadFromFile(path);
     for i:=0 to list.Count-1 do begin
          list.Strings[i]:=AnsiReplaceStr(list.Strings[i],'`','');
          if D then writeln('MYSQL_DETERMINE_DATABASE_IN_FILEQUERY: parse :',list.Strings[i]);
          if RegExpr.Exec(list.Strings[i]) then begin
            result:=RegExpr.Match[1];
            if D then writeln('MYSQL_DETERMINE_DATABASE_IN_FILEQUERY: Found :',result);
            break;
          end;
     end;
RegExpr.Free;
list.Free;

end;
//#############################################################################
function myconf.MYSQL_PARSE_TABLE_NAME_INFILE(path:string):string;
var
   list:Tstringlist;
   i:integer;
   RegExpr:TRegExpr;
begin
 list:=TStringList.Create;
 list.LoadFromFile(path);
 RegExpr:=TRegExpr.Create;
 RegExpr.Expression:='CREATE TABLE\s+(.+)[s\(]+';
for i:=0 to list.Count-1 do begin
     if RegExpr.Exec(list.Strings[i]) then begin
        result:=trim(RegExpr.Match[1]);
        break;
     end;
 end;
 if length(result)>0 then begin
       result:=AnsiReplaceStr(result,'`','');
       RegExpr.Expression:='(.+?)\.(.+)';
       if RegExpr.Exec(result) then begin
          result:=trim(RegExpr.Match[2]);
       end;

 end;
 
 RegExpr.Expression:='IF NOT EXISTS\s+(.+)';
 if RegExpr.Exec(result) then begin
          result:=trim(RegExpr.Match[1]);
 end;
 
 
 RegExpr.Expression:='table (.+?) like';
  if RegExpr.Exec(result) then begin
          result:=trim(RegExpr.Match[1]);
 end;
 RegExpr.Expression:='(.+?) like';
  if RegExpr.Exec(result) then begin
          result:=trim(RegExpr.Match[1]);
 end;
 RegExpr.Expression:='(.+?)\s+\(';
  if RegExpr.Exec(result) then begin
          result:=trim(RegExpr.Match[1]);
 end;
 
 list.Free;
 RegExpr.Free;

end;
//#############################################################################

function MyConf.MYSQL_ACTION_IMPORT_FILE(filenname:string;database:string;mycf_path:string):boolean;
    var
    Logs:Tlogs;
begin
  result:=false;
  logs:=Tlogs.Create;
  
  
  if not logs.Connect() then exit;

  if not FileExists(mycf_path) then begin
     logs.Debuglogs('MYSQL_ACTION_IMPORT_FILE:: unable to stat ' + mycf_path);
     exit;
  end;

  if Get_INFOS('BadMysqlPassword')='1' then begin
     logs.logs('MYSQL_ACTION_IMPORT_FILE:: Please set correct username and password for mysql root...');
     logs.Debuglogs('MYSQL_ACTION_IMPORT_FILE:: Please set correct username and password for mysql root...');
     exit;
  end;
  
  if not FileExists(filenname) then begin
     logs.Debuglogs('MYSQL_ACTION_IMPORT_DATABASE:: Unable to stat ' +filenname);
     exit;
  end;
try
   if not logs.IF_DATABASE_EXISTS('amavis') then begin
      logs.QUERY_SQL(PChar('CREATE DATABASE amavis;'),'');
   end;
except
   logs.Debuglogs('MYSQL_ACTION_IMPORT_DATABASE:: FATAL exception on function MyConf.MYSQL_ACTION_IMPORT_FILE(1)');
   exit;
end;

try
   if not logs.IF_DATABASE_EXISTS('artica_events') then begin
      logs.QUERY_SQL(PChar('CREATE DATABASE artica_events;'),'');
   end;
except
   logs.Debuglogs('MYSQL_ACTION_IMPORT_DATABASE:: FATAL exception on function MyConf.MYSQL_ACTION_IMPORT_FILE(2)');
   exit;
end;

try
   logs.QUERY_SQL(PChar(ReadFileIntoString(filenname)),database);
except
 logs.Debuglogs('MYSQL_ACTION_IMPORT_DATABASE:: FATAL exception on function MyConf.MYSQL_ACTION_IMPORT_FILE(3)');
   exit;
end;
try
   logs.Disconnect();
except
  logs.Debuglogs('MYSQL_ACTION_IMPORT_DATABASE:: FATAL exception on function MyConf.MYSQL_ACTION_IMPORT_FILE() invoke -> logs.Disconnect()');
  exit;
end;


end;
//#############################################################################
function MyConf.MYSQL_COUNT_SYS_EVENTS():integer;
    var
       root,commandline,password,port,socket,mysqlbin,database:string;
       RegExpr:TRegExpr;
       sql:string;
       l:TstringList;
begin
  root    :=MYSQL_ROOT();
  password:=MYSQL_PASSWORD();
  port    :=MYSQL_SERVER_PARAMETERS_CF('port');
  socket  :=MYSQL_SERVER_PARAMETERS_CF('socket');
  mysqlbin:=MYSQL_EXEC_BIN_PATH();
  sql:='select count(ID) form sys_events';
  database:='artica_events';

  if length(password)>0 then password:=' -p'+password;
  if not fileExists(mysqlbin) then begin
     ShowScreen('MYSQL_ACTION_QUERY:: Unable to locate mysql binary ' + '"' + mysqlbin + '"');
     exit(0);
  end;
  commandline:=mysqlbin + ' --port=' + port + ' --socket=' +socket+ ' --database=' + database + ' --skip-column-names --silent --execute=''' + sql + ''' --user='+ root +password;
  commandline:=commandline + ' >/opt/artica/logs/sys_events.tmp 2>&1';
  fpsystem(commandline);
  l:=Tstringlist.Create;
  if FileExists('/opt/artica/logs/sys_events.tmp') then begin
     l.LoadFromFile('/opt/artica/logs/sys_events.tmp');
     Deletefile('/opt/artica/logs/sys_events.tmp');
     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='([0-9]+)';
     if RegExpr.Exec(l.Text) then begin
        result:=StrToInt(RegExpr.Match[1]);
        end else begin
        result:=0;
     end;
  end;
  
  RegExpr.free;
  l.free;
  
  
end;
//#############################################################################

function MyConf.MYSQL_ACTION_QUERY_DATABASE(database:string;sql:string):boolean;
    var
       root,commandline,password,port,socket,mysqlbin:string;
       Logs:Tlogs;

begin
  root    :=MYSQL_ROOT();
  password:=MYSQL_PASSWORD();
  port    :=MYSQL_SERVER_PARAMETERS_CF('port');
  socket  :=MYSQL_SERVER_PARAMETERS_CF('socket');
  Logs    :=Tlogs.Create;
  mysqlbin:=MYSQL_EXEC_BIN_PATH();


  if length(password)>0 then password:=' -p'+password;
  if not fileExists(mysqlbin) then begin
     ShowScreen('MYSQL_ACTION_QUERY:: Unable to locate mysql binary ' + '"' + mysqlbin + '"');
     exit(false);
  end;
  commandline:=mysqlbin + ' --port=' + port + ' --socket=' +socket+ ' --database=' + database + ' --skip-column-names --silent --xml --execute=''' + sql + ''' --user='+ root +password;
  commandline:=commandline + ' >/dev/null 2>&1';
  
  Logs.Debuglogs('MYSQL_ACTION_QUERY::'+commandline);
  fpsystem(commandline);
end;
//#############################################################################

function Myconf.MYSQL_EXEC_BIN_PATH():string;
begin
   if FileExists('/opt/artica/mysql/bin/mysql') then exit('/opt/artica/mysql/bin/mysql');
   if FileExists('/opt/artica/bin/mysql') then exit('/opt/artica/bin/mysql');
   if FileExists('/usr/bin/mysql') then exit('/usr/bin/mysql');
end;
//#############################################################################
function MyConf.MYSQL_ACTION_CREATE_ADMIN(username:string;password:string):boolean;
    var root,commandline,pass:string;
    list:TStringList;
    i:integer;
    XDebug:boolean;
    RegExpr:TRegExpr;
    found:boolean;
begin
  if length(password)=0 then begin
     writeln('please, set a password...');
     exit(false);
  end;
  pass:=password;
  found:=false;
  if ParamStr(2)='setadmin' then XDebug:=true;
  root:=MYSQL_ROOT();
  password:=MYSQL_PASSWORD();
   if not fileExists('/usr/bin/mysql') then begin
     ShowScreen('MYSQL_ACTION_IMPORT_DATABASE:: Unable to locate mysql binary (usually in  /usr/bin/mysql)');
     exit(false);
  end;
  if length(password)>0 then password:=' -p'+password;
  commandline:=MYSQL_EXEC_BIN_PATH() + ' -N -s -X -e ''select User from user'' -u '+ root +password+' mysql';
  if XDebug then ShowScreen(commandline);
  list:=TStringList.Create;
  list.LoadFromStream(ExecStream(commandline,false));
  if list.Count<2 then begin
    list.free;
    exit(false);
  end;
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='<field name="User">(.+)<\/field>';
  for i:=0 to list.count-1 do begin
      if RegExpr.Exec(list.Strings[i]) then begin
          if RegExpr.Match[1]=username then found:=True;
      end;
  end;
  if found=true then begin
     ShowScreen('MYSQL_ACTION_CREATE_ADMIN:: updating ' + username + ' password');
     commandline:=MYSQL_EXEC_BIN_PATH() + ' -N -s -X -e ''UPDATE user SET Password=PASSWORD("' + pass + '") WHERE User="'+username+'"; FLUSH PRIVILEGES;'' -u '+ root +password+' mysql';
     if XDebug then ShowScreen('MYSQL_ACTION_CREATE_ADMIN::' + commandline);
     fpsystem(commandline);
  end else begin

  commandline:=MYSQL_EXEC_BIN_PATH() + ' -N -s -X -e ''INSERT INTO user';
  commandline:=commandline + ' (Host,User,Password,Select_priv,Insert_priv,Update_priv,Delete_priv,Create_priv,Drop_priv,Reload_priv,Shutdown_priv,Process_priv,File_priv,Grant_priv,References_priv,Index_priv,';
  commandline:=commandline + ' Alter_priv,Show_db_priv,Super_priv,Create_tmp_table_priv,Lock_tables_priv,Execute_priv,Repl_slave_priv,Repl_client_priv,Create_view_priv,Show_view_priv,Create_routine_priv,'; //11
  commandline:=commandline + ' Alter_routine_priv,Create_user_priv)';
  commandline:=commandline + ' VALUES("localhost","'+ username +'",PASSWORD("'+ pass+'"),';
  commandline:=commandline + '"Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y",';
  commandline:=commandline + '"Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y");FLUSH PRIVILEGES;'' -u '+ root +password+' mysql';
  if XDebug then ShowScreen('MYSQL_ACTION_CREATE_ADMIN::' + commandline);
  fpsystem(commandline);
  end;

  list.free;

end;
//#############################################################################

procedure MyConf.set_LINUX_DISTRI(val:string);
var ini:TIniFile;
begin
ini:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
ini.WriteString('LINUX','distribution-name',val);
ini.Free;
end;
//#############################################################################
function MyConf.OPENSSL_TOOL_PATH():string;
var
   SYSadmin:Tsystem;
begin
SYSadmin:=Tsystem.create;
result:=SYSadmin.LOCATE_OPENSSL_TOOL_PATH();
end;

//#############################################################################
function MyConf.CERTIFICATE_PASS(path:string):string;
var ini:TIniFile;
begin
ini:=TIniFile.Create(path);
result:=ini.ReadString('req','input_password','secret');
ini.Free;
end;
//#############################################################################
function MyConf.CERTIFICATE_PATH(path:string):string;
var ini:TIniFile;
begin
ini:=TIniFile.Create(path);
result:=ini.ReadString('default_db','dir','/etc/postfix/certificates');
ini.Free;
end;
//#############################################################################
function MyConf.CERTIFICATE_CA_FILENAME(path:string):string;
var ini:TIniFile;
begin
ini:=TIniFile.Create(path);
result:=ini.ReadString('postfix','smtpd_tls_CAfile','cacert.pem');
ini.Free;
end;
//#############################################################################
function MyConf.CERTIFICATE_KEY_FILENAME(path:string):string;
var ini:TIniFile;
begin
ini:=TIniFile.Create(path);
result:=ini.ReadString('postfix','smtpd_tls_key_file','smtpd.key');
ini.Free;
end;
//#############################################################################
function MyConf.CERTIFICATE_CERT_FILENAME(path:string):string;
var ini:TIniFile;
begin
ini:=TIniFile.Create(path);
result:=ini.ReadString('postfix','smtpd_tls_cert_file','smtpd.crt');
ini.Free;
end;
//#############################################################################
function MyConf.PROCMAIL_QUARANTINE_PATH():string;
var ini:TIniFile;
begin
if not fileExists('/etc/artica-postfix/artica-procmail.conf') then begin
   result:='/var/quarantines/procmail';
   exit;
end;
ini:=TIniFile.Create('/etc/artica-postfix/artica-procmail.conf');
result:=ini.ReadString('path','quarantine_path','/var/quarantines/procmail');
ini.Free;
end;

//#############################################################################
procedure MyConf.set_INFOS(key:string;val:string);
var ini:TIniFile;
begin
ini:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
ini.WriteString('INFOS',key,val);
ini.Free;
end;
//#############################################################################
procedure MyConf.set_LDAP(key:string;val:string);
begin
ldap.set_LDAP(key,val);
end;
//#############################################################################
function MyConf.get_LDAP(key:string):string;
begin
result:=ldap.get_LDAP(key);
end;
//#############################################################################
function MyConf.ARTICA_FILTER_QUEUEPATH():string;
var ini:TIniFile;
begin
 ini:=TIniFile.Create('/etc/artica-postfix/artica-filter.conf');
 result:=ini.ReadString('INFOS','QueuePath','');
 if length(trim(result))=0 then result:='/var/spool/artica-filter';
end;
//##############################################################################


function MyConf.get_INFOS(key:string):string;
var SYSinfo:Tsystem;
begin
Sysinfo:=Tsystem.Create;
result:=Sysinfo.GET_INFO(key);
sysinfo.Free;
end;
//#############################################################################
function MyConf.RRDTOOL_STAT_LOAD_AVERAGE_DATABASE_PATH():string;
var value,phppath,path:string;
ini:TIniFile;
begin
ini:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=ini.ReadString('ARTICA','STAT_LOAD_PATH','');
if length(value)=0 then  begin
   if debug then writeln('STAT_LOAD_PATH is not set in ini path');
   phppath:=get_ARTICA_PHP_PATH();
   path:=phppath+'/ressources/rrd/process.rdd';
   if debug then writeln('set STAT_LOAD_PATH to '+path);
   value:=path;
   ini.WriteString('ARTICA','STAT_LOAD_PATH',path);
   if debug then writeln('done..'+path);
end;
result:=value;
ini.Free;
end;
//#############################################################################
function MyConf.ARTICA_SEND_MAX_SUBQUEUE_NUMBER:integer;
var
ini:TIniFile;
begin
ini:=TIniFile.Create('/etc/artica-postfix/artica-filter.conf');
result:=ini.ReadInteger('INFOS','MAX_QUEUE_NUMBER',5);
ini.free;
end;
//#############################################################################


//#############################################################################
function MyConf.ARTICA_SEND_SUBQUEUE_NUMBER(QueueNumber:string):integer;
var
   QueuePath:string;
   SYS:TSystem;
   NumbersIntoQueue:integer;
   D:boolean;
begin
  result:=0;
  NumbersIntoQueue:=0;
  SYS:=TSystem.Create;
  D:=COMMANDLINE_PARAMETERS('debug');
  QueuePath:=ARTICA_FILTER_QUEUEPATH() + '/queue';
  if D then writeln('ARTICA_SEND_SUBQUEUE_NUMBER: QueuePath=' + QueuePath);
     if DirectoryExists(QueuePath + '/' +QueueNumber) then begin
        SYS.DirFiles(QueuePath + '/' + QueueNumber,'*.queue');
        NumbersIntoQueue:=SYS.DirListFiles.Count;
     end;
  if D then writeln('ARTICA_SEND_SUBQUEUE_NUMBER: Number=' + IntToStr(NumbersIntoQueue) + ' Objects');
  //logs.logs('ARTICA_SEND_SUBQUEUE_NUMBER:: NumbersIntoQueue:=' + IntToStr(NumbersIntoQueue));
  SYS.Free;
  exit(NumbersIntoQueue);
end;
//#############################################################################
function MyConf.ARTICA_SEND_QUEUE_NUMBER():integer;
var
   QueuePath:string;
   SYS:TSystem;
begin
  result:=0;
  SYS:=TSystem.Create;
     QueuePath:=ARTICA_FILTER_QUEUEPATH();
     if DirectoryExists(QueuePath) then SYS.DirFiles(QueuePath , '*.eml');
     exit(SYS.DirListFiles.Count);
  SYS.Free;
end;
//#############################################################################
function MyConf.ARTICA_SQL_QUEUE_NUMBER():integer;
var
   QueuePath:string;
   SYS:TSystem;
begin
  QueuePath:=ARTICA_FILTER_QUEUEPATH();
  SYS:=TSystem.Create;
  SYS.DirFiles(QueuePath,'*.sql');
  result:=SYS.DirListFiles.Count;
  SYS.Free;
  exit;
end;
//#############################################################################
procedure MyConf.ARTICA_FILTER_CLEAN_QUEUE();
var
   QueuePath:string;
   SourceFile:string;
   DestFile:string;
   SYS:TSystem;
   i:integer;
   D:boolean;
   pid,body:string;
   mailpid:string;
   RegExpr:TRegExpr;
   Strpos:integer;
   DeleteFile:boolean;
begin
   D:=COMMANDLINE_PARAMETERS('--verbose');
   QueuePath:=ARTICA_FILTER_QUEUEPATH();
   pid:=EMAILRELAY_PID();
   SYS:=TSystem.Create;
   SYS.DirFiles(QueuePath,'*.new');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='emailrelay\.([0-9]+)\.[0-9]+\.[0-9]+\.envelope';
   for i:=0 to SYS.DirListFiles.Count-1 do begin
        SourceFile:=QueuePath + '/' + SYS.DirListFiles.Strings[i];
        if RegExpr.Exec(SourceFile) then mailpid:=RegExpr.Match[1];

        Strpos:=pos('.new',SourceFile);
        DestFile:=Copy(SourceFile,0,Strpos-1);
        if D then writeln('ARTICA_FILTER_CLEAN_QUEUE: "' + DestFile + '" saved by process number ' + mailpid + '->(' + pid+')');
        if pid<>mailpid then begin
           LOGS.logs('ARTICA_FILTER_CLEAN_QUEUE:: Flush ' + DestFile + ' in new mode');
           if D then writeln('ARTICA_FILTER_CLEAN_QUEUE:  Flush ' + DestFile + ' in new mode');
           fpsystem('/bin/mv ' + SourceFile + ' ' + DestFile);
        end;

   end;
   SYS.DirListFiles.Clear;
   SYS.DirFiles(QueuePath,'*.busy');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='emailrelay\.([0-9]+)\.[0-9]+\.[0-9]+\.envelope';
   for i:=0 to SYS.DirListFiles.Count-1 do begin
        SourceFile:=QueuePath + '/' + SYS.DirListFiles.Strings[i];
        if RegExpr.Exec(SourceFile) then mailpid:=RegExpr.Match[1];

        Strpos:=pos('.busy',SourceFile);
        DestFile:=Copy(SourceFile,0,Strpos-1);
        if D then writeln('ARTICA_FILTER_CLEAN_QUEUE: "' + DestFile + '" saved by process number ' + mailpid + '->(' + pid+')');
        if pid<>mailpid then begin
           LOGS.logs('ARTICA_FILTER_CLEAN_QUEUE:: Flush ' + DestFile + ' in busy mode');
           if D then writeln('ARTICA_FILTER_CLEAN_QUEUE:  Flush ' + DestFile + ' in busy mode');
           fpsystem('/bin/mv ' + SourceFile + ' ' + DestFile);
        end;

   end;


   RegExpr.Free;
   SYS.free;
   exit;


   SYS.DirListFiles.Clear;
   SYS.DirFiles(QueuePath,'*.content');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='emailrelay\.([0-9\.]+)\.content';
   for i:=0 to SYS.DirListFiles.Count-1 do begin
        SourceFile:=QueuePath + '/' + SYS.DirListFiles.Strings[i];
        if RegExpr.Exec(SourceFile) then begin
           body:=RegExpr.Match[1];
           DeleteFile:=true;
           if FileExists(QueuePath + '/' + 'emailrelay.' + body + '.envelope') then DeleteFile:=false;
           if FileExists(QueuePath + '/' + 'emailrelay.' + body + '.envelope.new') then DeleteFile:=false;
           if FileExists(QueuePath + '/' + 'emailrelay.' + body + '.envelope.busy') then DeleteFile:=false;
           if FileExists(QueuePath + '/' + 'emailrelay.' + body + '.envelope.bad') then DeleteFile:=false;
           if FileExists(QueuePath + '/' + 'emailrelay.' + body + '.envelope.local') then DeleteFile:=false;



        if DeleteFile then begin
           if D then writeln('ARTICA_FILTER_CLEAN_QUEUE: Delete ' + SourceFile);
           LOGS.logs('ARTICA_FILTER_CLEAN_QUEUE:: Delete old file ' + SourceFile);
           fpsystem('/bin/rm ' + SourceFile);
        end;
       end;

   end;


   RegExpr.Free;
   SYS.free;
end;
//#############################################################################
function MyConf.SYSTEM_PROCESS_EXIST(pid:string):boolean;
var
RegExpr:TRegExpr;
begin

  result:=false;
  pid:=trim(pid);
  if pid='0' then exit(false);
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='^([0-9]+)';
  if not RegExpr.Exec(pid) then exit;
  pid:=RegExpr.Match[1];
  if not fileExists('/proc/' + pid + '/exe') then begin
     exit(false)
  end else begin
      exit(true);
  end;
end;
//#############################################################################
function MyConf.PHP5_IS_MODULE_EXISTS(modulename:string):boolean;
var
   RegExpr:TRegExpr;
   Files:TStringList;
   i    :integer;
   D    :boolean;
begin
     result:=false;
     D:=COMMANDLINE_PARAMETERS('debug');
     if Not FileExists('/opt/artica/bin/php') then begin
        if D then writeln('Unable to stat /opt/artica/bin/php');
        exit;
     end;
     fpsystem('/opt/artica/bin/php -m >/opt/artica/logs/php5.modules.txt 2>&1');
     Files:=TStringList.Create;
     Files.LoadFromFile('/opt/artica/logs/php5.modules.txt');
     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='^' + modulename;
     For i:=0 to Files.Count-1 do begin

         if RegExpr.Exec(Files.Strings[i]) then begin
            result:=true;
            break;
         end else begin
            if D then writeln(Files.Strings[i] + ' -> Not Match ' + RegExpr.Expression);
         end;
     end;

RegExpr.Free;
Files.Free;

end;
//#############################################################################

function MyConf.SYSTEM_GET_PID(pidPath:string):string;
var
   RegExpr:TRegExpr;
   Files:TStringList;
   logs:Tlogs;
   D:Boolean;
begin
 D:=COMMANDLINE_PARAMETERS('debug');

result:='0';
if not FileExists(pidPath) then exit;
 RegExpr:=TRegExpr.Create;
 RegExpr.Expression:='([0-9]+)';
 logs:=Tlogs.Create;
 Files:=TStringList.Create;
 Files.LoadFromFile(pidPath);
try
   if RegExpr.Exec(Files.Strings[0]) then result:=RegExpr.Match[1];
except
   logs.Debuglogs('SYSTEM_GET_PID::Error while read ' + pidPath);
   Files.Free;
   exit;
end;
   RegExpr.Free;
Files.Free;
 if D then writeln('SYSTEM_GET_PID ->',result, ' for ' ,pidPath);
end;
//#############################################################################
function MyConf.ARTICA_FILTER_PID():string;
begin
result:=SYSTEM_GET_PID('/etc/artica-postfix/artica-filter.pid');
exit;
end;
//#############################################################################
function MyConf.ARTICA_SEND_PID(QueueNumber:String):string;
begin
result:=SYSTEM_GET_PID('/etc/artica-postfix/artica-send.' + QueueNumber + 'pid');
exit;
end;
//#############################################################################
function MyConf.ARTICA_SQL_PID():string;
begin
result:=SYSTEM_GET_PID('/etc/artica-postfix/artica-sql.pid');
exit;
end;
//############################################################################# #
function MyConf.EMAILRELAY_PID():string;
begin
result:=SYSTEM_GET_PID('/etc/artica-postfix/emailrelay.pid');
exit;
end;
//############################################################################# #
function MyConf.ARTICA_SEND_QUEUE_PATH():string;
var
   value:string;
   S_INI:TIniFile;
begin
S_INI:=TIniFile.Create('/etc/artica-postfix/artica-send.conf');
value:=S_INI.ReadString('QUEUE','QueuePath','/usr/share/artica-filter/queue');
if length(value)=0 then value:='/usr/share/artica-filter/queue';
result:=value;
S_INI.Free;
end;
//#############################################################################
function MyConf.CGI_ALL_APPLIS_INSTALLED():string;
var
   AVE_VER,KASVER,SQUID_VER,DANS_VER,PUREFTP,AMAVISDVERSION,ASVer:string;
   CROSSROADSVERSION:string;

begin
    AVE_VER:=AVESERVER_GET_VERSION();
    DANS_VER:=dansguardian.DANSGUARDIAN_VERSION();
    KASVER:=KAS_VERSION();
    SQUID_VER:=squid.SQUID_VERSION();
    PUREFTP:=Cpureftpd.PURE_FTPD_VERSION();
    CROSSROADSVERSION:=CROSSROADS_VERSION();
    AMAVISDVERSION:=AMAVISD_VERSION();
    ASVer:=spamass.SPAMASSASSIN_VERSION();
    ArrayList.Clear;
    result:='';

    ArrayList.Add('<SECURITY_MODULES>');
    ArrayList.Add('[APP_AVESERVER] "' + AVE_VER + '"');
    ArrayList.Add('[APP_KAS3] "' + KASVER + '"');
    ArrayList.Add('[APP_BOGOFILTER] "' + BOGOFILTER_VERSION() + '"');
    if length(SQUID_VER)>0  then ArrayList.Add('[APP_KAV4PROXY] "' + KAV4PROXY_VERSION() + '"');
    if length(DANS_VER)>0  then ArrayList.Add('[APP_DANSGUARDIAN] "' + DANS_VER + '"');
    if length(DANS_VER)>0  then ArrayList.Add('[APP_DANSGUARDIAN] "' + DANS_VER + '"');
    if length(AMAVISDVERSION)>0  then ArrayList.Add('[APP_AMAVIS] "' + AMAVISDVERSION + '"');
    if length(ASVer)>0  then ArrayList.Add('[APP_SPAMASSASSIN] "' + ASVer + '"');
    ArrayList.Add('[APP_KAV4SAMBA] "' + kav4samba.VERSION()+ '"');
    ArrayList.Add('</SECURITY_MODULES>');

    ArrayList.Add('<CORE_MODULES>');
    ArrayList.Add('[APP_POSTFIX] "' + postfix.POSTFIX_VERSION() + '"');
    if length(SQUID_VER)>0 then ArrayList.Add('[APP_SQUID] "'+ SQUID_VER + '"');
    if length(PUREFTP)>0 then ArrayList.Add('[APP_PUREFTPD] "'+ PUREFTP + '"');
    if length(CROSSROADS_VERSION)>0 then ArrayList.Add('[APP_CROSSROADS] "'+ CROSSROADSVERSION + '"');


    ArrayList.Add('[APP_LDAP] "' + ldap.LDAP_VERSION() + '"');
    ArrayList.Add('[APP_RENATTACH] "' + RENATTACH_VERSION() + '"');
    ArrayList.Add('[APP_GEOIP] "' + GEOIP_VERSION() + '"');
    ArrayList.Add('[APP_DNSMASQ] "' + DNSMASQ_VERSION() + '"');
    ArrayList.Add('[APP_INADYN] "' + INYADIN_VERSION() + '"');
    ArrayList.Add('[APP_SAMBA] "' +    samba.SAMBA_VERSION()+ '"');
    ArrayList.Add('</CORE_MODULES>');

    ArrayList.Add('<STAT_MODULES>');
    ArrayList.Add('[APP_RRDTOOL] "' + RRDTOOL_VERSION() + '"');
    ArrayList.Add('[APP_AWSTATS] "' + AWSTATS_VERSION() + '"');
    ArrayList.Add('[APP_MAILGRAPH] "' + mailgraph.MAILGRAPH_VERSION() + '"');
    ArrayList.Add('</STAT_MODULES>');

    ArrayList.Add('<MAIL_MODULES>');
    ArrayList.Add('[APP_CYRUS] "' +    CCYRUS.CYRUS_VERSION()+ '"');
    ArrayList.Add('[APP_FETCHMAIL] "' +FETCHMAIL_VERSION() + '"');
    ArrayList.Add('[APP_GETLIVE] "' +  GETLIVE_VERSION() + '"');
    ArrayList.Add('[APP_HOTWAYD] "' +  HOTWAYD_VERSION() + '"');
    ArrayList.Add('[APP_PROCMAIL] "' + PROCMAIL_VERSION() + '"');
    ArrayList.Add('[APP_ROUNDCUBE] "' +roundcube.VERSION() + '"');
    ArrayList.Add('[APP_MAILMAN] "' +  MAILMAN_VERSION() + '"');
    ArrayList.Add('</MAIL_MODULES>');

    ArrayList.Add('<SAMBA_MODULES>');
    ArrayList.Add('</SAMBA_MODULES>');

    ArrayList.Add('<LIB_MODULES>');
    ArrayList.Add('[APP_LIBGSL] "' + LIB_GSL_VERSION() + '"');
    ArrayList.Add('[APP_OPENSSL] "' + OPENSSL_VERSION() + '"');
    ArrayList.Add('[APP_PERL] "' + PERL_VERSION() + '"');
    ArrayList.Add('[APP_MYSQL] "' + MYSQL_VERSION() + '"');


    ArrayList.Add('</LIB_MODULES>');

 end;
 //#############################################################################
function myconf.KAV4PROXY_VERSION():string;
var
   RegExpr:TRegExpr;
begin
   if not FileExists('/opt/kaspersky/kav4proxy/sbin/kav4proxy-kavicapserver') then exit;
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='Server version ([0-9\.]+)';
   if RegExpr.Exec(ExecPipe('/opt/kaspersky/kav4proxy/sbin/kav4proxy-kavicapserver -v')) then begin
      result:=RegExpr.Match[1];
   end;

   RegExpr.Free;

end;
//#############################################################################
function MyConf.MHONARC_VERSION():string;
var
   RegExpr            :TRegExpr;
   tempstr            :string;
   f                  :TstringList;
   i                  :integer;
begin
   forceDirectories('/opt/artica/tmp');
   fpsystem('/usr/bin/mhonarc -v >/opt/artica/tmp/mhonarc.version 2>&1');
   f:=TstringList.Create;
   f.LoadFromFile('/opt/artica/tmp/mhonarc.version');
   RegExpr:=tRegExpr.Create;
   RegExpr.Expression:='MHonArc\s+v([0-9\.]+)';
   for i:=0 to f.Count-1 do begin
       if RegExpr.Exec(f.Strings[i]) then begin
          result:=RegExpr.Match[1];
          break;
       end;
   end;
   
RegExpr.free;
f.free;
end;
//#############################################################################
   


function MyConf.GETLIVE_VERSION():string;
var
   RegExpr            :TRegExpr;
   tempstr            :string;
   f                  :TstringList;
   i                  :integer;
begin
   result:='';
   tempstr:=get_ARTICA_PHP_PATH() + '/bin/GetLive.pl';
   if not FileExists(tempstr) then exit;
   f:=TstringList.Create;
   f.LoadFromFile(tempstr);
   RegExpr:=tRegExpr.Create;
   RegExpr.Expression:='my \$Revision\s+=.+?([0-9\.]+)';
   For i:=0 to f.Count -1 do begin
       if RegExpr.Exec(f.Strings[i]) then begin
           result:=RegExpr.Match[1];
           break;
       end;

   end;
 // my $Revision

   f.free;
   RegExpr.Free;

end;
 //#############################################################################
 function MyConf.BOGOFILTER_VERSION():string;
var
   RegExpr:TRegExpr;
   path:string;
begin
 path:=BOGOFILTER_BIN_PATH();
 LOGS.LOgs('BOGOFILTER_VERSION:: path:='+path);
 if length(path)=0 then exit;


   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='bogofilter version ([0-9\.]+)';
   if RegExpr.Exec(ExecPipe(path+' -V')) then begin
      result:=RegExpr.Match[1];
   end;

   RegExpr.Free;

end;
//#############################################################################
 function MyConf.BOGOFILTER_BIN_PATH():string;
begin
 if FileExists('/usr/bin/bogofilter') then exit('/usr/bin/bogofilter');
 if FileExists('/usr/local/bin/bogofilter') then exit('/usr/local/bin/bogofilter');
end;
//#############################################################################
function MyConf.GEOIP_VERSION():string;
var
   RegExpr:TRegExpr;
   database_path,tempstr:string;
   GeoIP:TGeoIP;
begin
 database_path:='/usr/local/share/GeoIP';
   ForceDirectories(database_path);
   RegExpr:=TRegExpr.Create;
   if FileExists(database_path + '/GeoIP.dat') then begin
      GeoIP := TGeoIP.Create(database_path + '/GeoIP.dat');
      tempstr:=GeoIP.GetDatabaseInfo;
      RegExpr.expression:='\s+([0-9]+)\s+';
      try
         if RegExpr.Exec(tempstr) then result:=RegExpr.Match[1];
      finally
      GeoIP.Free;
      RegExpr.free;
      end;
   end;

end;
//#############################################################################
function MyConf.EMAILRELAY_VERSION():string;
var
   RegExpr:TRegExpr;
   TMP:string;
begin
   if not FileExists('/usr/local/sbin/emailrelay') then exit('0.0.0');
   TMP:=ExecPipe('/usr/local/sbin/emailrelay -V');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='E-MailRelay V([0-9\.]+)';
   if RegExpr.Exec(TMP) then result:=RegExpr.Match[1];
   RegExpr.free;

end;
//#############################################################################
function MyConf.RENATTACH_VERSION():string;
var
   RegExpr:TRegExpr;
   TMP:string;
begin
   if not FileExists(get_ARTICA_PHP_PATH() + '/bin/renattach') then exit('0.0.0');
   TMP:=ExecPipe(get_ARTICA_PHP_PATH() + '/bin/renattach -V');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='renattach\s+([0-9\.]+)';
   if RegExpr.Exec(TMP) then result:=RegExpr.Match[1];
   RegExpr.free;

end;
//#############################################################################


function MyConf.GetAllApplisInstalled():string;
begin
 result:='';
 CGI_ALL_APPLIS_INSTALLED();
 writeln(ArrayList.Text);
 end;
//#############################################################################
function MyConf.ROUNDCUBE_VERSION():string;
var
   filepath:string;
   RegExpr:TRegExpr;
   List:TstringList;
   i:integer;
   D:boolean;
begin
     result:='';
     D:=COMMANDLINE_PARAMETERS('debug');

     if not DirectoryExists('/usr/share/roundcubemail') then begin
        if D then showScreen('ROUNDCUBE_VERSION:: /usr/share/roundcube doesn''t exists...');
        exit();
     end else begin
         if D then showScreen('ROUNDCUBE_VERSION:: /usr/share/roundcube is detected as a directory');
     end;


      filepath:='/usr/share/roundcubemail/index.php';


     if not fileExists(filepath) then begin
        if D then showScreen('ROUNDCUBE_VERSION:: unable to locate ' + filepath);
        exit('');
     end;


     List:=TstringList.Create;
     List.LoadFromFile(filepath);
     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='define\(''RCMAIL_VERSION[\s,'']+([0-9\-\.a-z]+)';
     for i:=0 to List.Count-1 do begin
          if RegExpr.Exec(list.Strings[i]) then begin
             result:=RegExpr.Match[1];
             break;
          end;

     end;

          list.Free;
          RegExpr.free;
end;
//#############################################################################


function MyConf.FETCHMAIL_DAEMON_POOL():string;
var value:string;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=GLOBAL_INI.ReadString('ARTICA','fetchmail_daemon_pool','600');
result:=value;
GLOBAL_INI.Free;
end;
//#############################################################################
function MyConf.PHP5_INI_PATH():string;
begin
if fileExists('/etc/php5/apache2/php.ini') then exit('/etc/php5/apache2/php.ini');
if fileExists('/etc/php.ini') then exit('/etc/php.ini');
end;
//#############################################################################
function MyConf.PHP5_INI_SET_EXTENSION(librari:string):string;
var
   php_path:string;
   RegExpr:TRegExpr;
   D:Boolean;
   F:TstringList;
   I:integer;
begin
   result:='';
   D:=COMMANDLINE_PARAMETERS('debug');
   php_path:=PHP5_INI_PATH();
   if not FileExists(php_path) then begin
       if D then writeln('Unable to stat ' + php_path);
       exit;
   end;
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='^extension=' + librari;
    F:=TstringList.Create;
    F.LoadFromFile(php_path);
    for i:=0 to F.Count -1 do begin
       if RegExpr.Exec(f.Strings[i]) then begin
          if D then writeln('Already updated.. : ' + php_path);
           f.Free;
           RegExpr.Free;
           exit;
       end;
    end;
   f.Add('extension=' + librari);
   f.SaveToFile(php_path);
   f.free;
   RegExpr.free;

end;
//#############################################################################


function MyConf.FETCHMAIL_DAEMON_POSTMASTER():string;
var value:string;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=GLOBAL_INI.ReadString('ARTICA','fetchmail_daemon_postmaster','root');
result:=value;
GLOBAL_INI.Free;
end;
//#############################################################################
function MyConf.FETCHMAIL_BIN_PATH():string;
begin
    if FileExists('/opt/artica/bin/fetchmail') then exit('/opt/artica/bin/fetchmail');
    if FileExists('/usr/local/bin/fetchmail') then exit('/usr/local/bin/fetchmail');
    if FileExists('/usr/bin/fetchmail') then exit('/usr/bin/fetchmail');
    if FileExists('/usr/local/bin/fetchmail') then exit('/usr/local/bin/fetchmail');

end;
//#############################################################################
procedure MyConf.FETCHMAIL_APPLY_CONF(conf_datas:string);
var value:TstringList;
begin
   if length(conf_datas)=0 then exit;
   if not fileexists(FETCHMAIL_BIN_PATH) then exit;
   value:=TstringList.Create;
   value.Add(conf_datas);
   value.SaveToFile('/etc/fetchmailrc');
   value.free;
   fpsystem('/bin/chown root:root /etc/fetchmailrc');
   fpsystem('/bin/chmod 0710 /etc/fetchmailrc');
   FETCHMAIL_DAEMON_STOP();
   FETCHMAIL_START_DAEMON();
   FETCHMAIL_APPLY_GETLIVE_CONF();

end;
//#############################################################################
function MyConf.INADYN_PERFORM(IniData:String;UpdatePeriod:integer):string;
var
   Ini      :TiniFile;
   l        :TStringList;
   aliasList:TStringDynArray;
   list     :string;
   cmd      :string;
   proxy    :string;
   i        :integer;
   D:boolean;
begin
    result:='';
    D:=COMMANDLINE_PARAMETERS('debug');
    if length(IniData)=0 then exit;
    l:=TStringList.Create;
    l.Add(IniData);
    l.SaveToFile('/opt/artica/logs/inadyn.rule.cf');
    ini:=TiniFile.Create('/opt/artica/logs/inadyn.rule.cf');
    cmd:='';
    cmd:=cmd + 'inadyn --username ' +  ini.ReadString('inadyn','username','');
    cmd:=cmd + ' --password ' +  ini.ReadString('inadyn','password','');
    cmd:=cmd + ' --dyndns_system ' +  ini.ReadString('inadyn','dyndns_system','');
    list:=ini.ReadString('inadyn','alias','');
    if length(list)>0 then begin
       aliasList:=Explode(',',list);
       for i:=0 to length(aliasList)-1 do begin
              cmd:=cmd + ' --alias ' + aliasList[i];
       end;
    end;
    UpdatePeriod:=UpdatePeriod*60;
    if ini.ReadString('PROXY','enabled','')='yes' then begin
       proxy:= ' --proxy_server ' + ini.ReadString('PROXY','servername','') + ':' + ini.ReadString('PROXY','serverport','');
    end;



    if ExtractFileName(ParamStr(0))<>'process1' then begin
       logs.Debuglogs('Starting......: inadyn daemon...' + ini.ReadString('inadyn','dyndns_system','') + ' ' + ini.ReadString('inadyn','username',''));
    end;

    if D then writeln(get_ARTICA_PHP_PATH() + '/bin/' + cmd + ' --log_file /opt/artica/logs/inadyn.log --update_period_sec ' + IntToStr(UpdatePeriod) + proxy + ' --background');
    fpsystem(get_ARTICA_PHP_PATH() + '/bin/' + cmd + ' --log_file /opt/artica/logs/inadyn.log --update_period_sec ' + IntToStr(UpdatePeriod) + proxy + ' --background');

end;
//#############################################################################
procedure MyConf.INADYN_PERFORM_STOP();
var
pids      :string;
begin
    pids:=trim(INADYN_PID());
    if length(pids)>0 then begin
         writeln('Stopping inadyn..........: ' + pids + ' PID');
         fpsystem('/bin/kill ' + pids);
    end;

end;



//#############################################################################
procedure MyConf.FETCHMAIL_APPLY_GETLIVE_CONF();
var
   RegExpr       :TRegExpr;
   TmpFile       :TstringList;
   i             :integer;
   DaemonPool    :integer;
   Hour          :integer;
   list          :string;
   D             :Boolean;
begin
D:=COMMANDLINE_PARAMETERS('debug');
    if not FileExists('/etc/fetchmailrc') then begin
       if FileExists('/etc/cron.d/GetLive') then DeleteFile('/etc/cron.d/GetLive');
       exit;
    end;
    DaemonPool:=0;
    TmpFile:=TstringList.Create;
    TmpFile.LoadFromFile('/etc/fetchmailrc');
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='set daemon\s+([0-9]+)';
    for i:=0 to TmpFile.Count -1 do begin
        if RegExpr.Exec(TmpFile.Strings[i]) then begin
           DaemonPool:=StrToInt(RegExpr.Match[1]);
           break;
        end;

    end;
    TmpFile.Clear;
    list:='';
    Hour:=0;
    if DaemonPool=0 then exit;
    DaemonPool:=DaemonPool div 60;
    if DaemonPool>60 then DaemonPool:=60;
    writeln('pool=' + IntToStr(DaemonPool));
    for i:=1 to 60 do begin
      Hour:=Hour+DaemonPool;
      if(Hour>60) then break;
      list:=list + IntToStr(Hour) + ',';
    end;
    writeln('copy='+Copy(list,length(list),1));
    if Copy(list,length(list),1)=',' then list:=Copy(list,0,length(list)-1);



   list:=list+' * * * * root ' + get_ARTICA_PHP_PATH() + '/bin/artica-ldap -getlive >>/var/log/fetchmail.log 2>&1';
   if D then  writeln('FETCHMAIL_APPLY_GETLIVE_CONF:: cron=' + list);
   TmpFile.Add(list);
   TmpFile.SaveToFile('/etc/cron.d/GetLive');
   if D then  writeln('FETCHMAIL_APPLY_GETLIVE_CONF:: /etc/cron.d/GetLive -> saved');

end;
//#############################################################################

procedure MyConf.FETCHMAIL_APPLY_GETLIVE(conf_datas:string);
var
   value         :TstringList;
   RegExpr       :TRegExpr;
   RegExpr2      :TRegExpr;
   i             :integer;
   Config        :TstringList;
   GetLiveCf     :TstringList;
   RemoteMail    :string;
   user          :string;
   domain        :string;
   Password      :string;
   SendMailuser  :string;
   CommandLine   :string;

begin
   if length(conf_datas)=0 then exit;


   ForceDirectories('/opt/artica/var/getlive/cache');
   value:=TstringList.Create;
   value.Add(conf_datas);
   value.SaveToFile('/opt/artica/logs/getlive');
   value.LoadFromFile('/opt/artica/logs/getlive');
   Config:=TstringList.Create;
   RegExpr:=TRegExpr.Create;
   RegExpr2:=TRegExpr.Create;
   RegExpr.Expression:='poll (.+)';
   for i:=0 to value.Count -1 do begin
       if RegExpr.Exec(value.Strings[i]) then Config.Add('hotmail');
       RegExpr2.Expression:='user\s+"(.+?)\"';
       if RegExpr2.Exec(value.Strings[i]) then Config.Strings[Config.Count-1]:=Config.Strings[Config.Count-1] + ';user="' +RegExpr2.Match[1] + '"';
       RegExpr2.Expression:='pass\s+"(.+?)\"';
       if RegExpr2.Exec(value.Strings[i]) then Config.Strings[Config.Count-1]:=Config.Strings[Config.Count-1] + ';pass="' +RegExpr2.Match[1]+ '"';
       RegExpr2.Expression:='is\s+"(.+?)\"';
       if RegExpr2.Exec(value.Strings[i]) then Config.Strings[Config.Count-1]:=Config.Strings[Config.Count-1] + ';targeted="' +RegExpr2.Match[1]+ '"';
   end;



   GetLiveCf:=TstringList.Create;
   for i:=0 to Config.Count -1 do begin
       RegExpr.Expression:='user="(.+?)"';
       if RegExpr.Exec(Config.Strings[i]) then begin
              RemoteMail:=RegExpr.Match[1];
              RegExpr.Expression:='(.+?)@(.+)';
              if RegExpr.Exec(RemoteMail) then begin
                  user:=RegExpr.Match[1];
                  domain:=RegExpr.Match[2];
              end;

        RegExpr.Expression:='pass="(.+?)"';
        if RegExpr.Exec(Config.Strings[i]) then Password:=RegExpr.Match[1];

        RegExpr.Expression:='targeted="(.+?)"';
        if RegExpr.Exec(Config.Strings[i]) then SendMailuser:=RegExpr.Match[1];
        GetLiveCf.Add('UserName=' + user);
        GetLiveCf.Add('Password=' + Password);
        GetLiveCf.Add('Domain=' + domain);
        GetLiveCf.Add('Downloaded=/opt/artica/var/getlive/cache/' + RemoteMail);
        GetLiveCf.Add('CurlBin=/opt/artica/bin/curl -k');
        GetLiveCf.Add('Processor=/usr/sbin/sendmail -i ' + SendMailuser);
        GetLiveCf.SaveToFile('/opt/artica/logs/getlive.' + user + '-'+ domain+'.cf');
        CommandLine:=get_ARTICA_PHP_PATH() + '/bin/GetLive.pl --config-file /opt/artica/logs/getlive.'  + user + '-'+ domain + '.cf';
        writeln(CommandLine);
        fpsystem(CommandLine);
        GetLiveCf.Clear;



       end;


   end;


   //Processor = /usr/sbin/sendmail -i <yourusername>

//   writeln(Config.text);


end;
//#############################################################################



function MyConf.FETCHMAIL_DAEMON_STOP():string;
begin
    result:='';
    if not FileExists(FETCHMAIL_BIN_PATH()) then begin
    writeln('Stopping fetchmail...........: Already stopped');
    exit;
    end;

    if SYSTEM_PROCESS_EXIST(FETCHMAIL_PID()) then begin
       writeln('Stopping fetchmail...........: ' + FETCHMAIL_PID() + ' PID..');
       fpsystem(FETCHMAIL_BIN_PATH() + ' -q');
    end;
end;
//#############################################################################
function MyConf.PROCMAIL_INSTALLED():boolean;
var
    procmail_bin:string;
    mem:TStringList;
     RegExpr:TRegExpr;
     i:integer;
     xzedebug:boolean;
begin

     if not FileExists(postfix.POSFTIX_MASTER_CF_PATH()) then begin
        exit;
     end;

     xzedebug:=false;
     if ParamStr(2)='status' then xzedebug:=true;

     if xzedebug then writeln('Version............:',PROCMAIL_VERSION());

     procmail_bin:=LINUX_APPLICATION_INFOS('procmail_bin');
     if length(procmail_bin)=0 then procmail_bin:='/usr/bin/procmail';
     if not FileExists(procmail_bin) then begin
        if xzedebug then writeln('Path...............:','unable to locate');
        exit(false);
      end;

     if xzedebug then writeln('Path...............:',procmail_bin);
     if xzedebug then writeln('logs Path..........:',PROCMAIL_LOGS_PATH());
     if xzedebug then writeln('user...............:',PROCMAIL_USER());
     if xzedebug then writeln('quarantine path....: ',PROCMAIL_QUARANTINE_PATH());
     if xzedebug then writeln('quarantine size....: ',PROCMAIL_QUARANTINE_SIZE(''));
     if xzedebug then writeln('cyrdeliver path....: ',CYRUS_DELIVER_BIN_PATH());

     mem:=TStringList.Create;
     mem.LoadFromFile(postfix.POSFTIX_MASTER_CF_PATH());
     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='procmail\s+unix.*pipe';
     for i:=0 to mem.Count-1 do begin
         if RegExpr.Exec(mem.Strings[i]) then begin
             mem.Free;
             RegExpr.free;
             if xzedebug then writeln('master.cf..........:','yes');
             exit(true);
         end;
     end;
     exit(false);

end;

 //#############################################################################
function MyConf.PROCMAIL_READ_QUARANTINE(fromFileNumber:integer;tofilenumber:integer;username:string):TstringList;
Var Info  : TSearchRec;
    Count : Longint;
    path  :string;
    Line:TstringList;
    return_line:string;

Begin
  Count:=0;
  Line:=TstringList.Create;
  if tofilenumber=0 then tofilenumber:=100;
if length(username)=0 then  exit(line);
     if length(username)>0  then path:=PROCMAIL_QUARANTINE_PATH() + '/' + username + '/new';

  If FindFirst (path+'/*',faAnyFile and faDirectory,Info)=0 then
    begin
    Repeat
      if Info.Name<>'..' then begin
         if Info.Name <>'.' then begin
              Inc(Count);
              if Count>=fromFileNumber then begin
                 return_line:='<file>'+Info.name+'</file>' +  PROCMAIL_READ_QUARANTINE_FILE(path + '/' + info.name);
                 Line.Add(return_line);
                 if ParamStr(1)='-quarantine' then writeln(return_line);
              end;
              if count>=tofilenumber then break;
              //Writeln (Info.Name:40,Info.Size:15);
         end;
      end;

    Until FindNext(info)<>0;
    end;
  FindClose(Info);
  exit(line);
end;
//#############################################################################
function MyConf.PROCMAIL_READ_QUARANTINE_FILE(file_to_read:string):string;
var

    mem:TStringList;
    from,subj,tim:string;
     RegExpr,RegExpr2,RegExpr3:TRegExpr;
     i:integer;
begin
    mem:=TStringList.Create;
    mem.LoadFromFile(file_to_read);
    RegExpr:=TRegExpr.Create;
    RegExpr2:=TRegExpr.Create;
    RegExpr3:=TRegExpr.Create;
    RegExpr.Expression:='^From:\s+(.+)';
    RegExpr2.expression:='Subject:\s+(.+)';
    RegExpr3.expression:='Date:\s+(.+)';
    for i:=0 to mem.Count -1 do begin
        if RegExpr.Exec(mem.Strings[i]) then from:=RegExpr.Match[1];
        if RegExpr2.Exec(mem.Strings[i]) then subj:=RegExpr2.Match[1];
        if RegExpr3.Exec(mem.Strings[i]) then tim:=RegExpr3.Match[1];
        if length(from)+length(subj)+length(tim)>length(from)+length(subj) then break;

    end;

    RegExpr.free;
    RegExpr2.free;
    mem.free;
    result:='<from>' + from + '</from><time>' + tim + '</time><subject>' + subj + '</subject>';

end;





//#############################################################################
function MyConf.PROCMAIL_QUARANTINE_SIZE(username:string):string;
var
    RegExpr:TRegExpr;
    path:string;
begin
     if not fileexists('/usr/bin/du') then begin
        writeln('warning, unable to locate /usr/bin/du tool');
        exit;
     end;
     if length(username)=0 then  path:=PROCMAIL_QUARANTINE_PATH();
     if length(username)>0  then path:=PROCMAIL_QUARANTINE_PATH() + '/' + username;

     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='([0-9]+)';
     if RegExpr.Exec(trim(ExecPipe('/usr/bin/du -s ' + path))) then begin
     result:=RegExpr.Match[1];
     RegExpr.free;
     exit();
     end;
end;

//#############################################################################
function MyConf.PROCMAIL_QUARANTINE_USER_FILE_NUMBER(username:string):string;
var
   sys:Tsystem;
   count:integer;
   path:string;
begin
     sys:=Tsystem.Create;
     if length(username)=0 then  exit('0');
     if length(username)>0  then path:=PROCMAIL_QUARANTINE_PATH() + '/' + username + '/new';
     count:=sys.DirectoryCountFiles(path);
     sys.free;
     exit(intTostr(count));

end;
//#############################################################################
function MyConf.PROCMAIL_LOGS_PATH():string;
var
    mem:TStringList;
    RegExpr:TRegExpr;
    i:integer;
begin

     if not fileExists('/etc/procmailrc') then exit;
     mem:=TStringList.Create;
      mem.LoadFromFile('/etc/procmailrc');
     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='LOGFILE=("|\s|)([a-z\.\/]+)';

     for i:=0 to mem.Count-1 do begin

         if RegExpr.Exec(mem.Strings[i]) then begin
            result:=regExpr.Match[2];
            break;
         end;

     end;

     regExpr.Free;
     mem.Free;
end;
//#############################################################################
function MyConf.PROCMAIL_USER():string;
var
    mem:TStringList;
     RegExpr:TRegExpr;
     i:integer;

begin
   if not FileExists(postfix.POSFTIX_MASTER_CF_PATH()) then exit;
   mem:=TStringList.Create;
   mem.LoadFromFile(postfix.POSFTIX_MASTER_CF_PATH());
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='flags=([A-Za-z]+)\s+user=([a-zA-Z]+)\s+argv=.+procmail.+';
   for i:=0 to mem.Count-1 do begin
       if RegExpr.Exec(mem.Strings[i]) then begin
          result:=RegExpr.Match[2];
          break;
       end;

     end;
     mem.Free;
     RegExpr.Free;

end;
//#############################################################################
function Myconf.PROCMAIL_VERSION():string;
var
    procmail_bin:string;
    mem:TStringList;
    commandline:string;
     RegExpr:TRegExpr;
     i:integer;
     D:boolean;
begin
 D:=COMMANDLINE_PARAMETERS('debug');
   if D then ShowScreen('PROCMAIL_VERSION:: is there procmail here ???');
    D:=COMMANDLINE_PARAMETERS('debug');
     procmail_bin:=LINUX_APPLICATION_INFOS('procmail_bin');
     if length(procmail_bin)=0 then procmail_bin:='/usr/bin/procmail';
     if not FileExists(procmail_bin) then exit;


     mem:=TStringList.Create;
     commandline:='/bin/cat -v ' +procmail_bin ;

     mem.LoadFromStream(ExecStream(commandline,false));
     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='v([0-9\.]+)\s+[0-9]{1,4}';

     for i:=0 to mem.Count-1 do begin
       if RegExpr.Exec(mem.Strings[i]) then begin
          result:=RegExpr.Match[1];
          break;
       end;

     end;
     mem.Free;
     RegExpr.Free;
end;
//#############################################################################
function MyConf.DNSMASQ_VERSION:string;
var
   binPath:string;
    mem:TStringList;
    commandline:string;
    RegExpr:TRegExpr;
    i:integer;
    D:boolean;
begin
    D:=COMMANDLINE_PARAMETERS('debug');
    binPath:=DNSMASQ_BIN_PATH;

    if not FileExists(binpath) then begin
       if D then ShowScreen('DNSMASQ_VERSION:: unable to stat '+binpath);
       exit;
    end;

    commandline:='/bin/cat -v ' +binPath;
    mem:=TStringList.Create;
    mem.LoadFromStream(ExecStream(commandline,false));


    if D then ShowScreen('DNSMASQ_VERSION:: receive ' + IntToStr(mem.Count) + ' lines');

    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='dnsmasq-([0-9\.]+)';

     for i:=0 to mem.Count-1 do begin
//     ShowScreen(mem.Strings[i]);
       if RegExpr.Exec(mem.Strings[i]) then begin
          if D then ShowScreen('DNSMASQ_VERSION:: dnsmasq-([0-9\.]+) => ' + RegExpr.Match[1]);
          result:=RegExpr.Match[1];
          break;
       end;

     end;
     mem.Free;
     RegExpr.Free;

end;
//#############################################################################



function Myconf.FETCHMAIL_VERSION():string;
var
    path:string;
    RegExpr:TRegExpr;
    FileData:TStringList;
    i:integer;
    D:Boolean;
begin
      D:=COMMANDLINE_PARAMETERS('debug');

      if D then ShowScreen('FETCHMAIL_VERSION:: is there fetchmail here ???');
     path:=FETCHMAIL_BIN_PATH();
     if not FileExists(path) then exit;
     if D then ShowScreen('FETCHMAIL_VERSION:: /bin/cat -v ' + path + '|grep ''This is fetchmail'' >/opt/artica/logs/ftech_ver');
     fpsystem('/bin/cat -v ' + path + '|grep ''This is fetchmail'' >/opt/artica/logs/ftech_ver');


     FileData:=TStringList.Create;
     RegExpr:=TRegExpr.Create;
     FileData.LoadFromFile('/opt/artica/logs/ftech_ver');
     RegExpr.Expression:='([0-9\.]+)';
     for i:=0 to FileData.Count -1 do begin
          if RegExpr.Exec(FileData.Strings[i]) then  begin
            result:=RegExpr.Match[1];
            FileData.Free;
            RegExpr.Free;
            exit;
          end;
     end;
end;
//#############################################################################
function myconf.RRDTOOL_BIN_PATH():string;
var
   msys:Tsystem;
begin
  msys:=Tsystem.Create;
  result:=msys.RRDTOOL_BIN_PATH();
end;
//#############################################################################
function Myconf.RRDTOOL_VERSION():string;
var
    path:string;
    RegExpr:TRegExpr;
    FileData:TStringList;
    D:boolean;
begin
     D:=COMMANDLINE_PARAMETERS('debug');
     path:=RRDTOOL_BIN_PATH();
     if not FileExists(path) then begin
        if D then ShowScreen('RRDTOOL_VERSION:: Unable to stat ' + path);
        exit;
     end;
     FileData:=TStringList.Create;
     FileData.LoadFromStream(ExecStream(path,false));
     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='([0-9\.]+)';
     if RegExpr.Exec(FileData.Strings[0]) then result:=RegExpr.Match[1];
      RegExpr.Free;
      FileData.Free;
end;
//#############################################################################
function Myconf.SYSTEM_GMT_SECONDS():string;
var value:string;
ini:TIniFile;
begin
ini:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=ini.ReadString('ARTICA','GMT_TIME','');
if length(value)=0 then begin
   value:=trim(ExecPipe('/bin/date +%:::z'));
   ini.WriteString('ARTICA','GMT_TIME',value);
end;
result:=value;
ini.Free;
end;
//#############################################################################
function Myconf.SYSTEM_GET_SYS_DATE():string;
var
   value:string;
begin
   value:=trim(ExecPipe('/bin/date +"%Y-%m-%d;%H:%M:%S"'));
   result:=value;
end;
//#############################################################################
function Myconf.SYSTEM_GET_HARD_DATE():string;
var
   value:string;
begin
   value:=trim(ExecPipe('/sbin/hwclock --show'));
   result:=value;
end;
//#############################################################################


//#############################################################################
function Myconf.RRDTOOL_TIMESTAMP(longdate:string):string;
Begin
result:=RRDTOOL_SecondsBetween(longdate);
End ;
//#############################################################################

function Myconf.RRDTOOL_SecondsBetween(longdate:string):string;
var ANow,AThen : TDateTime;
 gmt,commut:string;
 RegExpr:TRegExpr;
 second,seconds:integer;
 parsed:boolean;

begin
     gmt:=SYSTEM_GMT_SECONDS();
     parsed:=False;
     //([0-9]+)[\/\-]([0-9]+)[\/\-]([0-9]+) ([0-9]+)\:([0-9]+)\:([0-9]+)
     if notdebug2=false then if debug then writeln('gmt:',gmt);
     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='(\+|\-)([0-9]+)';
     RegExpr.Exec(gmt);
     second:=StrToInt(RegExpr.Match[2]);
     seconds:=(second*60)*60;
     if notdebug2=false then begin
        if debug then writeln('GMT seconds:',seconds);
        if debug then writeln('GMT (+-) :('+ RegExpr.Match[1]+ ')');
        if debug then writeln('LONG DATE:('+ longdate+ ')');
     end;
     commut:=RegExpr.Match[1];

    if length(longdate)=0 then ANow:=now;



    if length(longdate)>0 then begin
        RegExpr.Expression:='([0-9]+)[\/\-]([0-9]+)[\/\-]([0-9]+)\s+([0-9]+)\:([0-9]+)\:([0-9]+)';
        if RegExpr.exec(longdate) then begin
           if notdebug2=false then if debug then writeln('parse (1): Year (' + RegExpr.Match[1] + ') month(' + RegExpr.Match[2] + ') day(' + RegExpr.Match[3] + ') time: ' +RegExpr.Match[4] + '-' + RegExpr.Match[5] + '-' + RegExpr.Match[6]);
           ANow:=EncodeDateTime(StrToInt(RegExpr.Match[1]), StrToInt(RegExpr.Match[2]), StrToInt(RegExpr.Match[3]), StrToInt(RegExpr.Match[4]), StrToInt(RegExpr.Match[5]), StrToInt(RegExpr.Match[6]), 0);
           parsed:=true;
        end;

        if parsed=false then begin
           RegExpr.Expression:='([0-9]+)[\/\-]([0-9]+)[\/\-]([0-9]+)';
               if RegExpr.exec(longdate) then begin
                  if notdebug2=false then if debug then writeln('parse (2): ' + RegExpr.Match[1] + '-' + RegExpr.Match[2] + '-' + RegExpr.Match[3]);
                  ANow:=EncodeDateTime(StrToInt(RegExpr.Match[1]), StrToInt(RegExpr.Match[2]), StrToInt(RegExpr.Match[3]), 0, 0, 0, 0);
                  parsed:=true;
               end;
       end;
        if parsed=false then begin
           writeln('ERROR : unable to determine date : ' + longdate + ' must be yyyy/mm/dd hh:ii:ss');
           exit;
        end;
      end;


      AThen:=EncodeDateTime(1970, 1, 1, 0, 0, 0, 0);
      if commut='-' then begin
         if notdebug2=false then if debug then writeln('(-)' + DateTostr(Anow) + ' <> ' + DateTostr(AThen) );
         result:=IntTostr(SecondsBetween(ANow,AThen)+seconds);
      end;

      if commut='+' then begin
         if notdebug2=false then if debug then writeln('(+)' + DateTostr(Anow) + ' <> s' + DateTostr(AThen) );
         result:=IntTostr(SecondsBetween(ANow,AThen)-seconds);
      end;
      if notdebug2=false then if debug then writeln('result:',result);

end;
//#############################################################################

function myconf.ARTICA_FILTER_GET_ALL_PIDS():string;
var
   ps:TStringList;
   articafilter_path,commandline:string;
   i:integer;
   RegExpr:TRegExpr;
   D:boolean;
begin
   result:='';
   ps:=TStringList.CReate;
   D:=COMMANDLINE_PARAMETERS('debug');
articafilter_path:=get_ARTICA_PHP_PATH() + '/bin/artica-filter';
commandline:='/bin/ps -aux';
if D then writeln('ARTICA_FILTER_GET_ALL_PIDS::' +commandline);
   ps.LoadFromStream(ExecStream(commandline,false));
   if ps.Count>0 then begin
       RegExpr:=TRegExpr.Create;
       RegExpr.Expression:='([a-z0-9A-Z]+)\s+([0-9]+).+?'+articafilter_path;
       for i:=0 to ps.count-1 do begin
             //if D then writeln('ARTICA_FILTER_GET_ALL_PIDS::' +ps.Strings[i]);
             if RegExpr.Exec(ps.Strings[i]) then result:=result + RegExpr.Match[2] + ' ';

       end;
       RegExpr.FRee;
   end;
    ps.Free;
end;
//#############################################################################

function Myconf.RRDTOOL_LOAD_AVERAGE():string;
 var filedatas:string;
  RegExpr:TRegExpr;
 Begin
      RegExpr:=TRegExpr.Create;

      RegExpr.Expression:='([0-9]+)\.([0-9]+)\s+([0-9]+)\.([0-9]+)\s+([0-9]+)\.([0-9]+)';
      filedatas:=ReadFileIntoString('/proc/loadavg');
      if RegExpr.Exec(filedatas) then begin
         if debug then writeln('RRDTOOL_LOAD_AVERAGE:',RegExpr.Match[1]+RegExpr.Match[2]+';' +RegExpr.Match[3]+RegExpr.Match[4] + ';' +RegExpr.Match[5]+RegExpr.Match[6]);
          result:=RegExpr.Match[1]+RegExpr.Match[2]+';' +RegExpr.Match[3]+RegExpr.Match[4] + ';' +RegExpr.Match[5]+RegExpr.Match[6];

      end;
      RegExpr.Free;


end;



//#############################################################################
procedure MyConf.YOREL_VERIFY_START();
var
   l:Tstringlist;
   i:integer;
   Rebuild:boolean;
   artica_path:string;
   logs:Tlogs;
begin
Rebuild:=False;
l:=TStringList.Create;
logs:=tlogs.Create;
ForceDirectories('/opt/artica/var/rrd/yorel');
l.Add('/opt/artica/var/rrd/yorel/cpu_system.rrd');
l.Add('/opt/artica/var/rrd/yorel/proc_other.rrd');
l.Add('/opt/artica/var/rrd/yorel/cpu_idle.rrd');
l.Add('/opt/artica/var/rrd/yorel/io_sda_r.rrd');
l.Add('/opt/artica/var/rrd/yorel/loadavg_5.rrd');
l.Add('/opt/artica/var/rrd/yorel/hdd_pgsql.rrd');
l.Add('/opt/artica/var/rrd/yorel/hdd_www.rrd');
l.Add('/opt/artica/var/rrd/yorel/cpu_user.rrd');
l.Add('/opt/artica/var/rrd/yorel/proc_httpd.rrd');
l.Add('/opt/artica/var/rrd/yorel/proc_system.rrd');
l.Add('/opt/artica/var/rrd/yorel/cpu_hirq.rrd');
l.Add('/opt/artica/var/rrd/yorel/cpu_iowait.rrd');
l.Add('/opt/artica/var/rrd/yorel/mem_user.rrd');
l.Add('/opt/artica/var/rrd/yorel/swap_free.rrd');
l.Add('/opt/artica/var/rrd/yorel/cpu_sirq.rrd');
l.Add('/opt/artica/var/rrd/yorel/cpu_nice.rrd');
l.Add('/opt/artica/var/rrd/yorel/proc_pgsql.rrd');
l.Add('/opt/artica/var/rrd/yorel/hdd_other.rrd');
l.Add('/opt/artica/var/rrd/yorel/eth0_in.rrd');
l.Add('/opt/artica/var/rrd/yorel/proc_total.rrd');
l.Add('/opt/artica/var/rrd/yorel/mem_cached.rrd');
l.Add('/opt/artica/var/rrd/yorel/mem_buffers.rrd');
l.Add('/opt/artica/var/rrd/yorel/eth0_out.rrd');
l.Add('/opt/artica/var/rrd/yorel/hdd_total.rrd');
l.Add('/opt/artica/var/rrd/yorel/swap_used.rrd');
l.Add('/opt/artica/var/rrd/yorel/loadavg_1.rrd');
l.Add('/opt/artica/var/rrd/yorel/loadavg_15.rrd');
l.Add('/opt/artica/var/rrd/yorel/hdd_wwwlogs.rrd');
l.Add('/opt/artica/var/rrd/yorel/mem_free.rrd');
l.Add('/opt/artica/var/rrd/yorel/httpreq.rrd');
l.Add('/opt/artica/var/rrd/yorel/io_sda_w.rrd');
l.Add('/etc/cron.d/artica_yorel');

For i:=0 to l.Count-1 do begin
      if Not FileExists(l.Strings[i]) then begin
         logs.Debuglogs('YOREL_VERIFY_START():: Unable to stat '+l.Strings[i]);
         Rebuild:=True;
         end;
end;
artica_path:=get_ARTICA_PHP_PATH() + '/bin/install/rrd';
  if Rebuild then begin
       YOREL_RECONFIGURE('');
       if FileExists('/opt/artica/bin/perl') then begin
          PERL_PATCHING_HEADER(artica_path + '/yorel-create');
          PERL_PATCHING_HEADER(artica_path + '/yorel-upd');
       end;
       fpsystem(artica_path + '/yorel-create >/dev/null 2>&1');
       logs.Debuglogs(artica_path + '/yorel-create >/dev/null 2>&1');
       fpsystem(artica_path + '/yorel-upd >/dev/null 2>&1');
       logs.Debuglogs(artica_path + '/yorel-upd >/dev/null 2>&1');
   end;
   
logs.Debuglogs('YOREL_VERIFY_START():: End...');
   
end;

//#############################################################################
function Myconf.YOREL_RECONFIGURE(database_path:string):string;
var      artica_path,create_path,upd_path,image_path,du_path,cron_command,andalemono_path:string;
         list:TStringList;
         RegExpr:TRegExpr;
         i:integer;
         sys:Tsystem;
         logs:Tlogs;
begin
   logs:=Tlogs.Create;
   result:='';
   if not FileExists(RRDTOOL_BIN_PATH()) then begin
         logs.Debuglogs('YOREL_RECONFIGURE:: WARNING !!! unable to locate rrdtool : usually in /usr/bin/rrdtool, found "'+RRDTOOL_BIN_PATH()+'" process cannot continue...');
         exit;
   end;



 artica_path:=get_ARTICA_PHP_PATH() + '/bin/install/rrd';
 image_path:='/opt/artica/share/www/system/rrd';
 forcedirectories(image_path);
 andalemono_path:=artica_path;
 create_path:=artica_path + '/yorel-create';
 upd_path:=artica_path+'/yorel-upd';
 du_path:='/usr/bin/du';
 
 logs.Debuglogs('YOREL_RECONFIGURE:: artica_path='+artica_path);
 logs.Debuglogs('YOREL_RECONFIGURE:: du_path='+du_path);
 
 
 
 if length(database_path)=0 then database_path:='/opt/artica/var/rrd/yorel';

 forcedirectories(database_path);

 if not DirectoryExists(artica_path) then begin
      logs.Debuglogs('YOREL_RECONFIGURE::Unable to stat ' + artica_path);
      exit;
 end;
  if not DirectoryExists(database_path) then begin
      logs.Debuglogs('YOREL_RECONFIGURE::Create ' + database_path);
      ForceDirectories(database_path);
 end;

  if not FileExists(andalemono_path) then begin
      logs.Debuglogs('YOREL_RECONFIGURE::Unable to stat ' + andalemono_path);
      exit;
 end;

  if not FileExists(create_path) then begin
      logs.Debuglogs('YOREL_RECONFIGURE::Unable to stat ' + create_path);
      exit;
 end;

   if not FileExists(du_path) then begin
      logs.Debuglogs('YOREL_RECONFIGURE::Unable to stat ' + du_path);
      exit;
 end;

   if not FileExists(upd_path) then begin
      logs.Debuglogs('YOREL_RECONFIGURE::Unable to stat ' + upd_path);
      exit;
 end;


   list:=TStringList.create;
   RegExpr:=TRegExpr.Create;

   logs.Debuglogs('YOREL_RECONFIGURE:: Scanning ='+create_path);
   if not FileExists(create_path) then begin
       logs.Debuglogs('YOREL_RECONFIGURE:: Unable to stat '+create_path);
       exit;
   end;
   
   list.LoadFromFile(create_path);
   try
   for i:=0 to  list.Count-1 do begin
   
      RegExpr.Expression:='my \$path[\s= ]+';
      if RegExpr.Exec(list.Strings[i]) then begin
         list.Strings[i]:='my $path=''' +  database_path + ''';';
         logs.Debuglogs('Starting......: yorel installation Change path in "' + database_path + '" in [my $path] ' +ExtractFileName(create_path));
      end;

      RegExpr.Expression:='RRDp::start';
      if RegExpr.Exec(list.Strings[i]) then begin
          logs.DebugLogs('Starting......: yorel installation Change path in "' + RRDTOOL_BIN_PATH() + '" in line ' + intToStr(i) + ' [RRDp::start] ' +ExtractFileName(create_path));
           list.Strings[i]:=' RRDp::start "' + RRDTOOL_BIN_PATH() + '";';
      end;
   end;
   except
    logs.DebugLogs('Starting......: yorel  fatal error while scanning ' + create_path);
    exit;
   end;

   logs.DebugLogs('Starting......: yorel installation saving ' + create_path);
   list.SaveToFile(create_path);



   RegExpr.Expression:='^my \$rdir';
    list.LoadFromFile(upd_path);
       for i:=0 to  list.Count-1 do begin
      if RegExpr.Exec(list.Strings[i]) then begin
         logs.DebugLogs('Starting......: yorel installation Change path "' + database_path + '" in ' +ExtractFileName(upd_path) );
         list.Strings[i]:='my $rdir=''' +  database_path + ''';';
         logs.DebugLogs('Starting......: yorel installation saving ' + upd_path);
         list.SaveToFile(upd_path);
         break;
      end;
   end;





    list.LoadFromFile(upd_path);
       for i:=0 to  list.Count-1 do begin
           RegExpr.Expression:='^my \$gdir';

           if RegExpr.Exec(list.Strings[i]) then begin
              logs.DebugLogs('Starting......: yorel installation Change path in "' + image_path + '" in line ' + intToStr(i) + ' [$gdir] ' +ExtractFileName(create_path));
              list.Strings[i]:='my $gdir=''' +  image_path + ''';';
           end;

           RegExpr.Expression:='RRDp::start';
           if RegExpr.Exec(list.Strings[i]) then begin
              logs.DebugLogs('Starting......: yorel installation Change path in "' + RRDTOOL_BIN_PATH() + '" in line ' + intToStr(i) + ' [RRDp::start] ' +ExtractFileName(upd_path));
              list.Strings[i]:=' RRDp::start "' + RRDTOOL_BIN_PATH() + '";';
           end;

   end;
     logs.DebugLogs('Starting......: yorel installation saving ' + upd_path);
     list.SaveToFile(upd_path);
     RegExpr.Free;
     list.free;

   sys:=Tsystem.Create();
   if sys.DirectoryCountFiles(database_path)=0 then begin
       logs.DebugLogs('Starting......: yorel installation Create rrd databases in "' + database_path + '"');
       logs.DebugLogs('Starting......: yorel execute "'+create_path+'"');
       fpsystem(create_path);

   end;
  if sys.DirectoryCountFiles(database_path)=0 then begin
       sys.Free;
       logs.DebugLogs('YOREL_RECONFIGURE::Error, there was a problem while creating rrd databases in "' + database_path + '"');
       exit;
  end;
  logs.DebugLogs('Starting......: yorel installation Creating the cron script in order automically generate statistics');
  list:=TstringList.Create;
  list.Add('#!/bin/bash');
  list.Add('');
  list.Add('# HDD usage is collected with the following command,');
  list.Add('#  which can only be run as root');
  list.Add('/bin/chmod 644 '+database_path);
  list.Add('/bin/rm -rf ' + image_path + '/*');
  list.Add(upd_path);
  list.SaveToFile(artica_path + '/yorel_cron');
  fpsystem('/bin/chmod 777 ' + artica_path + '/yorel_cron');
  list.free;

  cron_command:='1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *' + chr(9) + 'root' + chr(9) + artica_path + '/yorel_cron >/dev/null 2>&1';
if DirectoryExists('/etc/cron.d') then begin
     list:=TstringList.Create;
     list.Add(cron_command);
     list.SaveToFile('/etc/cron.d/artica_yorel');
     list.Free;
end;


  logs.DebugLogs('Starting......: yorel installation Done...');

end;

//#############################################################################
procedure myconf.PERL_PATCHING_HEADER(path:string);
var
   l:TstringList;
   logs:Tlogs;
begin
   if not FileExists(path) then exit;
   l:=TstringList.Create;
   l.LoadFromFile(path);
   logs:=Tlogs.Create;
   if length(l.Text)>0 then begin
      if pos('!',l.Strings[0])>0 then begin
      logs.Debuglogs('PERL_PATCHING_HEADER: -> ' + l.Strings[0]);
      l.Strings[0]:='#!' + PERL_BIN_PATH();
      l.SaveToFile(path);
      end;
   end;
   l.free;
end;
//#############################################################################

function Myconf.QUEUEGRAPH_TEMP_PATH():string;
var debugC:boolean;
list:TStringList;
cgi_path:string;
  RegExpr:TRegExpr;
  i:integer;
begin
debugC:=false;
if ParamStr(1)='-queuegraph' then debugC:=true;
cgi_path:=get_ARTICA_PHP_PATH() + '/bin/queuegraph/queuegraph1.cgi';

if not FileExists(cgi_path) then begin
   if debugC then ShowScreen('QUEUEGRAPH_TEMP_PATH::unable to locate ' + cgi_path);
   exit;
end;
list:=TStringList.Create;
list.LoadFromFile(cgi_path);
RegExpr:=TRegExpr.Create;
RegExpr.Expression:='my \$tmp_dir[=''"\s+]+([a-zA-Z\/_\-0-9]+)';
  for i:=0 to list.Count-1 do begin
        if RegExpr.Exec(list.Strings[i]) then begin
             result:=RegExpr.Match[1];
             break;
        end;

  end;
  if debugC then ShowScreen('QUEUEGRAPH_TEMP_PATH:: Path="' + result + '"');
  list.free;
  RegExpr.free;
end;
//#############################################################################
procedure Myconf.RDDTOOL_POSTFIX_MAILS_CREATE_DATABASE();
var
   database_path,date,command:string;
   sday:integer;
begin
     database_path:=RRDTOOL_STAT_POSTFIX_MAILS_SENT_DATABASE_PATH();
     if debug then writeln('RDDTOOL_POSTFIX_MAILS_CREATE_DATABASE');
     if debug then writeln('Testing database "' + database_path + '"');

     if not fileexists(database_path) then begin
        sday:=DayOf(now);
        sday:=sday-2;
        date:=IntTostr(YearOf(now)) + '-' +IntToStr(MonthOf(now)) + '-' + intTostr(sday) + ' 00:00:00';
                if debug then writeln('Creating database..start yesterday ' + date);
        date:=RRDTOOL_SecondsBetween(date);
        command:=RRDTOOL_BIN_PATH() + '  create ' + database_path + ' --start ' + date + ' DS:mails:ABSOLUTE:60:0:U RRA:AVERAGE:0.5:1:60';
        if debug then writeln(command);
        fpsystem(command);

        if debug then writeln('Creating database..done..');
     end;
end;


//#############################################################################
procedure Myconf.RDDTOOL_POSTFIX_MAILS_SENT_STATISTICS();
  var filedatas:TstringList;
  var maillog_path,rdd_sent_path,formated_date,new_formated_date,mem_formated_date:string;
  RegExpr:TRegExpr;
  i:integer;
  month,year,countlines:integer;

begin
     mem_formated_date:='';
     maillog_path:=get_LINUX_MAILLOG_PATH();
     if length(maillog_path)=0  then begin
           logs.logs('RDDTOOL_POSTFIX_MAILS_SENT_STATISTICS:: unable to stat maillog...aborting');
           if debug then writeln('unable to locate maillog path');
           exit;
     end;
     notdebug2:=true;
     if debug then writeln('reading ' +  maillog_path);
     rdd_sent_path:=RRDTOOL_STAT_POSTFIX_MAILS_SENT_DATABASE_PATH();
     countlines:=1;
     year:=YearOf(now);
     RegExpr:=TRegExpr.Create;
     filedatas:=TstringList.Create;
     filedatas.LoadFromFile(maillog_path);
     if debug then writeln('starting parsing lines number ',filedatas.Count);
     RegExpr.Expression:='([a-zA-Z]+)\s+([0-9]+)\s+([0-9\:]+).+postfix/(smtp|lmtp).+to=<(.+)>,\s+relay=(.+),.+status=sent.+';


     for i:=0 to filedatas.Count -1 do begin
         if RegExpr.Exec(filedatas.Strings[i]) then begin
               month:=GetMonthNumber(RegExpr.Match[1]);
               if debug then writeln(filedatas.Strings[i]);
                formated_date:=intTostr(year) + '-' + intTostr(month) + '-' + RegExpr.Match[2] + ' ' + RegExpr.Match[3];
                new_formated_date:=RRDTOOL_SecondsBetween(formated_date);
                if debug then writeln( new_formated_date + '/' +  mem_formated_date);
                if mem_formated_date=new_formated_date then begin
                    countlines:=countlines+1;
                    if debug then writeln( formated_date +  ' increment 1 ('+IntToStr(countlines)+')');
                end else begin
                    if debug then writeln( formated_date +' ' + new_formated_date + ' ' + RegExpr.Match[5] +  '('+IntToStr(countlines)+')->ADD');
                    fpsystem(RRDTOOL_BIN_PATH() + '  update ' + rdd_sent_path + ' ' + new_formated_date+ ':' + IntToStr(countlines));
                    mem_formated_date:=new_formated_date;
                    countlines:=1;
                end;

         end;

     end;
     RegExpr.Free;
     filedatas.Free;



end;
//#############################################################################

procedure Myconf.RDDTOOL_POSTFIX_MAILS_SENT_GENERATE();
var
   commandline:string;
   database_path:string;
   php_path,gif_path,gwidth,gheight:string;
begin
  php_path:=get_ARTICA_PHP_PATH();
  gwidth:=RRDTOOL_GRAPH_WIDTH();
  gheight:=RRDTOOL_GRAPH_HEIGHT();
  database_path:=RRDTOOL_STAT_POSTFIX_MAILS_SENT_DATABASE_PATH();

  gif_path:=php_path + '/img/LOAD_MAIL-SENT-1.gif';
commandline:=RRDTOOL_BIN_PATH() + '  graph ' + gif_path + ' -t "Mails sent pear day" -v "Mails number" -w '+gwidth+' -h '+gheight+' --start -1day ';
commandline:=commandline + 'DEF:mem_ram_libre='+database_path+':mem_ram_libre:AVERAGE  ';
///usr/bin/rrdtool graph /home/touzeau/developpement/artica-postfix/img/LOAD_MAIL-SENT-1.gif -t "Mails sent pear day" -v "Mails number" -w 550 -h 550 --start -1day DEF:mails=/home/touzeau/developpement/artica-postfix/ressources/rrd/postfix-mails-sent.rdd:mails:AVERAGE LINE1:mails\#FFFF00:"Emails number"
           if debug then writeln(commandline);

fpsystem(commandline + ' >/opt/artica/logs/rrd.generate.dustbin');
  if FileExists(gif_path) then fpsystem('/bin/chmod 755 ' + gif_path);

end;

//###########################################################################



//#############################################################################
function Myconf.GetMonthNumber(MonthName:string):integer;
begin
 if MonthName='Jan' then exit(1);
 if MonthName='Feb' then exit(2);
 if MonthName='Mar' then exit(3);
 if MonthName='Apr' then exit(4);
 if MonthName='May' then exit(5);
 if MonthName='Jun' then exit(6);
 if MonthName='Jul' then exit(7);
 if MonthName='Aug' then exit(8);
 if MonthName='Sep' then exit(9);
 if MonthName='Oct' then exit(10);
 if MonthName='Nov'  then exit(11);
 if MonthName='Dec'  then exit(12);
 if MonthName='jan' then exit(1);
 if MonthName='feb' then exit(2);
 if MonthName='mar' then exit(3);
 if MonthName='apr' then exit(4);
 if MonthName='may' then exit(5);
 if MonthName='jun' then exit(6);
 if MonthName='jul' then exit(7);
 if MonthName='aug' then exit(8);
 if MonthName='sep' then exit(9);
 if MonthName='oct' then exit(10);
 if MonthName='nov'  then exit(11);
 if MonthName='dec'  then exit(12);
end;
//#############################################################################


procedure Myconf.RDDTOOL_LOAD_MEMORY_GENERATE();
var
   commandline:string;
   database_path:string;
   php_path,gif_path,gwidth,gheight:string;
begin
  php_path:=get_ARTICA_PHP_PATH();
  gwidth:=RRDTOOL_GRAPH_WIDTH();
  gheight:=RRDTOOL_GRAPH_HEIGHT();
  database_path:=RRDTOOL_STAT_LOAD_MEMORY_DATABASE_PATH();

  gif_path:=php_path + '/img/LOAD_MEMORY-1.gif';
commandline:=RRDTOOL_BIN_PATH() + '  graph ' + gif_path + ' -t "SYSTEM memory pear day" -v "memory bytes" -w '+gwidth+' -h '+gheight+' --start -1day ';
commandline:=commandline + 'DEF:mem_ram_libre='+database_path+':mem_ram_libre:AVERAGE  ';
commandline:=commandline + 'DEF:mem_ram_util='+database_path+':mem_ram_util:AVERAGE  ';
commandline:=commandline + 'DEF:mem_virtu_libre='+database_path+':mem_virtu_libre:AVERAGE  ';
commandline:=commandline + 'DEF:mem_virtu_util='+database_path+':mem_virtu_util:AVERAGE ';
commandline:=commandline + 'CDEF:mem_virtu_libre_tt=mem_virtu_util,mem_virtu_libre,+,1024,* ';
commandline:=commandline + 'CDEF:mem_virtu_util_tt=mem_virtu_util,1024,* ';
commandline:=commandline + 'CDEF:mem_ram_tt=mem_ram_util,mem_ram_libre,+,1024,* ';
commandline:=commandline + 'CDEF:mem_ram_util_tt=mem_ram_util,1024,* ';
commandline:=commandline + 'LINE3:mem_ram_util_tt\#FFFF00:"RAM used" ';
commandline:=commandline + 'LINE2:mem_virtu_util_tt\#FF0000:"Virtual RAM used\n" ';
commandline:=commandline + 'GPRINT:mem_ram_tt:LAST:"RAM  Free %.2lf %s |" ';
commandline:=commandline + 'GPRINT:mem_ram_util_tt:MAX:"RAM  MAX used %.2lf %s |" ';
commandline:=commandline + 'GPRINT:mem_ram_util_tt:AVERAGE:"RAM average util %.2lf %s |" ';
commandline:=commandline + 'GPRINT:mem_ram_util_tt:LAST:"RAM  CUR util %.2lf %s\n" ';
commandline:=commandline + 'GPRINT:mem_virtu_libre_tt:LAST:"Swap Free %.2lf %s |" ';
commandline:=commandline + 'GPRINT:mem_virtu_util_tt:MAX:"Swap MAX used %.2lf %s |" ';
commandline:=commandline + 'GPRINT:mem_virtu_util_tt:AVERAGE:"Swap AVERAGE used %.2lf %s |" \';
commandline:=commandline + 'GPRINT:mem_virtu_util_tt:LAST:"Swap Current used %.2lf %s"';
           if debug then writeln(commandline);

fpsystem(commandline + ' >/opt/artica/logs/rrd.generate.dustbin');
  if FileExists(gif_path) then fpsystem('/bin/chmod 755 ' + gif_path);

end;

//#############################################################################




//#############################################################################
procedure Myconf.RDDTOOL_LOAD_AVERAGE_GENERATE();
var
   commandline:string;
   database_path:string;
   php_path,gif_path,gwidth,gheight:string;
begin
  php_path:=get_ARTICA_PHP_PATH();
  gwidth:=RRDTOOL_GRAPH_WIDTH();
  gheight:=RRDTOOL_GRAPH_HEIGHT();
  database_path:=RRDTOOL_STAT_LOAD_AVERAGE_DATABASE_PATH();

  gif_path:=php_path + '/img/LOAD_AVERAGE-1.gif';
  commandline:=RRDTOOL_BIN_PATH() + '  graph ' + gif_path + ' -t "SYSTEM LOAD pear day" -v "Charge x 100" -w '+gwidth+' -h '+gheight+' --start -1day ';
  commandline:=commandline + 'DEF:charge_1min=' + database_path + ':charge_1min:AVERAGE ';
  commandline:=commandline + 'DEF:charge_5min=' + database_path + ':charge_5min:AVERAGE ';
  commandline:=commandline + 'DEF:charge_15min=' + database_path + ':charge_15min:AVERAGE ';
  commandline:=commandline + 'LINE2:charge_1min\#FF0000:"Load 1 minute" ';
  commandline:=commandline + 'LINE2:charge_5min\#00FF00:"load 5 minute" ';
  commandline:=commandline + 'LINE2:charge_15min\#0000FF:"load 15 minute \n" ';
  commandline:=commandline + 'GPRINT:charge_1min:MAX:"System load  1 minute  \: MAX %.2lf %s |" ';
  commandline:=commandline + 'GPRINT:charge_1min:AVERAGE:"AVERAGE %.2lf %s |" ';
  commandline:=commandline + 'GPRINT:charge_1min:LAST:"CUR %.2lf %s \n" ';
  commandline:=commandline + 'GPRINT:charge_5min:MAX:"System load  5 minutes \: MAX %.2lf %s |" ';
  commandline:=commandline + 'GPRINT:charge_5min:AVERAGE:"AVERAGE %.2lf %s |" ';
  commandline:=commandline + 'GPRINT:charge_5min:LAST:"CUR %.2lf %s \n" ';
  commandline:=commandline + 'GPRINT:charge_15min:MAX:"System Load 15 minutes \: MAX %.2lf %s |" ';
  commandline:=commandline + 'GPRINT:charge_15min:AVERAGE:"AVERAGE %.2lf %s |" ';
  commandline:=commandline + 'GPRINT:charge_15min:LAST:"CUR %.2lf %s \n"';
  fpsystem(commandline + ' >/opt/artica/logs/rrd.generate.dustbin');
  if FileExists(gif_path) then fpsystem('/bin/chmod 755 ' + gif_path);

end;

//#############################################################################
procedure Myconf.RDDTOOL_LOAD_CPU_GENERATE();
var
   commandline:string;
   database_path:string;
   php_path,gif_path,gwidth,gheight:string;
begin
  php_path:=get_ARTICA_PHP_PATH();
  gwidth:=RRDTOOL_GRAPH_WIDTH();
  gheight:=RRDTOOL_GRAPH_HEIGHT();
  database_path:=RRDTOOL_STAT_LOAD_CPU_DATABASE_PATH();
  gif_path:=php_path + '/img/LOAD_CPU-1.gif';

commandline:=RRDTOOL_BIN_PATH() + ' graph ' + gif_path + ' -t "CPU on day" -v "Util CPU 1/100 Seconds" -w '+gwidth+' -h '+gheight+' --start -1day ';
  commandline:=commandline + 'DEF:utilisateur='+ database_path+':utilisateur:AVERAGE ';
  commandline:=commandline + 'DEF:nice='+ database_path+':nice:AVERAGE ';
  commandline:=commandline + 'DEF:systeme='+ database_path+':systeme:AVERAGE ';
  commandline:=commandline + 'CDEF:vtotale=utilisateur,systeme,+ ';
  commandline:=commandline + 'CDEF:vutilisateur=vtotale,1,GT,0,utilisateur,IF ';
  commandline:=commandline + 'CDEF:vnice=vtotale,1,GT,0,nice,IF ';
  commandline:=commandline + 'CDEF:vsysteme=vtotale,1,GT,0,systeme,IF ';
  commandline:=commandline + 'CDEF:vtotalectrl=vtotale,1,GT,0,vtotale,IF ';
  commandline:=commandline + 'LINE2:vutilisateur\#FF0000:"User" ';
  commandline:=commandline + 'LINE2:vnice\#0000FF:"Nice" ';
  commandline:=commandline + 'LINE2:vsysteme\#00FF00:"system" ';
  commandline:=commandline + 'LINE2:vtotalectrl\#FFFF00:"sum \n" ';
  commandline:=commandline + 'GPRINT:vutilisateur:MAX:"CPU user \: MAX %.2lf %s |" ';
  commandline:=commandline + 'GPRINT:vutilisateur:AVERAGE:"AVERAGE %.2lf %s |" ';
  commandline:=commandline + 'GPRINT:vutilisateur:LAST:"CUR %.2lf %s \n" ';
  commandline:=commandline + 'GPRINT:vnice:MAX:"CPU nice  \: MAX %.2lf %s |" ';
  commandline:=commandline + 'GPRINT:vnice:AVERAGE:"AVERAGE %.2lf %s |" ';
  commandline:=commandline + 'GPRINT:vnice:LAST:"CUR %.2lf %s \n" ';
  commandline:=commandline + 'GPRINT:vsysteme:MAX:"CPU  system   \: MAX %.2lf %s |" ';
  commandline:=commandline + 'GPRINT:vsysteme:AVERAGE:"AVERAGE %.2lf %s |" ';
  commandline:=commandline + 'GPRINT:vsysteme:LAST:"CUR %.2lf %s \n" ';
  commandline:=commandline + 'GPRINT:vtotalectrl:MAX:"Total  CPU    \: MAX %.2lf %s |" ';
  commandline:=commandline + 'GPRINT:vtotalectrl:AVERAGE:"AVERAGE %.2lf %s |" ';
  commandline:=commandline + 'GPRINT:vtotalectrl:LAST:"CUR %.2lf %s \n"';

  if debug then writeln(commandline);
  fpsystem(commandline + ' >/opt/artica/logs/rrd.generate.dustbin');

  if FileExists(gif_path) then fpsystem('/bin/chmod 755 ' + gif_path);
end;
//#############################################################################
function Myconf.RRDTOOL_GRAPH_WIDTH():string;
var value:string;
ini:TIniFile;
begin
ini:=TIniFile.Create('/etc/artica-postfix/artica-postfix-rdd.conf');
value:=ini.ReadString('ARTICA','RRDTOOL_GRAPH_WIDTH','');
if length(value)=0 then  begin
   if debug then writeln('RRDTOOL_GRAPH_WIDTH is not set in ini');
   if debug then writeln('set RRDTOOL_GRAPH_WIDTH to 450');
   value:='550';
   ini.WriteString('ARTICA','RRDTOOL_GRAPH_WIDTH','450');
end;
result:=value;
ini.Free;
end;
//#############################################################################
function Myconf.RRDTOOL_GRAPH_HEIGHT():string;
var value:string;
ini:TIniFile;
begin
ini:=TIniFile.Create('/etc/artica-postfix/artica-postfix-rdd.conf');
value:=ini.ReadString('ARTICA','RRDTOOL_GRAPH_HEIGHT','');
if length(value)=0 then  begin
   if debug then writeln('RRDTOOL_GRAPH_WIDTH is not set in ini');
   if debug then writeln('set RRDTOOL_GRAPH_HEIGHT to 170');
   value:='550';
   ini.WriteString('ARTICA','RRDTOOL_GRAPH_HEIGHT','170');
end;
result:=value;
ini.Free;
end;
//#############################################################################
function MyConf.RRDTOOL_STAT_LOAD_CPU_DATABASE_PATH():string;
var value,phppath,path:string;
ini:TIniFile;
begin
ini:=TIniFile.Create('/etc/artica-postfix/artica-postfix-rdd.conf');
value:=ini.ReadString('ARTICA','STAT_CPU_PATH','');
if length(value)=0 then  begin
   if debug then writeln('STAT_LOAD_PATH is not set in ini path');
   phppath:=get_ARTICA_PHP_PATH();
   path:=phppath+'/ressources/rrd/cpu.rdd';
   if debug then writeln('set STAT_CPU_PATH to '+path);
   value:=path;
   ini.WriteString('ARTICA','STAT_CPU_PATH',path);
   if debug then writeln('done..'+path);
end;
result:=value;
ini.Free;
end;
//#############################################################################
function MyConf.RRDTOOL_STAT_LOAD_MEMORY_DATABASE_PATH():string;
var value,phppath,path:string;
ini:TIniFile;
begin
ini:=TIniFile.Create('/etc/artica-postfix/artica-postfix-rdd.conf');
value:=ini.ReadString('ARTICA','STAT_MEM_PATH','');
if length(value)=0 then  begin
   if debug then writeln('STAT_LOAD_PATH is not set in ini path');
   phppath:=get_ARTICA_PHP_PATH();
   path:=phppath+'/ressources/rrd/mem.rdd';
   if debug then writeln('set STAT_MEM_PATH to '+path);
   value:=path;
   ini.WriteString('ARTICA','STAT_MEM_PATH',path);
   if debug then writeln('done..'+path);
end;
result:=value;
ini.Free;
end;
//#############################################################################
function MyConf.RRDTOOL_STAT_POSTFIX_MAILS_SENT_DATABASE_PATH():string;
var value,phppath,path:string;
ini:TIniFile;
begin
ini:=TIniFile.Create('/etc/artica-postfix/artica-postfix-rdd.conf');
value:=ini.ReadString('ARTICA','STAT_MAIL_SENT_PATH','');
if length(value)=0 then  begin
   if debug then writeln('STAT_MAIL_PATH is not set in ini path');
   phppath:=get_ARTICA_PHP_PATH();
   path:=phppath+'/ressources/rrd/postfix-mails-sent.rdd';
   if debug then writeln('set STAT_MAIL_SENT_PATH to '+path);
   value:=path;
   ini.WriteString('ARTICA','STAT_MAIL_SENT_PATH',path);
   if debug then writeln('done..'+path);
end;
result:=value;
ini.Free;
end;
//#############################################################################
function Myconf.KAS_VERSION():string;
var
    path:string;
    RegExpr:TRegExpr;
    FileData:TStringList;
    i:integer;
begin
     path:='/usr/local/ap-mailfilter3/bin/curvers';
     if not FileExists('/usr/local/ap-mailfilter3/bin/curvers') then exit;
     FileData:=TStringList.Create;
     RegExpr:=TRegExpr.Create;
     FileData.LoadFromFile(path);
     RegExpr.Expression:='CUR_PRODUCT_VERSION="([0-9\.]+)"';
     for i:=0 to FileData.Count -1 do begin
          if RegExpr.Exec(FileData.Strings[i]) then  begin
            result:=RegExpr.Match[1];
            FileData.Free;
            RegExpr.Free;
            exit;
          end;
     end;
end;

//#############################################################################
function myconf.LDAP_GET_BIN_PATH:string;
begin
   if FileExists('/usr/sbin/slapd') then exit('/usr/sbin/slapd');
   if FileExists('/opt/artica/bin/slapd') then exit('/opt/artica/bin/slapd');
end;
//#############################################################################

function Myconf.CYRUS_DELIVER_BIN_PATH():string;
var path:string;
begin
    path:=LINUX_APPLICATION_INFOS('cyrus_deliver_bin');
    if length(path)>0 then exit(path);
    if FileExists('/opt/artica/cyrus/bin/deliver') then exit('/opt/artica/cyrus/bin/deliver');
end;
//#############################################################################
function MyConf.POSFTIX_DELETE_FILE_FROM_CACHE(MessageID:string):boolean;
var FileSource,FileDatas:TStringList;
    php_path,commandline:string;
    RegExpr:TRegExpr;
    D:boolean;
    i:integer;
begin
   D:=COMMANDLINE_PARAMETERS('debug');
  FileSource:=TStringList.Create;
  php_path:=get_ARTICA_PHP_PATH() +'/ressources/databases/*.cache';
  commandline:='/bin/grep -l ' + MessageID + ' ' + php_path;
  if D then ShowScreen('POSFTIX_DELETE_FILE_FROM_CACHE:: EXEC -> ' + commandLine);
  //grep -l 8680973402E /home/touzeau/developpement/artica-postfix/ressources/databases/*.cache
  fpsystem(commandline + ' >/opt/artica/logs/artica_tmp');
  FileSource.LoadFromFile('/opt/artica/logs/artica_tmp');

  if FileSource.Count>0 then begin
     if D then ShowScreen('POSFTIX_DELETE_FILE_FROM_CACHE:: Found file : ' +FileSource.Strings[0]);
  end else begin
           if D then ShowScreen('POSFTIX_DELETE_FILE_FROM_CACHE:: no Found file : ');
            FileSource.Free;
            exit(false);
  end;
  FileDatas:=TStringList.Create;
  FileDatas.LoadFromFile(trim(FileSource.Strings[0]));
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:=MessageID;
  for i:=0 to FileDatas.Count-1 do begin
       if RegExpr.Exec(FileDatas.Strings[i]) then begin
             if D then ShowScreen('POSFTIX_DELETE_FILE_FROM_CACHE:: Pattern found line : ' + IntToStr(i));
            FileDatas.Delete(i);

       end;
       if i>=FileDatas.Count-1 then break;
  end;
  FileDatas.SaveToFile(trim(FileSource.Strings[0]));
  RegExpr.free;
  FileDatas.free;
  FileSource.Free;
  exit(true);
end;




//#############################################################################
function MyConf.POSFTIX_CACHE_QUEUE():boolean;
var
   D:boolean;
begin

    D:=COMMANDLINE_PARAMETERS('debug');
    if COMMANDLINE_PARAMETERS('queue=') then begin
           if D then ShowScreen('POSFTIX_CACHE_QUEUE:: Extract a single queue ->' + COMMANDLINE_EXTRACT_PARAMETERS('queue=([a-z]+)'));
           POSFTIX_CACHE_QUEUE_FILE_LIST(COMMANDLINE_EXTRACT_PARAMETERS('queue=([a-z]+)'));
           exit(true);

    end;
    logs.logs('POSFTIX_CACHE_QUEUE:: Starting to cache queues directories');

    POSFTIX_CACHE_QUEUE_FILE_LIST('incoming');
    POSFTIX_CACHE_QUEUE_FILE_LIST('active');
    POSFTIX_CACHE_QUEUE_FILE_LIST('deferred');
    POSFTIX_CACHE_QUEUE_FILE_LIST('bounce');
    POSFTIX_CACHE_QUEUE_FILE_LIST('defer');
    POSFTIX_CACHE_QUEUE_FILE_LIST('trace');
    POSFTIX_CACHE_QUEUE_FILE_LIST('maildrop');


end;
//#############################################################################
function MyConf.POSFTIX_CACHE_QUEUE_FILE_LIST(QueueName:string):boolean;
var
   Conf:TiniFile;
   ConfPath,php_path:string;
   FileFiles:TStringList;
   D:boolean;
   WritePath:string;
   FilesNumber:integer;
   FilesNumberCache:integer;
   PagesNumber,start:integer;
   i:integer;

begin
    D:=COMMANDLINE_PARAMETERS('debug');
    if D then ShowScreen('POSFTIX_CACHE_QUEUE_FILE_LIST:: Starting to cache "' + QueueName + '" folder');
    logs.logs('POSFTIX_CACHE_QUEUE_FILE_LIST:: Starting to cache "' + QueueName + '" folder');
    php_path:=get_ARTICA_PHP_PATH();
    ConfPath:=php_path + '/ressources/databases/postfix-queue-cache.conf';
    Conf:=TiniFile.Create(ConfPath);

    if COMMANDLINE_PARAMETERS('flush') then begin
      if D then ShowScreen('POSFTIX_CACHE_QUEUE_FILE_LIST:: flush the cache');
      Conf.WriteInteger(QueueName,'FileNumber',0);

    end;

    FilesNumber:=StrToInt(POSTFIX_QUEUE_FILE_NUMBER(QueueName));
    if D then ShowScreen('POSFTIX_CACHE_QUEUE_FILE_LIST:: ' + QueueName + '="' + IntToStr(FilesNumber) +'"');





    if FilesNumber=0 then begin
       if D then ShowScreen('POSFTIX_CACHE_QUEUE_FILE_LIST:: no files for '+QueueName);
       exit(true);
    end;

    FilesNumberCache:=Conf.ReadInteger(QueueName,'FileNumber',0);
    if FilesNumber=FilesNumberCache then begin
       if D then ShowScreen('Number of files didn''t changed..');
       exit(true);
    end;


    PagesNumber:= FilesNumber div 250;
    if D then ShowScreen('POSFTIX_CACHE_QUEUE_FILE_LIST::Pages number: ' + IntToStr(PagesNumber));
    Conf.WriteInteger(QueueName,'FileNumber',FilesNumber);
    Conf.WriteInteger(QueueName,'PagesNumber',PagesNumber);


    start:=0;
    for i:=0 to  PagesNumber do begin
        FileFiles:=TStringList.Create;
        FileFiles.AddStrings(POSFTIX_READ_QUEUE_FILE_LIST(start,start+250,QueueName,true));
        WritePath:=php_path + '/ressources/databases/queue.list.'+ IntToStr(i) +'.'+ QueueName + '.cache';
        if D then ShowScreen('POSFTIX_CACHE_QUEUE_FILE_LIST::writing page cache in : ' + WritePath);
        FileFiles.SaveToFile(WritePath);
        FileFiles.Free;
        fpsystem('/bin/chmod 755 ' + WritePath);
        start:=start+300;

    end;

   Conf.Free;



end;





//#############################################################################
function MyConf.POSFTIX_READ_QUEUE_FILE_LIST(fromFileNumber:integer;tofilenumber:integer;queuepath:string;include_source:boolean):TstringList;
Var Info  : TSearchRec;
    Count : Longint;
    path  :string;
    Line:TstringList;
    return_line,queue_source_path:string;
    D:boolean;
Begin
  if Not FileExists(postfix.POSFTIX_POSTCONF_PATH()) then exit;
  queue_source_path:=trim(ExecPipe(postfix.POSFTIX_POSTCONF_PATH()+ ' -h queue_directory'));
  Count:=0;
  Line:=TstringList.Create;
  D:=COMMANDLINE_PARAMETERS('debug');

  if tofilenumber-fromFileNumber>500 then begin
     if D then ShowScreen('POSFTIX_READ_QUEUE_FILE_LIST::eMail number is too large reduce it to 300');
      Logs.logs('POSFTIX_READ_QUEUE_FILE_LIST::eMail number is too large reduce it to 300');
      tofilenumber:=300;
  end;


  if tofilenumber=0 then tofilenumber:=100;
  if length(queuepath)=0 then  begin
     Logs.logs('POSFTIX_READ_QUEUE_FILE_LIST::Queue path is null');
     if D then ShowScreen('POSFTIX_READ_QUEUE_FILE_LIST::Queue path is null');
     exit(line);
  end;


  if include_source then begin
    if length(queuepath)>0  then path:=queue_source_path + '/' + queuepath;
  end else begin

         path:=queuepath;
  end;

  if D then ShowScreen('POSFTIX_READ_QUEUE_FILE_LIST:: ' + queuepath + '::-> ' +path + '/*' );
  Logs.logs('POSFTIX_READ_QUEUE_FILE_LIST::-> ' + queuepath + ':: '+path + ' Read from file number ' + IntTostr(fromFileNumber) + ' to file number ' + IntToStr(tofilenumber) );
  If FindFirst (path+'/*',faAnyFile and faDirectory,Info)=0 then
    begin
    Repeat
      if Info.Name<>'..' then begin
         if Info.Name <>'.' then begin

              if Info.Attr=48 then begin
                 if D then ShowScreen(' -> ' +path + '/' +Info.Name );
                 Line.AddStrings(POSFTIX_READ_QUEUE_FILE_LIST(fromFileNumber,tofilenumber,path + '/' +Info.Name,false));
                 count:=count + Line.Count;
              end;

              if Info.Attr=16 then begin
                 if D then ShowScreen(' -> ' +path + '/' +Info.Name );
                 Line.AddStrings(POSFTIX_READ_QUEUE_FILE_LIST(fromFileNumber,tofilenumber,path + '/' +Info.Name,false));
                 count:=count + Line.Count;
              end;

              if Info.Attr=32 then begin
                 Inc(Count);
                 if Count>=fromFileNumber then begin
                    return_line:='<file>'+Info.name+'</file><path>' +path + '/' +Info.Name + '</path>' + POSTFIX_READ_QUEUE_MESSAGE(info.name);
                    if ParamStr(2)='queuelist' then begin
                       if length(ParamStr(6))=0 then ShowScreen(return_line);
                    end;
                    Line.Add(return_line);
                 end;
              end;
              if count>=tofilenumber then break;
              //Writeln (Info.Name:40,Info.Size:15);   postcat -q 3C7F17340B1
         end;
      end;

    Until FindNext(info)<>0;
    end;

  FindClose(Info);
  Logs.logs('POSFTIX_READ_QUEUE_FILE_LIST:: ' + queuepath + ':: ->'  +IntToStr(line.Count) + ' line(s)');

  exit(line);
end;
//#############################################################################


function myConf.POSTFIX_READ_QUEUE_MESSAGE(MessageID:string):string;
var
    RegExpr,RegExpr2,RegExpr3,RegExpr4,RegExpr5:TRegExpr;
    FileData:TStringList;
    i:integer;
    m_Time,named_attribute,sender,recipient,Subject:string;
begin
   if not fileExists('/usr/sbin/postcat') then begin
      logs.logs('POSTFIX_READ_QUEUE_MESSAGE:: unable to stat /usr/sbin/postcat');
      exit;
   end;


   fpsystem('/usr/sbin/postcat -q ' + MessageID + ' >/opt/artica/logs/' + MessageID + '.tmp');

   if not fileExists('/opt/artica/logs/' + MessageID + '.tmp') then begin
       logs.logs('unable to stat ' + '/opt/artica/logs/' + MessageID + '.tmp');
       exit;
   end;
   FileData:=TStringList.Create;
   FileData.LoadFromFile('/opt/artica/logs/' + MessageID + '.tmp');
   RegExpr:=TRegExpr.Create;
   RegExpr2:=TRegExpr.Create;
   RegExpr3:=TRegExpr.Create;
   RegExpr4:=TRegExpr.Create;
   RegExpr5:=TRegExpr.Create;
   RegExpr.Expression:='message_arrival_time: (.+)';
   RegExpr2.Expression:='named_attribute: (.+)';
   RegExpr3.Expression:='sender: ([a-zA-Z0-9\.@\-_]+)';
   RegExpr4.Expression:='recipient: ([a-zA-Z0-9\.@\-_]+)';
   RegExpr5.Expression:='Subject: (.+)';
   For i:=0 to FileData.Count-1 do begin
        if RegExpr.Exec(FileData.Strings[i]) then m_Time:=RegExpr.Match[1];
        if RegExpr2.Exec(FileData.Strings[i]) then named_attribute:=RegExpr2.Match[1];
        if RegExpr3.Exec(FileData.Strings[i]) then sender:=RegExpr3.Match[1];
        if RegExpr4.Exec(FileData.Strings[i]) then recipient:=RegExpr4.Match[1];
        if RegExpr5.Exec(FileData.Strings[i]) then Subject:=RegExpr5.Match[1];

        if length(m_Time)>0 then begin
           if  length(named_attribute)>0 then begin
               if length(sender)>0 then begin
                  if length(recipient)>0 then begin
                     if length(subject)>0 then begin
                        break
                     end;
                  end;
               end;
           end;
        end;



   end;
   fpsystem('/bin/rm /opt/artica/logs/' + MessageID + '.tmp');
   RegExpr.Free;
   RegExpr2.Free;
   RegExpr3.Free;
   RegExpr4.Free;
   RegExpr5.Free;
   FileData.Free;

  exit('<time>' + m_Time + '</time><named_attr>' + named_attribute + '</named_attr><sender>' + sender + '</sender><recipient>' + recipient + '</recipient><subject>' + subject + '</subject>');



end;
//#############################################################################
function myconf.POSTFIX_EXPORT_LOGS():boolean;
 var maillog,PHP_PATH:string;
 D:boolean;
 A:boolean;
 m:TstringList;
 begin
   D:=COMMANDLINE_PARAMETERS('debug');
   A:=COMMANDLINE_PARAMETERS('alllogs');
   maillog:=get_LINUX_MAILLOG_PATH();
   PHP_PATH:=get_ARTICA_PHP_PATH();
  if  COMMANDLINE_PARAMETERS('silent') then begin
      A:=false;D:=false;
  end;

   if D then Showscreen('POSTFIX_EXPORT_LOGS:: -> receive command to parse logs :"' + maillog + '"');
   if length(maillog)=0 then begin
        Showscreen('POSTFIX_EXPORT_LOGS -> Error, unable to obtain maillog path :"' + maillog + '"');
        exit(true);
   end;

         if not FileExists(maillog) then exit(true);

   if D OR A then Showscreen('POSTFIX_EXPORT_LOGS:: -> get ' + '/usr/bin/tail '+ maillog + ' -n 100' +PHP_PATH + '/ressources/logs/postfix-all-events.log');
   fpsystem('/usr/bin/tail '+ maillog + ' -n 100 >' + PHP_PATH + '/ressources/logs/postfix-all-events.log');
   fpsystem('/usr/bin/tail '+ maillog + ' -n 100|grep postfix >' + PHP_PATH + '/ressources/logs/postfix-events.log');
   fpsystem('/bin/chmod 0755 '+PHP_PATH + '/ressources/logs/postfix*');




end;


//#############################################################################
function Myconf.POSTFIX_QUEUE_FILE_NUMBER(directory_name:string):string;
         const
            CR = #$0d;
            LF = #$0a;
            CRLF = CR + LF;

var filepath:string;
system:Tsystem;
sCount:integer;
count_incoming,count_active,count_deferred,count_bounce,count_defer,count_trace,count_maildrop:integer;
fef:boolean;
begin

if not FileExists(postfix.POSFTIX_POSTCONF_PATH()) then exit;

fef:=false;
    directory_name:=trim(directory_name);
    if length(directory_name)=0 then fef:=false;
    if directory_name='incoming' then fef:=true;
    if directory_name='active' then fef:=true;
    if directory_name='deferred' then fef:=true;
    if directory_name='bounce' then fef:=true;
    if directory_name='defer' then fef:=true;
    if directory_name='trace' then fef:=true;
    if directory_name='maildrop' then fef:=true;
    if directory_name='all' then fef:=true;


  if fef=false then begin
     writeln('must third parameters muste be: all or specific: incoming,active,deferred,bounce,trace,defer or maildrop');
     exit('0');
  end;




    system:=Tsystem.Create;
    filepath:=postfix.POSTFIX_QUEUE_DIRECTORY();


    if directory_name='all' then begin
        count_incoming:=system.DirectoryCountFiles(filepath + '/incoming');
        count_active:=system.DirectoryCountFiles(filepath + '/active');
        count_deferred:=system.DirectoryCountFiles(filepath + '/deferred');
        count_bounce:=system.DirectoryCountFiles(filepath + '/bounce');
        count_defer:=system.DirectoryCountFiles(filepath + '/defer');
        count_trace:=system.DirectoryCountFiles(filepath + '/trace');
        count_maildrop:=system.DirectoryCountFiles(filepath + '/maildrop');


        result:='incoming:' + IntToStr(count_incoming) + CRLF;
        result:=result +  'active:' + IntToStr(count_active) + CRLF;
        result:=result +  'deferred:' + IntToStr(count_deferred) + CRLF;
        result:=result +  'bounce:' + IntToStr(count_bounce) + CRLF;
        result:=result +  'defer:' + IntToStr(count_defer) + CRLF;
        result:=result +  'trace:' + IntToStr(count_trace) + CRLF;
        result:=result +  'maildrop:' + IntToStr(count_maildrop) + CRLF;
        system.free;
        exit();

    end;


    sCount:=system.DirectoryCountFiles(filepath + '/'+directory_name);
    system.Free;
    exit(IntTostr(sCount));
end;

//#############################################################################
function myconf.INYADIN_VERSION():string;
var
   RegExpr        :TRegExpr;
   tmpstring      :string;
begin
   tmpstring:=ExecPipe(get_ARTICA_PHP_PATH()+ '/bin/inadyn --version');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='([0-9\.]+)';
   if RegExpr.Exec(tmpstring) then result:=RegExpr.Match[1];
   RegExpr.free;

end;
//#############################################################################
function MyConf.get_LINUX_DISTRI():string;
var value:string;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=GLOBAL_INI.ReadString('LINUX','distribution-name','');
result:=value;
GLOBAL_INI.Free;
end;
//#############################################################################
function MyConf.get_MANAGE_MAILBOX_SERVER():string;
var value:string;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=GLOBAL_INI.ReadString('COURIER','server-type','cyrus');
result:=value;
GLOBAL_INI.Free;
end;
//#############################################################################
procedure MyConf.set_MANAGE_MAILBOX_SERVER(val:string);
var ini:TIniFile;
begin
ini:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
ini.WriteString('COURIER','server-type',val);
ini.Free;
end;
//#############################################################################
function MyConf.get_DEBUG_DAEMON():boolean;
var value:string;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=GLOBAL_INI.ReadString('LOGS','Debug','0');
if value='0' then result:=False;
if value='1' then result:=True;
GLOBAL_INI.Free;
end;
//#############################################################################
function MyConf.CYRUS_REPLICATION_MINUTES():integer;
var value:integer;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=GLOBAL_INI.ReadInteger('CYRUS','REPLICATE_MIN',0);
if value=0 then begin
   result:=5;
   GLOBAL_INI.WriteInteger('CYRUS','REPLICATE_MIN',5);
end;
result:=value;
GLOBAL_INI.Free;
end;
//#############################################################################
function MyConf.CYRUS_LAST_REPLIC_TIME():integer;
var tDate,tdate2:TDateTime;
value:string;
begin
tdate2:=Now;
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=GLOBAL_INI.ReadString('CYRUS','CYRUS_LAST_REPLIC_TIME','');
if length(value)=0 then begin
        tDate:=Now;
        value:=DateTimeToStr(tdate);
        GLOBAL_INI.WriteDateTime('CYRUS','CYRUS_LAST_REPLIC_TIME',tDate);
end;
if length(value)>0 then begin
   tDate:=StrToDateTime(value);
   result:=Round(MinuteSpan(tDate,tdate2));
end;
   GLOBAL_INI.Free;
end;
//#############################################################################
procedure myconf.CYRUS_RESET_REPLIC_TIME();
var tDate:TDateTime;
begin
   tDate:=now;
   GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
   GLOBAL_INI.WriteDateTime('CYRUS','CYRUS_LAST_REPLIC_TIME',tDate);
   GLOBAL_INI.Free;
end;
//#############################################################################
procedure myconf.KEEPUP2DATE_RESET_REPLIC_TIME();
var tDate:TDateTime;
begin
   tDate:=now;
   GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
   GLOBAL_INI.WriteDateTime('KAV','KEEPUP2DATE_LAST_REPLIC_TIME',tDate);
   GLOBAL_INI.Free;
end;
//#############################################################################
procedure myconf.KAV_RESET_REPLIC_TIME();
var tDate:TDateTime;
begin
   tDate:=now;
   GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
   GLOBAL_INI.WriteDateTime('KAV','LAST_REPLIC_TIME',tDate);
   GLOBAL_INI.Free;
end;
//#############################################################################
function MyConf.KEEPUP2DATE_LAST_REPLIC_TIME():integer;
var tDate,tdate2:TDateTime;
value:string;
begin
tdate2:=Now;
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=GLOBAL_INI.ReadString('KAV','KEEPUP2DATE_LAST_REPLIC_TIME','');
if length(value)=0 then begin
        tDate:=Now;
        value:=DateTimeToStr(tdate);
        GLOBAL_INI.WriteDateTime('KAV','KEEPUP2DATE_LAST_REPLIC_TIME',tDate);
end;
if length(value)>0 then begin
   tDate:=StrToDateTime(value);
   result:=Round(MinuteSpan(tDate,tdate2));
end;
   GLOBAL_INI.Free;
end;
//#############################################################################

function MyConf.KAV_LAST_REPLIC_TIME():integer;
var tDate,tdate2:TDateTime;
value:string;
begin
tdate2:=Now;
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=GLOBAL_INI.ReadString('KAV','LAST_REPLIC_TIME','');
if length(value)=0 then begin
        tDate:=Now;
        value:=DateTimeToStr(tdate);
        GLOBAL_INI.WriteDateTime('KAV','LAST_REPLIC_TIME',tDate);
end;
if length(value)>0 then begin
   tDate:=StrToDateTime(value);
   result:=Round(MinuteSpan(tDate,tdate2));
end;
   GLOBAL_INI.Free;
end;
//#############################################################################
function MyConf.KEEPUP2DATE_REPLICATION_MINUTES():integer;
var value:integer;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=GLOBAL_INI.ReadInteger('KAV','KEEPUP2DATE_REPLICATE_MIN',0);
if value=0 then begin
   result:=60;
   GLOBAL_INI.WriteInteger('KAV','KEEPUP2DATE_REPLICATE_MIN',60);
end;
result:=value;
GLOBAL_INI.Free;
end;
//#############################################################################
function MyConf.KAV_REPLICATION_MINUTES():integer;
var value:integer;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=GLOBAL_INI.ReadInteger('KAV','REPLICATE_MIN',0);
if value=0 then begin
   result:=5;
   GLOBAL_INI.WriteInteger('KAV','REPLICATE_MIN',5);
end;
result:=value;
GLOBAL_INI.Free;
end;
//#############################################################################
function MyConf.get_MANAGE_SASL_TLS():boolean;
var value:string;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=GLOBAL_INI.ReadString('POSTFIX','sasl-tls','0');
if value='0' then result:=False;
if value='1' then result:=True;
GLOBAL_INI.Free;
end;
//#############################################################################
procedure MyConf.set_MANAGE_SASL_TLS(val:boolean);
var ini:TIniFile;
begin
ini:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
if val=True then ini.WriteString('POSTFIX','sasl-tls','1');
if val=False then ini.WriteString('POSTFIX','sasl-tls','0');
ini.Free;
end;
//#############################################################################
function MyConf.get_repositories_librrds_perl():boolean;
var value:string;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=GLOBAL_INI.ReadString('REPOSITORIES','librrds-perl','0');
if value='0' then result:=False;
if value='1' then result:=True;
GLOBAL_INI.Free;
end;
//#############################################################################
function MyConf.ARTICA_AutomaticConfig():boolean;
var value:string;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=GLOBAL_INI.ReadString('ARTICA','AutomaticConfig','no');
if value='no' then result:=False;
if value='yes' then result:=True;
GLOBAL_INI.Free;
end;
//#############################################################################


function MyConf.get_repositories_openssl():boolean;
var value:string;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=GLOBAL_INI.ReadString('REPOSITORIES','openssl','0');
if value='0' then result:=False;
if value='1' then result:=True;
GLOBAL_INI.Free;
end;
//#############################################################################
function MyConf.AVESERVER_GET_VALUE(KEY:string;VALUE:string):string;
begin
  if not FileExists('/etc/kav/5.5/kav4mailservers/kav4mailservers.conf') then exit;
  GLOBAL_INI:=TIniFile.Create('/etc/kav/5.5/kav4mailservers/kav4mailservers.conf');
  result:=GLOBAL_INI.ReadString(KEY,VALUE,'');
  GLOBAL_INI.Free;
end;

//#############################################################################
function MyConf.KAV4PROXY_GET_VALUE(KEY:string;VALUE:string):string;
begin
  if not FileExists('/etc/opt/kaspersky/kav4proxy.conf') then exit;
  GLOBAL_INI:=TIniFile.Create('/etc/opt/kaspersky/kav4proxy.conf');
  result:=GLOBAL_INI.ReadString(KEY,VALUE,'');
  GLOBAL_INI.Free;
end;
//#############################################################################
function MyConf.KAVMILTER_GET_VALUE(KEY:string;VALUE:string):string;
begin
  if not FileExists('/etc/kav/5.6/kavmilter/kavmilter.conf') then exit;
  GLOBAL_INI:=TIniFile.Create('/etc/kav/5.6/kavmilter/kavmilter.conf');
  result:=GLOBAL_INI.ReadString(KEY,VALUE,'');
  GLOBAL_INI.Free;
end;

//#############################################################################

function MyConf.AVESERVER_SET_VALUE(KEY:string;VALUE:string;DATA:string):string;
begin
result:='';
  if not FileExists('/etc/kav/5.5/kav4mailservers/kav4mailservers.conf') then exit;
  GLOBAL_INI:=TIniFile.Create('/etc/kav/5.5/kav4mailservers/kav4mailservers.conf');
  GLOBAL_INI.WriteString(KEY,VALUE,DATA);
  GLOBAL_INI.Free;
end;
//#############################################################################
function MyConf.CROND_INIT_PATH():string;
begin
   if FileExists('/etc/init.d/crond') then exit('/etc/init.d/crond');
   if FileExists('/etc/init.d/cron') then exit('/etc/init.d/cron');
end;

function MyConf.AVESERVER_GET_TEMPLATE_DATAS(family:string;ztype:string):string;
var
   key_name:string;
   file_name:string;
   template:string;
   subject:string;
begin
  if not FileExists('/etc/kav/5.5/kav4mailservers/kav4mailservers.conf') then exit;

  key_name:='smtpscan.notify.' + ztype + '.' + family;
  GLOBAL_INI:=TIniFile.Create('/etc/kav/5.5/kav4mailservers/kav4mailservers.conf');
  file_name:=GLOBAL_INI.ReadString(key_name,'Template','');
  subject:=GLOBAL_INI.ReadString(key_name,'Subject','');

  if not FileExists(file_name) then exit;


  template:=ReadFileIntoString(file_name);



  result:='<subject>' + subject + '</subject><template>' + template + '</template>';


end;
 //#############################################################################

procedure MyConf.AVESERVER_REPLICATE_TEMPLATES();
var phpath,ressources_path:string;
Files:string;
SYS:TSystem;
i:integer;
D:boolean;
RegExpr:TRegExpr;
DirFile:string;
key:string;
begin
  D:=COMMANDLINE_PARAMETERS('debug');
  phpath:=get_ARTICA_PHP_PATH();
  SYS:=TSystem.Create;
  ressources_path:=phpath + '/ressources/conf';
  SYS.DirFiles(ressources_path,'notify_*');
  if SYS.DirListFiles.Count=0 then begin
     SYS.Free;
     exit;
  end;

  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='notify_([a-z]+)_([a-z]+)';
  For i:=0 to SYS.DirListFiles.Count -1 do begin
     if RegExpr.Exec(SYS.DirListFiles.Strings[i]) then begin;
        key:='smtpscan.notify.' + RegExpr.Match[2] + '.' +  RegExpr.Match[1];
        DirFile:=AVESERVER_GET_VALUE(key,'Template');
        Files:=ressources_path + '/' + SYS.DirListFiles.Strings[i];
        if length(DirFile)>0 then begin
           if D then ShowScreen('AVESERVER_REPLICATE_TEMPLATES:: replicate ' + Files + ' to "'+ DirFile + '"');
           fpsystem('/bin/mv ' + Files + ' ' + DirFile);
        end;
     end;

  end;
 RegExpr.Free;
 SYS.Free;


end;
 //#############################################################################


function MyConf.AVESERVER_GET_KEEPUP2DATE_LOGS_PATH():string;
begin
  result:=AVESERVER_GET_VALUE('updater.report','ReportFileName');
end;
 //#############################################################################
function MyConf.AVESERVER_GET_LOGS_PATH():string;
begin
  result:=AVESERVER_GET_VALUE('aveserver.report','ReportFileName');
end;
 //#############################################################################
function MyConf.KAVMILTERD_GET_LOGS_PATH():string;
         var path:string;
begin
  path:=KAVMILTER_GET_VALUE('kavmilter.log','LogFacility');
  if path='syslog' then begin
     if FileExists('/var/log/syslog') then exit('/var/log/syslog');
     exit;
  end;

  exit(KAVMILTER_GET_VALUE('kavmilter.log','LogFilepath'));
end;
 //#############################################################################
function MyConf.KAVMILTERD_GET_LASTLOGS():string;
var
   cmd,grep:string;
begin
  grep:='';
  if KAVMILTER_GET_VALUE('kavmilter.log','LogFacility')='syslog' then grep:='|grep -E "kavmilter\[[0-9]+\]"';
  cmd:='/usr/bin/tail -n 500 ' + KAVMILTERD_GET_LOGS_PATH() + grep + ' '+' >/opt/artica/logs/kavmilter.last.logs';
  logs.logs('KAVMILTERD_GET_LASTLOGS:: ' + cmd);
  fpsystem(cmd);
  result:=ReadFileIntoString('/opt/artica/logs/kavmilter.last.logs');

end;


 //#############################################################################
function MyConf.AVESERVER_GET_DAEMON_PORT():string;
var
   master_cf:Tstringlist;
   RegExpr:TRegExpr;
   i:integer;
   master_line:string;
begin
    master_cf:=TStringList.create;
    master_cf.LoadFromFile(postfix.POSFTIX_MASTER_CF_PATH());
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='user=kluser\s+argv=\/opt\/kav\/.+';
    for i:=0 to master_cf.Count-1 do begin
        if RegExpr.Exec(master_cf.Strings[i]) then begin
                   master_line:=master_cf.Strings[i-1];
        end;
    end;

    RegExpr.Expression:='^.+:([0-9]+)\s+inet';
    if RegExpr.Exec(master_line) then result:=RegExpr.Match[1];
    RegExpr.Free;
    master_cf.free;


end;
 //#############################################################################

function MyConf.AVESERVER_GET_PID():string;
var pidpath:string;
begin
  pidpath:=AVESERVER_GET_VALUE('path','AVSpidPATH');
  if length(pidpath)=0 then exit;
  result:=trim(ReadFileIntoString(pidpath));
end;
//#############################################################################
function MyConf.KAVMILTER_GET_VERSION():string;
begin
     result:=AVESERVER_GET_VERSION();
end;
//#############################################################################
function MyConf.AVESERVER_GET_VERSION():string;
var licensemanager,datas:string;
   RegExpr:TRegExpr;
   D:boolean;
begin
 D:=COMMANDLINE_PARAMETERS('debug');
if D then LOGS.logs('AVESERVER_GET_VERSION:: IS there any kasprsky here ???');

    if FileExists('/opt/kav/5.6/kavmilter/bin/kavmilter') then begin
         datas:=ExecPipe('/opt/kav/5.6/kavmilter/bin/kavmilter -v');
         RegExpr:=TRegExpr.Create();
         RegExpr.expression:='([0-9\.]+)';
         if RegExpr.Exec(datas) then begin
            result:=RegExpr.Match[1];
         end;
         RegExpr.Free;
         exit;
    end;


    if not FileExists('/etc/init.d/aveserver') then exit;
    licensemanager:='/opt/kav/5.5/kav4mailservers/bin/licensemanager';
    if not FileExists(licensemanager) then exit;
    datas:=ExecPipe('/opt/kav/5.5/kav4mailservers/bin/aveserver -v');
    RegExpr:=TRegExpr.Create();
    RegExpr.expression:='([0-9\.]+).+RELEASE.+build.+#([0-9]+)';

    if RegExpr.Exec(datas) then begin
       if Debug=true then LOGS.logs('MyConf.ExportLicenceInfos -> ' + RegExpr.Match[1] + ' build ' + RegExpr.Match[2]);
        result:=RegExpr.Match[1] + ' build ' + RegExpr.Match[2];
     end;

     if not RegExpr.Exec(datas) then begin
         if Debug=true then LOGS.logs('MyConf.ExportLicenceInfos -> unable to catch version');
    end;
     RegExpr.Free;

end;
//##############################################################################
function MyConf.AVESERVER_GET_LICENCE():string;
var licensemanager:string;
begin
    if not FileExists('/etc/init.d/aveserver') then exit;
    licensemanager:='/opt/kav/5.5/kav4mailservers/bin/licensemanager';
    if not FileExists(licensemanager) then exit;
    result:=ExecPipe(licensemanager + ' -s');
end;
//##############################################################################


function MyConf.get_repositories_Checked():boolean;
var value:string;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=GLOBAL_INI.ReadString('REPOSITORIES','Checked','0');
if value='0' then result:=False;
if value='1' then result:=True;
GLOBAL_INI.Free;
end;

//#############################################################################
function MyConf.set_repositories_checked(val:boolean):string;
var ini:TIniFile;
begin
result:='';
ini:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
if val=True then ini.WriteString('REPOSITORIES','Checked','1');
if val=False then ini.WriteString('REPOSITORIES','Checked','0');
ini.Free;
end;
//#############################################################################
function MyConf.get_kaspersky_mailserver_smtpscanner_logs_path():string;
begin
GLOBAL_INI:=TIniFile.Create('/etc/kav/5.5/kav4mailservers/kav4mailservers.conf');
result:=GLOBAL_INI.ReadString('smtpscan.report','ReportFileName','/var/log/kav/5.5/kav4mailservers/smtpscanner.log');
GLOBAL_INI.Free;
end;
//#############################################################################

procedure MyConf.set_MYSQL_INSTALLED(val:boolean);
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
if val=True then GLOBAL_INI.WriteString('LINUX','MYSQL_INSTALLED','1');
if val=False then GLOBAL_INI.WriteString('LINUX','MYSQL_INSTALLED','0');
GLOBAL_INI.Free;
end;
function MyConf.get_MYSQL_INSTALLED():boolean;
var value:string;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
value:=GLOBAL_INI.ReadString('LINUX','MYSQL_INSTALLED','0');
if value='0' then result:=False;
if value='1' then result:=True;
GLOBAL_INI.Free;
end;
function MyConf.get_POSTFIX_DATABASE():string;
var xres:string;
begin
result:='ldap';
exit;
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
xres:=GLOBAL_INI.ReadString('INSTALL','POSTFIX_DATABASE','hash');
if length(xres)=0 then xres:='ldap';
result:='ldap';
GLOBAL_INI.Free;
end;
function MyConf.get_MANAGE_MAILBOXES():string;
begin
result:='';
if not fileExists('/etc/artica-postfix/artica-postfix.conf') then begin
    if debug then writeln('unable to stat /etc/artica-postfix/artica-postfix.conf');
    exit;
end;
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
result:=GLOBAL_INI.ReadString('ARTICA','MANAGE_MAILBOXES','');
result:=trim(result);
if length(result)=0 then begin
    result:=GLOBAL_INI.ReadString('INSTALL','MANAGE_MAILBOXES','');
    if length(result)>0 then GLOBAL_INI.WriteString('ARTICA','MANAGE_MAILBOXES',result);
end;
result:=trim(result);
if length(result)=0 then result:='no';
if result='FALSE' then result:='no';
if result='TRUE' then result:='yes';
if debug then writeln('get_MANAGE_MAILBOXES=' + result);
GLOBAL_INI.Free;
end;
function MyConf.set_POSTFIX_DATABASE(val:string):string;
begin
result:='';
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
 GLOBAL_INI.WriteString('INSTALL','POSTFIX_DATABASE',val);
GLOBAL_INI.Free;
end;
function MyConf.set_MANAGE_MAILBOXES(val:string):string;
begin
result:='';
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
 GLOBAL_INI.WriteString('ARTICA','MANAGE_MAILBOXES',val);
GLOBAL_INI.Free;
end;

function MyConf.set_INSTALL_PATH(val:string):string;
begin
result:='';
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
 GLOBAL_INI.WriteString('INSTALL','INSTALL_PATH',val);
GLOBAL_INI.Free;
end;
function MyConf.get_INSTALL_PATH():string;
begin
result:='';
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
result:=GLOBAL_INI.ReadString('INSTALL','INSTALL_PATH','');
GLOBAL_INI.Free;
end;


function MyConf.set_DISTRI(val:string):string;
begin
result:='';
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
 GLOBAL_INI.WriteString('LINUX','DISTRI',val);
GLOBAL_INI.Free;
end;
function MyConf.get_DISTRI():string;
begin
result:='';
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
result:=GLOBAL_INI.ReadString('LINUX','DISTRI','');
GLOBAL_INI.Free;
end;
function MyConf.get_UPDATE_TOOLS():string;
begin
result:='';
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
result:=GLOBAL_INI.ReadString('LINUX','UPDATE_TOOLS','');
GLOBAL_INI.Free;
end;
//##################################################################################
function MyConf.set_UPDATE_TOOLS(val:string):string;
begin
result:='';
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
 GLOBAL_INI.WriteString('LINUX','UPDATE_TOOLS',val);
GLOBAL_INI.Free;
end;
//##################################################################################
function MyConf.get_ARTICA_PHP_PATH():string;
var path:string;
begin
  if not DirectoryExists('/usr/share/artica-postfix') then begin
  path:=ParamStr(0);
  path:=ExtractFilePath(path);
  path:=AnsiReplaceText(path,'/bin/','');
  exit(path);
  end else begin
  exit('/usr/share/artica-postfix');
  end;

end;
//##################################################################################
function MyConf.set_ARTICA_PHP_PATH(val:string):string;
begin
result:='';
if length(val)=0 then exit;
TRY
   GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
   GLOBAL_INI.WriteString('ARTICA','PHP_PATH',val);
   GLOBAL_INI.Free;
EXCEPT
  writeln('FATAL ERROR set_ARTICA_PHP_PATH function !!!');
end;
end;
//##################################################################################
function MyConf.get_ARTICA_LOCAL_PORT():integer;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
result:=GLOBAL_INI.ReadInteger('ARTICA','LOCALPORT',0);

if result=0 then begin
   result:=47979;
   GLOBAL_INI.WriteInteger('ARTICA','LOCALPORT',47979);
end;

    GLOBAL_INI.Free

end;
function MyConf.get_ARTICA_LOCAL_SECOND_PORT():integer;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
result:=GLOBAL_INI.ReadInteger('ARTICA','SECOND_LOCAL_PORT',0);
GLOBAL_INI.Free;
end;
procedure MyConf.SET_ARTICA_LOCAL_SECOND_PORT(val:integer);
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
GLOBAL_INI.WriteInteger('ARTICA','SECOND_LOCAL_PORT',val);
GLOBAL_INI.Free;
end;
function MyConf.get_ARTICA_LISTEN_IP():string;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
result:=GLOBAL_INI.ReadString('ARTICA','LISTEN_IP','0.0.0.0');
GLOBAL_INI.Free;
end;
//##################################################################################
function MyConf.POSTFIX_EXTRAINFOS_PATH(filename:string):string;
begin
if not FileExists('/etc/artica-postfix/postfix-extra.conf') then exit;
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/postfix-extra.conf');
result:=GLOBAL_INI.ReadString('POSTFIX',filename,'');
GLOBAL_INI.Free;
end;
//##################################################################################
function MyConf.get_ARTICA_DAEMON_LOG_MaxSizeLimit():integer;
begin
result:=0;
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
result:=GLOBAL_INI.ReadInteger('ARTICA','DAEMON_LOG_MAX_SIZE',1000);
GLOBAL_INI.Free;
end;
//##################################################################################
function MyConf.set_ARTICA_DAEMON_LOG_MaxSizeLimit(val:integer):integer;
begin
result:=0;
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
 GLOBAL_INI.WriteInteger('ARTICA','DAEMON_LOG_MAX_SIZE',val);
GLOBAL_INI.Free;
end;
//##################################################################################
function MyConf.get_POSTFIX_HASH_FOLDER():string;
begin
result:='';
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
result:=GLOBAL_INI.ReadString('POSTFIX','HASH_FOLDER','/etc/postfix/hash_files');
GLOBAL_INI.Free;
end;
//##################################################################################
function MyConf.set_POSTFIX_HASH_FOLDER(val:string):string;
begin
result:='';
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
 GLOBAL_INI.WriteString('POSTFIX','HASH_FOLDER',val);
GLOBAL_INI.Free;
end;
//##############################################################################
procedure MyConf.CYRUS_SET_V2(val:string);
begin
     GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
     GLOBAL_INI.WriteString('CYRUS','CYRUS_SET_V2',val);
     GLOBAL_INI.Free;
end;
//##############################################################################
function MyConf.CYRUS_GET_V2():string;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
result:=GLOBAL_INI.ReadString('CYRUS','CYRUS_SET_V2','no');
GLOBAL_INI.Free;
end;
//##############################################################################

function Myconf.KAS_GET_VALUE(key:string):string;
var
   RegExpr,RegExpr2:TRegExpr;
   filter_conf:TstringList;
   i:integer;
begin
  if not fileexists('/usr/local/ap-mailfilter3/etc/filter.conf') then exit;
  filter_conf:=TstringList.Create;
  filter_conf.LoadFromFile('/usr/local/ap-mailfilter3/etc/filter.conf');
  RegExpr:=TRegExpr.Create;
  RegExpr2:=TRegExpr.Create;
  RegExpr2.Expression:='#';
  RegExpr.Expression:=key + '(.+)';
  for i:=0 to filter_conf.Count -1 do begin
        if not RegExpr2.Exec(filter_conf.Strings[i]) then begin
            if  RegExpr.Exec(filter_conf.Strings[i]) then begin
                result:=trim(RegExpr.Match[1]);
                break;
            end;
        end;
  end;

  RegExpr.Free;
  RegExpr2.Free;
  filter_conf.Free;

end;
//##############################################################################
procedure Myconf.KAS_DELETE_VALUE(key:string);
var
   RegExpr,RegExpr2:TRegExpr;
   filter_conf:TstringList;
   i:integer;

begin
    if not fileexists('/usr/local/ap-mailfilter3/etc/filter.conf') then exit;
  filter_conf:=TstringList.Create;
  filter_conf.LoadFromFile('/usr/local/ap-mailfilter3/etc/filter.conf');
  RegExpr:=TRegExpr.Create;
  RegExpr2:=TRegExpr.Create;
  RegExpr2.Expression:='#';
  RegExpr.Expression:=key + '(.+)';
 for i:=0 to filter_conf.Count -1 do begin
        if not RegExpr2.Exec(filter_conf.Strings[i]) then begin
            if  RegExpr.Exec(filter_conf.Strings[i]) then begin
                filter_conf.Delete(i);
                filter_conf.SaveToFile('/usr/local/ap-mailfilter3/etc/filter.conf');
                break;
            end;
        end;
  end;
  filter_conf.Free;
  RegExpr2.Free;
  RegExpr.free;

end;


//##############################################################################
procedure Myconf.KAS_WRITE_VALUE(key:string;datas:string);
var
   RegExpr,RegExpr2:TRegExpr;
   filter_conf:TstringList;
   i:integer;
   found:boolean;
begin
  found:=false;
  if not fileexists('/usr/local/ap-mailfilter3/etc/filter.conf') then exit;
  filter_conf:=TstringList.Create;
  filter_conf.LoadFromFile('/usr/local/ap-mailfilter3/etc/filter.conf');
  RegExpr:=TRegExpr.Create;
  RegExpr2:=TRegExpr.Create;
  RegExpr2.Expression:='#';
  RegExpr.Expression:=key + '(.+)';
  for i:=0 to filter_conf.Count -1 do begin
        if not RegExpr2.Exec(filter_conf.Strings[i]) then begin
            if  RegExpr.Exec(filter_conf.Strings[i]) then begin
                filter_conf.Strings[i]:=key + ' ' + datas;
                filter_conf.SaveToFile('/usr/local/ap-mailfilter3/etc/filter.conf');
                found:=True;
                break;
            end;
        end;
  end;

  if found=false then begin
          filter_conf.Add(key + ' ' + datas);
          filter_conf.SaveToFile('/usr/local/ap-mailfilter3/etc/filter.conf');
  end;


  RegExpr.Free;
  RegExpr2.Free;
  filter_conf.Free;

end;

//##############################################################################

function myconf.LDAP_GET_DAEMON_USERNAME():string;
   var get_ldap_user,get_ldap_user_regex:string;
   RegExpr:TRegExpr;
   FileDatas:TStringList;
   i:integer;
begin
       get_ldap_user_regex:=LINUX_LDAP_INFOS('get_ldap_user_regex');
       get_ldap_user:=LINUX_LDAP_INFOS('get_ldap_user');

       if length(get_ldap_user)=0 then begin
           writeln('LDAP_GET_USERNAME::unable to give infos from get_ldap_user key in infos.conf');
           exit;
       end;

       if length(get_ldap_user_regex)=0 then begin
           writeln('LDAP_GET_USERNAME::unable to give infos from get_ldap_user_regex key in infos.conf');
           exit;
       end;

       if not FileExists(get_ldap_user) then begin
          writeln('LDAP_GET_USERNAME::There is a problem to stat ',get_ldap_user);
          exit;
       end;
      FileDatas:=TStringList.Create;
      RegExpr:=TRegExpr.Create;
      RegExpr.Expression:=get_ldap_user_regex;
      FileDatas.LoadFromFile(get_ldap_user);
      for i:=0 to FileDatas.Count-1 do begin
          if RegExpr.Exec(FileDatas.Strings[i]) then begin
             result:=RegExpr.Match[1];
             RegExpr.Free;
             FileDatas.free;
             exit;
          end;

      end;
end;



function myconf.LDAP_INITD():string;
begin
    if FileExists('/etc/init.d/slapd') then exit('/etc/init.d/slapd');
    if FileExists('/etc/init.d/ldap') then exit('/etc/init.d/ldap');

end;
//##############################################################################
function myconf.CROSSROADS_VERSION():string;
var
   RegExpr:TRegExpr;
   FileS:TstringList;
begin
    if not FileExists('/opt/artica/bin/crossroads') then exit;
    fpsystem('/opt/artica/bin/crossroads -V >/opt/artica/logs/crossroads.version.tmp');
    if not FileExists('/opt/artica/logs/crossroads.version.tmp') then exit;

    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='([0-9\.]+)';
    FileS:=TstringList.Create;
    FileS.LoadFromFile('/opt/artica/logs/crossroads.version.tmp');
    if RegExpr.Exec(FileS.Text) then result:=RegExpr.Match[1];
    RegExpr.Free;
    FileS.free;
end;
//##############################################################################
function myconf.IPTABLES_PATH():string;
begin
  if FileExists('/sbin/iptables') then exit('/sbin/iptables');
  if FileExists('/usr/sbin/iptables') then exit('/usr/sbin/iptables');
  if FileExists('/usr/local/sbin/iptables') then exit('/usr/local/sbin/iptables');
  if FileExists('/usr/local/bin/iptables') then exit('/usr/local/bin/iptables');
  if FileExists('/bin/iptables') then exit('/bin/iptables');
  exit(get_INFOS('iptables_path'));
end;
//##############################################################################
function myconf.IPTABLES_VERSION():string;
var
   RegExpr:TRegExpr;
   FileS:TstringList;
   i:integer;
begin
     if not FileExists(IPTABLES_PATH()) then exit;
     fpsystem(IPTABLES_PATH() + ' --version >/opt/artica/tmp/iptables.ver');
     if not FileExists('/opt/artica/tmp/ipatbles.ver') then exit;
     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='v([0-9\.]+)';
     FileS:=TstringList.Create;
     try
     Files.LoadFromFile('/opt/artica/logs/ipatbles.ver');
     DeleteFile('/opt/artica/tmp/iptables.ver');
     For i:=0 to files.Count-1 do begin
         if RegExpr.Exec(FileS.Strings[i]) then begin
            result:=RegExpr.Match[1];
            RegExpr.free;
            files.free;
            exit;
         end;
     end;
     finally
     Files.Free;
     end;

end;
//##############################################################################
function myconf.MAILFROMD_PATH():string;
begin
     if fileExists('/usr/local/sbin/mailfromd') then exit('/usr/local/sbin/mailfromd');
     if FileExists('/opt/artica/sbin/mailfromd') then exit('/opt/artica/sbin/mailfromd');
end;
//##############################################################################
function myconf.MAILFROMD_VALUES(key:string):string;
var
   l:TstringList;
   RegExpr:TRegExpr;
   i:Integer;
   logs:Tlogs;
begin
     logs:=Tlogs.Create;
     if not fileExists(MAILFROMD_PATH()) then exit;
     if not FileExists('/opt/artica/logs/mailfromd.tmp') then begin
            logs.logs(MAILFROMD_PATH() + ' --show-defaults >/opt/artica/logs/mailfromd.tmp 2>&1');
            fpsystem(MAILFROMD_PATH() + ' --show-defaults >/opt/artica/logs/mailfromd.tmp 2>&1');
     end;
if FileExists('/opt/artica/logs/mailfromd.tmp') then begin
     l:=TStringList.Create;
     l.LoadFromFile('/opt/artica/logs/mailfromd.tmp');
     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='^'+key+':\s+(.+)';
     for i:=0 to l.count-1 do begin
         if RegExpr.Exec(l.Strings[i]) then begin
              result:=RegExpr.Match[1];
              RegExpr.Expression:='unix:(.+)';
              if RegExpr.Exec(result) then result:=RegExpr.Match[1];
              break;
         end;
     end;
     l.Free;
     RegExpr.free;
     if SYSTEM_FILE_MIN_BETWEEN_NOW('/opt/artica/logs/mailfromd.tmp')>240 then begin
        logs.logs('Delete file /opt/artica/logs/mailfromd.tmp');
        DeleteFile('/opt/artica/logs/mailfromd.tmp');
     end;
     
    end;
     
end;
//##############################################################################


procedure myconf.MAILFROMD_START();
var
   logs:Tlogs;
   ck:integer;
   user:string;
   socket_path:string;
   pidfile:string;
begin
  ck:=0;

  logs:=Tlogs.Create;
  if not FileExists(postfix.POSFTIX_POSTCONF_PATH()) then exit;
  if not FileExists(MAILFROMD_PATH()) then begin
     logs.Debuglogs('MAILFROMD_START:: mailfromd does not exists...');
     exit;
  end;
  if Get_INFOS('MailfromdStop')='1' then begin
     logs.Debuglogs('MAILFROMD_START:: mailfromd is disabled,token MailfromdStop waiting synchronization...');
     exit;
  end;
  
  if get_INFOS('MailFromdEnabled')<>'1' then begin
     logs.Debuglogs('MAILFROMD_START:: mailfromd is disabled token MailFromdEnabled=' + get_INFOS('MailFromdEnabled')+'<>1' );
     exit;
  end;
  pidfile:=MAILFROMD_VALUES('pidfile');
  user:=MAILFROMD_VALUES('user');
  socket_path:=ExtractFilePath(MAILFROMD_VALUES('socket'));
  forceDirectories(socket_path);
  forceDirectories(ExtractFilePath(pidfile));
  
  logs.Debuglogs('MAILFROMD_START:: pidfile.....:'+pidfile);
  logs.Debuglogs('MAILFROMD_START:: socket_path.:'+socket_path);
  logs.Debuglogs('MAILFROMD_START:: user........:'+user);
  
  fpsystem('/bin/chown -R '+user+':'+user+' '+ExtractFilePath(pidfile));
  fpsystem('/bin/chown -R '+user+':'+user+' '+socket_path);


if FileExists('/opt/artica/sbin/mailfromd') then begin
  if not FileExists('/lib/libmucfg.so.0') then begin
     fpsystem('/bin/ln -s /opt/artica/lib/libmucfg.so.0 /lib/libmucfg.so.0');
  end;

 if not FileExists('/lib/libmu_maildir.so.2') then begin
     fpsystem('/bin/ln -s /opt/artica/lib/libmu_maildir.so.2 /lib/libmu_maildir.so.2');
  end;

 if not FileExists('/lib/libmu_imap.so.2') then begin
     fpsystem('/bin/ln -s /opt/artica/lib/libmu_imap.so.2 /lib/libmu_imap.so.2');
  end;

 if not FileExists('/lib/libmu_pop.so.2') then begin
     fpsystem('/bin/ln -s /opt/artica/lib/libmu_pop.so.2 /lib/libmu_pop.so.2');
  end;

 if not FileExists('/lib/libmu_nntp.so.2') then begin
     fpsystem('/bin/ln -s /opt/artica/lib/libmu_nntp.so.2 /lib/libmu_nntp.so.2');
  end;


 if not FileExists('/lib/libmu_mailer.so.2') then begin
     fpsystem('/bin/ln -s /opt/artica/lib/libmu_mailer.so.2 /lib/libmu_mailer.so.2');
  end;

 if not FileExists('/lib/libsieve.so.2') then begin
     fpsystem('/bin/ln -s /opt/artica/lib/libsieve.so.2 /lib/libsieve.so.2');
  end;

 if not FileExists('/lib/libmu_mbox.so.2') then begin
     fpsystem('/bin/ln -s /opt/artica/lib/libmu_mbox.so.2 /lib/libmu_mbox.so.2');
  end;

 if not FileExists('/lib/libmu_mh.so.2') then begin
     fpsystem('/bin/ln -s /opt/artica/lib/libmu_mh.so.2 /lib/libmu_mh.so.2');
  end;

 if not FileExists('/lib/libmailutils.so.2') then begin
     fpsystem('/bin/ln -s /opt/artica/lib/libmailutils.so.2 /lib/libmailutils.so.2');
  end;

 if not FileExists('/lib/libmailutils.so.2') then begin
     fpsystem('/bin/ln -s /opt/artica/lib/libmailutils.so.2 /lib/libmailutils.so.2');
  end;

 if not FileExists('/lib/libmuauth.so.2') then begin
     fpsystem('/bin/ln -s /opt/artica/lib/libmuauth.so.2 /lib/libmuauth.so.2');
  end;
  
 end;

if SYSTEM_PROCESS_EXIST(MAILFROMD_PID()) then begin
     logs.DebugLogs('Starting......: mailfromd is already running using PID ' + MAILFROMD_PID() + '...');
     exit();
end;
  fpsystem(MAILFROMD_PATH()+ ' --remove');
 while not SYSTEM_PROCESS_EXIST(MAILFROMD_PID()) do begin
           sleep(100);
           inc(ck);
           if ck>40 then begin
                if ExtractFileName(ParamStr(0))<>'process1' then  begin
                   logs.DebugLogs('Starting......: mailfromd failed !!!');
                   logs.Syslogs('Failed to start mailfromd');
                   logs.DebugLogs('Starting......: ' +MAILFROMD_PATH());
                   set_INFOS('MailfromdStop','1');
                   exit;
                end;
           end;
     end;
     logs.DebugLogs('Starting......: mailfromd server with new pid ' + MAILFROMD_PID() + ' PID...');



end;

function myconf.MAILFROMD_STOP():string;
var
count:integer;
begin
  result:='';
  count:=0;
  if SYSTEM_PROCESS_EXIST(MAILFROMD_PID()) then begin
     writeln('Stopping mailfromd...........: ' + MAILFROMD_PID() + ' PID');
     fpsystem('/bin/kill ' +MAILFROMD_PID() );
     while SYSTEM_PROCESS_EXIST(MAILFROMD_PID()) do begin
           Inc(count);
           sleep(100);
           if count>20 then begin
                  writeln('killing mailfromd............: ' + MAILFROMD_PID() + ' PID (timeout)');
                  fpsystem('/bin/kill -9 ' + MAILFROMD_PID());
                  break;
           end;
     end;
  end else begin
      writeln('Stopping mailfromd...........: Already stopped');
  end;

end;
//##############################################################################





procedure myconf.AMAVISD_STOP();
var
count:integer;
D:boolean;
begin
  d:=COMMANDLINE_PARAMETERS('debug');
  count:=0;
  if Not FileExists('/opt/artica/bin/amavisd') then exit;
  if SYSTEM_PROCESS_EXIST(AMAVISD_PID()) then begin
     writeln('Stopping amavisd-new.........: ' + AMAVISD_PID() + ' PID');
     if D then writeln('/opt/artica/bin/amavisd -c /opt/artica/etc/amavis/amavisd.conf -P /var/run/amavisd/amavis-artica.pid stop');
     fpsystem('/opt/artica/bin/amavisd -c /opt/artica/etc/amavis/amavisd.conf -P /var/run/amavisd/amavis-artica.pid stop');
     while SYSTEM_PROCESS_EXIST(AMAVISD_PID()) do begin
           Inc(count);
           sleep(100);
           write('.');
           if count>200 then begin
                  writeln('killing amavisd-new..........: ' + AMAVISD_PID() + ' PID (timeout)');
                  fpsystem('/bin/kill -9 ' + AMAVISD_PID());
                  break;
           end;
     end;
  end else begin
      writeln('Stopping amavisd-new.........: Already stopped');
  end;

  AMAVISD_PF_STOP();

end;
//##############################################################################
function MyConf.MYSQL_MYSQLD_BIN_PATH():string;
begin
if fileExists('/usr/sbin/mysqld') then exit ('/usr/sbin/mysqld');
if FileExists('/opt/artica/mysql/libexec/mysqld') then exit('/opt/artica/mysql/libexec/mysqld');
if FileExists('/usr/libexec/mysqld') then exit('/usr/libexec/mysqld');
end;
//##############################################################################
function MyConf.MYSQL_ARTICA_START_CMDLINE():string;
var
   cmd       :string;
   Port      :string;
   pidfile   :string;
   bindaddr  :string;
   datadir   :string;
begin

if not FileExists(MYSQL_MYSQLD_BIN_PATH()) then begin
   logs.Debuglogs('MYSQL_ARTICA_START_CMDLINE:: MYSQL is not installed...');
   exit;
end;

  port    :=MYSQL_PORT();
  bindaddr:=MYSQL_SERVER_PARAMETERS_CF('bind-address');
  pidfile :=MYSQL_SERVER_PARAMETERS_CF('pid-file');
  datadir :=MYSQL_SERVER_PARAMETERS_CF('datadir');


cmd:=MYSQL_MYSQLD_BIN_PATH()+' --defaults-file=/opt/artica/mysql/etc/my.cnf --basedir=/opt/artica/mysql ';
cmd:=cmd + ' --datadir=' + datadir;
cmd:=cmd + ' --user=artica';
cmd:=cmd + ' --log-error=/opt/artica/logs/artica-sql/mysql.err';
cmd:=cmd + ' --pid-file=' +pidfile;
cmd:=cmd + ' --port=' + port + ' --bind-address=' + bindaddr + ' &';
result:=cmd;

end;
//##############################################################################
procedure MyConf.MYSQL_INIT_ERROR();
var
   RegExpr:TRegExpr;
   l:TstringList;
   i:integer;
begin
   if not FileExists('/opt/artica/logs/mysql.init') then exit;
   
   l:=TstringList.Create;
   l.LoadFromFile('/opt/artica/logs/mysql.init');
   RegExpr:=tRegExpr.Create;

   for i:=0 to l.Count-1 do begin
       RegExpr.Expression:='Too many connections';
       if RegExpr.Exec(l.Strings[i]) then begin
            set_INFOS('MysqlTooManyConnections','1');
            break;
       end;
   end;

  RegExpr.free;
  l.free;


end;


//##############################################################################
procedure MyConf.MYSQL_ARTICA_START();
var
   cmd,pid   :string;
   logs  :Tlogs;
   i     :integer;
   D:boolean;
   SYS:Tsystem;
   l:TstringList;
   Reconfigure:boolean;
   datadir:string;
begin
logs:=Tlogs.Create;
D:=false;
D:=COMMANDLINE_PARAMETERS('debug');
i:=0;
Reconfigure:=false;
if not FileExists(MYSQL_MYSQLD_BIN_PATH()) then begin
   logs.DebugLogs('MYSQL_ARTICA_START:: Mysql is not installed, abort');
   exit;
end;


if Get_INFOS('MysqlTooManyConnections')='1' then begin
    logs.DebugLogs('MYSQL_START......: Mysql MysqlTooManyConnections=1, abort');
    exit;
end;

if SYSTEM_PROCESS_EXIST(MYSQL_ARTICA_PID()) then begin
     logs.DebugLogs('MYSQL_ARTICA_START:: Mysql is already running using PID ' + MYSQL_ARTICA_PID() + '...');
     exit();
  end;
  
  
if FileExists(MYSQL_INIT_PATH()) then begin
   datadir:=MYSQL_SERVER_PARAMETERS_CF('datadir');
   

   logs.DebugLogs('MYSQL_ARTICA_START:: my.cnf........:' +MYSQL_MYCNF_PATH());
   logs.DebugLogs('MYSQL_ARTICA_START:: init.d........:' +MYSQL_INIT_PATH());
   logs.DebugLogs('MYSQL_ARTICA_START:: Pid path......:' +MYSQL_SERVER_PARAMETERS_CF('pid-file'));
   logs.DebugLogs('MYSQL_ARTICA_START:: datadir.......:' +datadir);
   logs.OutputCmd('/bin/chown -R mysql:mysql '+datadir);
   forcedirectories('/var/run/mysqld');
   logs.OutputCmd('/bin/chown -R mysql:mysql /var/run/mysqld');


   fpsystem(MYSQL_INIT_PATH() + ' start >/opt/artica/logs/mysql.init 2>&1');
   logs.Debuglogs(logs.ReadFromFile('/opt/artica/logs/mysql.init'));
   MYSQL_INIT_ERROR();
   exit;
end;





     SYS:=Tsystem.Create();
     SYS.AddUserToGroup('artica','artica','','');
   forcedirectories('/opt/artica/logs/artica-sql');
   forcedirectories('/opt/artica/mysql/mysql/data');
   forcedirectories('/opt/artica/mysql/mysql-data');
   forcedirectories('/var/run/artica-sql');
   fpsystem('/bin/chown -R artica:artica /opt/artica/mysql');
   fpsystem('/bin/chmod -R 0755 /opt/artica/logs/artica-sql');
   fpsystem('/bin/chmod 0755 /var/run/artica-sql');
   fpsystem('/bin/chown -R artica:artica /var/run/artica-sql');
   fpsystem('/bin/chmod -R 0755 /var/run/artica-sql');
   fpsystem('/bin/chown -R artica:artica /opt/artica/mysql/share/mysql');
   fpsystem('/bin/chown -R artica:artica /opt/artica/logs/artica-sql');
   fpsystem('/bin/chmod -R 0755 /opt/artica/logs/artica-sql');
   fpsystem('/bin/chown artica:artica /opt/artica/mysql/mysql-data');

   l:=TstringList.Create;
   l.Add('/opt/artica/mysql/mysql-data/mysql/columns_priv.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/db.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/event.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/func.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/general_log.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/help_category.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/help_keyword.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/help_relation.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/help_topic.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/host.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/ndb_binlog_index.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/plugin.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/proc.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/procs_priv.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/servers.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/slow_log.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/tables_priv.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/time_zone.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/time_zone_leap_second.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/time_zone_name.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/time_zone_transition.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/time_zone_transition_type.frm');
   l.Add('/opt/artica/mysql/mysql-data/mysql/user.frm');

   for i:=0 to l.Count-1 do begin
       if not FileExists(l.Strings[i]) then begin
            Reconfigure:=True;
            logs.DebugLogs('Starting......: Mysql artica unable to stat ' + l.Strings[i]);
            break;


       end;

   end;

  if Reconfigure then begin
      fpsystem(get_ARTICA_PHP_PATH() + '/bin/artica-install -mysql-reconfigure');
      exit;
  end;


  pid:=trim(SYSTEM_PROCESS_LIST_PID('/opt/artica/mysql/libexec/mysqld'));
  if D then writeln('SYSTEM_PROCESS_LIST_PID report pids : ',pid);
  if length(pid)>0 then begin
       fpsystem('/bin/kill ' + pid);
       sleep(1000);
  end;


  cmd:=MYSQL_ARTICA_START_CMDLINE();
  logs.logs('starting artica mysql with ' + cmd);
  if D then writeln('executing mysql with');
  logs.mysql_logs('2','2','Start mysql with "'+cmd +'"');
  if d then writeln(cmd);
  fpsystem(cmd);
  while not SYSTEM_PROCESS_EXIST(MYSQL_ARTICA_PID()) do begin
        sleep(100);
           inc(i);
           if i>40 then begin
                logs.DebugLogs('Starting......: Mysql artica failed !!!');
                logs.mysql_logs('2','0','Failed starting mysql daemon');
                logs.DebugLogs(cmd);


                pid:=trim(SYSTEM_PROCESS_LIST_PID('/opt/artica/mysql/libexec/mysqld'));
                if length(pid)>0 then begin
                   fpsystem('/bin/kill ' + pid);
                   sleep(1000);
                end;
                exit;
           end;
  end;
  logs.DebugLogs('Starting......: Mysql artica with new PID ' + MYSQL_ARTICA_PID() + '...');
  logs.mysql_logs('2','1','success starting mysql daemon PID ' + MYSQL_ARTICA_PID());
  logs.Debuglogs('->MYSQL_RECONFIGURE_DB()');
  MYSQL_RECONFIGURE_DB();
end;
//############################################################################# #
procedure myconf.MYSQL_ARTICA_STOP();
var pid:string;
count:integer;
D:boolean;
begin
  if not FileExists(MYSQL_MYSQLD_BIN_PATH()) then exit;
  d:=COMMANDLINE_PARAMETERS('debug');
  pid:=MYSQL_ARTICA_PID();
  count:=0;
  if SYSTEM_PROCESS_EXIST(pid) then begin
      if FileExists(MYSQL_INIT_PATH()) then begin
            writeln('Stopping Mysql pid....: ' + MYSQL_ARTICA_PID() + ' PID...');
            fpsystem(MYSQL_INIT_PATH() + ' stop');
            
            while SYSTEM_PROCESS_EXIST(MYSQL_ARTICA_PID()) do begin
                  Inc(count);
                  sleep(100);
                  if count>60 then begin
                     writeln('killing Mysql artica.........: ' + MYSQL_ARTICA_PID() + ' PID.. (timeout)');
                     fpsystem('/bin/kill -9 ' + MYSQL_ARTICA_PID());
                     break;
                  end;
            end;
      end;
  end;


      
  pid:=trim(SYSTEM_PROCESS_LIST_PID(MYSQL_MYSQLD_BIN_PATH()));
            if length(trim(pid))>0 then begin
               writeln('Stopping Mysql artica pids...: ' + pid);
               fpsystem('/bin/kill ' + pid);
           end;

 if FileExists(MYSQL_INIT_PATH()) then exit;

 writeln('Stopping Mysql artica pid....: ' + MYSQL_ARTICA_PID() + ' PID...');
     if D then writeln('/bin/kill ' + pid);
     fpsystem('/bin/kill ' + pid);
     while SYSTEM_PROCESS_EXIST(MYSQL_ARTICA_PID()) do begin
           Inc(count);
           if D then writeln('Stopping Mysql artica pid....: ' + MYSQL_ARTICA_PID() + ' PID.. (count)',count);
           sleep(100);
           if count>60 then begin
                  writeln('killing Mysql artica.........: ' + MYSQL_ARTICA_PID() + ' PID.. (timeout)');
                  fpsystem('/bin/kill -9 ' + MYSQL_ARTICA_PID());
                  break;
           end;
     end;



  pid:=trim(SYSTEM_PROCESS_LIST_PID('/opt/artica/mysql/libexec/mysqld'));
  if length(pid)>0 then begin
       writeln('Stopping Mysql artica pids...: ' + pid);
       fpsystem('/bin/kill ' + pid);
       sleep(500);
       while length(trim(SYSTEM_PROCESS_LIST_PID('/opt/artica/mysql/libexec/mysqld')))>0 do begin
            fpsystem('/bin/kill ' + SYSTEM_PROCESS_LIST_PID('/opt/artica/mysql/libexec/mysqld'));
            sleep(500);
       end;
  end;



end;
//##############################################################################
function MyConf.MYSQL_ARTICA_PID():string;
begin
result:=SYSTEM_GET_PID(MYSQL_SERVER_PARAMETERS_CF('pid-file'));
exit;
end;
//##############################################################################
function myConf.OPENSSL_VERSION():string;
var
   openssl_path,str:string;
   RegExpr:TRegExpr;
   D:Boolean;
begin
  D:=COMMANDLINE_PARAMETERS('debug');
  openssl_path:=OPENSSL_TOOL_PATH();
  if FileExists(openssl_path) then exit('0.0');
  if D then writeln('OPENSSL_VERSION() -> '+ openssl_path);
  str:=trim(ExecPipe(openssl_path + ' version 2>&1'));
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='.+?([0-9\.]+)';
  if RegExpr.Exec(str) then result:=RegExpr.Match[1];
  RegExpr.Free;
  exit;


end;
//##############################################################################
function MyConf.LIB_GSL_VERSION():string;
begin
   IF NOT FILEeXISTS('/usr/local/bin/gsl-config') THEN EXIT('0.0');
   result:=trim(ExecPipe('/usr/local/bin/gsl-config --version 2>&1'));
end;
//##############################################################################
function Myconf.CURL_HTTPS_ENABLED():boolean;
var
   FileS:TstringList;
   i:integer;
begin
result:=false;
    if not FileExists('/opt/artica/bin/curl-config') then exit;
    forceDirectories('/opt/artica/logs');
    fpsystem('/opt/artica/bin/curl-config --protocols >/opt/artica/logs/curl-config.tmp');
    if not FileExists('/opt/artica/logs/curl-config.tmp') then exit;
    FileS:=TStringList.Create;
    FileS.LoadFromFile('/opt/artica/logs/curl-config.tmp');
    For i:=0 to FileS.Count-1 do begin
        if LowerCase(trim(FileS.Strings[i]))=LowerCase('HTTPS') then begin
            result:=true;
            break;
        end;
    end;

    FileS.FRee;

end;
//##############################################################################

function MyConf.SYSTEM_GET_PLATEFORM():string;
var
   line:string;
   RegExpr:TRegExpr;
begin
   fpsystem('/bin/uname -a >/opt/artica/logs/uname.tmp');
   line:=ReadFileIntoString('/opt/artica/logs/uname.tmp');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='\s+i([0-9]+)\s+GNU';
   if RegExpr.Exec(line) then result:=RegExpr.Match[1];
end;
//##############################################################################
PROCEDURE myconf.LDAP_DB_CONFIG();
var
 filedatas:        TstringList;
 logs:Tlogs;
begin
logs:=Tlogs.Create;
LOGS.logs('LDAP_DB_CONFIG:: START');
if DirectoryExists('/opt/artica/var/openldap-data') then begin
      if not FileExists('/opt/artica/var/openldap-data/DB_CONFIG') then begin
         filedatas:=TstringList.Create;
         logs.DebugLogs('Starting......: OpenLDAP creating /opt/artica/var/openldap-data/DB_CONFIG');
         filedatas.Add('set_cachesize 0 2097152 0');
         filedatas.Add('set_lg_regionmax 262144');
         filedatas.Add('set_lg_bsize 2097152');
         filedatas.SaveToFile('/opt/artica/var/openldap-data/DB_CONFIG');

      end;
   end;

if DirectoryExists('/usr/local/var/openldap-data') then begin
      if not FileExists('/usr/local/var/openldap-data/DB_CONFIG') then begin
         filedatas:=TstringList.Create;
         logs.DebugLogs('Starting......: OpenLDAP creating /usr/local/var/openldap-data/DB_CONFIG');
         filedatas.SaveToFile('/usr/local/var/openldap-data/DB_CONFIG');

      end;
   end;

   if DirectoryExists('/var/lib/ldap') then begin
      if not FileExists('/var/lib/ldap/DB_CONFIG') then begin
         filedatas:=TstringList.Create;
         logs.DebugLogs('Starting......: OpenLDAP creating /var/lib/ldap/DB_CONFIG');
         filedatas.SaveToFile('/var/lib/ldap/DB_CONFIG');

      end;
   end;
   LOGS.logs('LDAP_DB_CONFIG:: Finish');
end;
//##############################################################################
FUNCTION myconf.CROSSROADS_MASTERNAME():string;
var
   cross_ini:TIniFile;
begin
  if not FileExists('/etc/artica-postfix/crossroads.indentities.conf') then exit;
  cross_ini:=TIniFile.Create('/etc/artica-postfix/crossroads.indentities.conf');
  result:=cross_ini.ReadString('INFOS','master_name','');
  cross_ini.Free;
end;
//##############################################################################
FUNCTION myconf.CROSSROADS_POOLING_TIME():integer;
var
   cross_ini:TIniFile;
begin
  if not FileExists('/etc/artica-postfix/crossroads.indentities.conf') then exit(300);
  cross_ini:=TIniFile.Create('/etc/artica-postfix/crossroads.indentities.conf');
  result:=cross_ini.ReadInteger('INFOS','pol_time',300);
  cross_ini.Free;
end;
//##############################################################################
procedure myconf.SYSTEM_CHDIR(path:string);
begin
 ChDir (path);
 if IOresult<>0 then logs.Syslogs('Cannot change to directory : ' + path);
end;
//##############################################################################
function MyConf.SASLAUTHD_PATH_GET():string;
begin

    if FileExists('/etc/default/saslauthd') then result:='/etc/default/saslauthd';
    if FileExists('/etc/sysconfig/saslauthd') then  result:='/etc/sysconfig/saslauthd';
    if Debug then ShowScreen('SASLAUTHD_PATH_GET -> "' + result + '"');
end;
//##############################################################################
function MyConf.SASLAUTHD_VALUE_GET(key:string):string;
var Msaslauthd_path,mdatas:string;
   RegExpr:TRegExpr;
begin
Msaslauthd_path:=SASLAUTHD_PATH_GET();
    if length(Msaslauthd_path)=0 then begin
        if Debug then writeln('SASLAUTHD_VALUE_GET -> NULL!!!');
        exit;
    end;

     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:=key + '=[\s"]+([a-z\/]+)(?)';
     if Debug then writeln('SASLAUTHD_VALUE_GET -> Read ' + Msaslauthd_path);
     mdatas:=ReadFileIntoString(Msaslauthd_path);

     if RegExpr.Exec(mdatas) then begin
        result:=RegExpr.Match[1];
        if Debug then writeln('SASLAUTHD_VALUE_GET -> regex ' + result);
     end;
     RegExpr.Free;
end;
//##############################################################################
function myconf.SASLAUTHD_TEST_INITD():boolean;
var List:TStringList;
   RegExpr:TRegExpr;
   i:integer;
begin
   ShowScreen('SASLAUTHD_TEST_INITD:: Prevent false mechanism in init.d for saslauthd');
   if not fileExists('/etc/init.d/saslauthd') then begin
      showScreen('SASLAUTHD_TEST_INITD:: Error stat etc/init.d/saslauthd');
   end;
     List:=TStringList.Create;
     List.LoadFromFile('/etc/init.d/saslauthd');
     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='SASLAUTHD_AUTHMECH=([a-z]+)';
     for i:=0 to List.Count-1 do begin
          if RegExpr.Exec(list.Strings[i]) then begin
             showScreen('SASLAUTHD_TEST_INITD:: Read: "' + RegExpr.Match[1]+'"');
             if  RegExpr.Match[1]<>'ldap' then begin
                  showScreen('SASLAUTHD_TEST_INITD:: change to "ldap" mode');
                  list.Strings[i]:='SASLAUTHD_AUTHMECH=ldap';
                  list.SaveToFile('/etc/init.d/saslauthd');
                  showScreen('SASLAUTHD_TEST_INITD:: done..');
                  fpsystem('/etc/init.d/saslauthd restart');
                  list.Free;
                  RegExpr.free;
                  exit(true);
             end;
          end;

     end;
 showScreen('SASLAUTHD_TEST_INITD:: nothing to change...');
 list.Free;
 RegExpr.free;
 exit(true);
end;
//##############################################################################
function MyConf.BOA_SET_CONFIG();
var
   List:TstringList;
   LocalPort:integer;
   BoaLOGS:Tlogs;
begin
result:=true;
LocalPort:=get_ARTICA_LOCAL_PORT();
BoaLOGS:=Tlogs.Create;
forcedirectories('/opt/artica/share/www');
forcedirectories('/opt/artica/share/www/squid/rrd');
List:=TstringList.Create;
BoaLOGS.logs('Writing httpd.conf for artica-postfix listener on ' + IntToStr(LocalPort) + ' port');
logs.DebugLogs('Starting......: Boa will listen on '+ IntToStr(LocalPort) + ' port');


List.Add('Port ' + IntToStr(LocalPort));
List.Add('Listen 127.0.0.1');
List.Add('User root');
List.Add('Group root');
List.Add('PidFile /etc/artica-postfix/boa.pid');
List.Add('ErrorLog /var/log/artica-postfix/boa_error.log');
List.Add('AccessLog /var/log/artica-postfix/boa_access_log');
List.Add('CGILog /var/log/artica-postfix/boa_cgi_log');
List.Add('DocumentRoot /opt/artica/share/www');
List.Add('DirectoryIndex index.html');
List.Add('#DirectoryMaker /usr/lib/boa/boa_indexer');
List.Add('KeepAliveMax 1000');
List.Add('KeepAliveTimeout 5');
List.Add('#MimeTypes /etc/mime.types');
List.Add('DefaultType text/plain');
List.Add('CGIPath /bin:/usr/bin:/usr/local/bin:/usr/local/sbin:/usr/sbin:/sbin:/sbin:/bin:/usr/X11R6/bin');
List.Add('AddType application/x-executable cgi');
List.Add('ScriptAlias /cgi/ ' + get_ARTICA_PHP_PATH() + '/bin/');
List.Add('Alias /queue ' + ARTICA_FILTER_QUEUEPATH());
list.SaveToFile('/etc/artica-postfix/httpd.conf');
list.Free;
BoaLOGS.free;
end;
//##############################################################################
function myconf.LDAP_SLAPADD_BIN_PATH():string;
begin
if FileExists('/usr/sbin/slapadd') then exit('/usr/sbin/slapadd');
if FileExists('/opt/artica/sbin/slapadd') then exit('/opt/artica/sbin/slapadd');
end;
//##############################################################################


procedure MyConf.LDAP_VERIFY_PASSWORD();
var artica_admin,artica_password,artica_suffix:string;
    change:boolean;
    tfile:Tstringlist;
    i:integer;
    logs:Tlogs;

begin
    change:=false;
    logs:=Tlogs.Create;

    artica_admin:=get_LDAP('admin');
    artica_password:=get_LDAP('password');
    artica_suffix:=get_LDAP('suffix');

    logs.DebugLogs('Starting......: LDAP ' + artica_admin + ':' + artica_password + '//' + artica_suffix);




    tfile:=TStringList.Create;
    tfile.Add('dn: '+artica_suffix);
    tfile.Add('objectClass: top');
    tfile.Add('objectClass: organization');
    tfile.Add('objectClass: dcObject');
    tfile.Add('o: my-domain');
    tfile.Add('dc: my-domain');
    tfile.SaveToFile('/opt/artica/logs/_init.ldif');
    tfile.Free;


    fpsystem(LDAP_SLAPADD_BIN_PATH() + '  -l /opt/artica/logs/_init.ldif >/opt/artica/logs/_init.ldif.resp 2>&1');

    if FileExists('/opt/artica/awstats/wwwroot/cgi-bin/awstats.pl') then begin
        forceDirectories('/opt/artica/etc/awstats');
        if not FileExists('/opt/artica/etc/awstats/awstats.mail.conf') then begin
            logs.DebugLogs('Starting......: reconfigure awstats');
            fpsystem(Paramstr(0) + ' -awstats-reconfigure');
            fpsystem(Paramstr(0) + ' -awstats generate');
        end;
    end;

    tfile:=TStringList.Create;
    if FileExists('/opt/artica/logs/_init.ldif.resp') then begin
       tfile.LoadFromFile('/opt/artica/logs/_init.ldif.resp');
       for i:=0 to tfile.Count-1 do begin
             if pos('DB_KEYEXIST',tfile.Strings[i])=0 then begin
                logs.DebugLogs('Starting......: LDAP '+ tfile.Strings[i]);
             end;
       end;
    end;
     logs.DebugLogs('Starting......: LDAP tests suffix ' + artica_suffix + ' ok');

     if fileexists('/usr/bin/newaliases') then begin
        fpsystem('/usr/bin/newaliases >/dev/null 2>&1');
        logs.DebugLogs('Starting......: newaliases OK');
     end;


     if FileExists('/opt/artica/cyrus/bin/reconstruct') then begin
        fpsystem('/opt/artica/cyrus/bin/reconstruct >/dev/null 2>&1');
        logs.DebugLogs('Starting......: reconstruct cyrus database ok');
     end;



     if FileExists('/opt/artica/db/lib/libdb-4.6.so') then begin
        if Not FileExists('/usr/local/lib/libdb-4.6.so') then begin
           fpsystem('/bin/ln -s /opt/artica/db/lib/libdb-4.6.so /usr/local/lib/libdb-4.6.so');
           logs.DebugLogs('Starting......: Linking /opt/artica/db/lib/libdb-4.6.so -> /usr/local/lib/libdb-4.6.so');
        end;
     end;

     if FileExists('/opt/artica/db/lib/libdb-4.6.so') then begin
        if Not FileExists('/lib/libdb-4.6.so') then begin
           fpsystem('/bin/ln -s /opt/artica/db/lib/libdb-4.6.so /lib/libdb-4.6.so');
           logs.DebugLogs('Starting......: Linking /opt/artica/db/lib/libdb-4.6.so -> /lib/libdb-4.6.so');
        end;

     end;

     if FileExists('/opt/artica/lib/libiconv.so.2.4.0') then begin
        if Not FileExists('/lib/libiconv.so.2') then begin
           fpsystem('/bin/ln -s --force /opt/artica/lib/libiconv.so.2.4.0 /lib/libiconv.so.2');
           logs.DebugLogs('Starting......: Linking /opt/artica/lib/libiconv.so.2.4.0 -> /lib/libiconv.so.2');
        end;

     end;
      PURE_FTPD_PREPARE_LDAP_CONFIG();


    if change=true then begin
       logs.DebugLogs('Starting......: ldap password as changed fix settings...');
       logs.DebugLogs('Starting......: Restart postfix, cyrus, saslauthd');
       POSTFIX_CONFIGURE_MAIN_CF();
       CCYRUS.CYRUS_IMAPD_CONFIGURE();
       SASLAUTHD_CONFIGURE();

       postfix.POSTFIX_STOP();
       CCYRUS.CYRUS_DAEMON_STOP();
       SASLAUTHD_STOP();

       postfix.POSTFIX_STOP();
       postfix.POSTFIX_START();
       CCYRUS.CYRUS_DAEMON_START();
       SASLAUTHD_START();

    end;


end;
//##############################################################################
procedure MyConf.WATCHDOG_PURGE_BIGHTML();
var
   queue_path:string;
   SYS       :Tsystem;
   Dirs      :TstringList;
   FileList  :TstringList;
   D         :boolean;
   i         :integer;
   mIni      :TiniFile;
   dayMax    :Integer;
begin

   D:=COMMANDLINE_PARAMETERS('debug');
   queue_path:=ARTICA_FILTER_QUEUEPATH() + '/bightml';
   SYS:=Tsystem.Create();
   Dirs:=TstringList.Create;
   Dirs.AddStrings(SYS.DirDirRecursive(queue_path));
   if D then writeln('WATCHDOG_PURGE_BIGHTML: ' + IntToStr(Dirs.Count) + ' folders');
   if Dirs.Count=0 then exit;
   FileList:=TStringlist.Create;
   for i:=0 to Dirs.Count-1 do begin
         if D then writeln('WATCHDOG_PURGE_BIGHTML: find conf files in ' + Dirs.Strings[i]+ ' dir');
         FileList.AddStrings(SYS.SearchFilesInPath(Dirs.Strings[i],'*.conf'));

   end;
   if D then writeln('WATCHDOG_PURGE_BIGHTML: ' + IntToStr(FileList.Count) + ' files');
   if FileList.Count=0 then exit;

    for i:=0 to FileList.Count-1 do begin
         if D then writeln('WATCHDOG_PURGE_BIGHTML: ' + FileList.Strings[i]);
         mIni:=TiniFile.Create(FileList.Strings[i]);

         dayMax:=mIni.ReadInteger('GENERAL','maxday',2);
         if SYSTEM_FILE_DAYS_BETWEEN_NOW(FileList.Strings[i])>dayMax then begin
            logs.logs('WATCHDOG_PURGE_BIGHTML:: Delete ' + ExtractFilePath(FileList.Strings[i]));
            fpsystem('/bin/rm -rf ' + ExtractFilePath(FileList.Strings[i]));
         end;

    end;
end;
//##############################################################################
function MyConf.SYSTEM_START_ARTICA_DAEMON():boolean;
var
   Rootpath,ArticaPath:string;
   knel:integer;
   kernel_version:string;
   l:TstringList;
   xfce:Txfce;
begin
     forcedirectories('/etc/artica-postfix');
     
     if not FileExists('/etc/artica-postfix/first.boot') then begin
         l:=TstringList.Create;
         l.Add('xxx');
         l.SaveToFile('/etc/artica-postfix/first.boot');
         l.free;
         fpsystem(paramStr(0) + ' --init-from-repos');
         halt(0);
     end;


     kernel_version:=trim(SYSTEM_KERNEL_VERSION());
     kernel_version:=Copy(kernel_version,0,3);
     result:=true;
     knel:=StrToInt(AnsiReplaceStr(kernel_version,'.',''));
     if knel<26 then begin
        writeln('Your kernel version '+ kernel_version + ' is not supported');
        writeln('You need to upgrade your system to the newest version (>=2.6)');
        writeln('aborting...');
        halt(0);
     end;

     logs:=Tlogs.Create;

     if FileExists('/opt/artica/license.expired.conf') then DeleteFile('/opt/artica/license.expired.conf');
     writeln('Starting......: Kernel version ' + kernel_version);
     logs.DebugLogs('Starting......: Distribution "' + LINUX_DISTRIBUTION() + '" i' + SYSTEM_GET_PLATEFORM());
     lighttpd.LIGHTTPD_START();
     ldap.LDAP_START();
     Rootpath:=get_ARTICA_PHP_PATH();
     articaPath:=Rootpath + '/bin/artica-postfix';
     logs.OutputCmd(Rootpath + '/bin/artica-ldap -iptables --start');
     logs.OutputCmd(articaPath + ' iso');
     logs.OutputCmd(articaPath);
     xfce:=Txfce.Create;
     xfce.INSTALL_XFCE();
     xfce.Free;
end;


//##############################################################################
procedure MyConf.SYSTEM_START_MINIMUM_DAEMON();
var SYS:Tsystem;
begin
SYS:=Tsystem.Create();
if FileExists('/etc/init.d/keymap.sh') then fpsystem('/etc/init.d/keymap.sh start');
SYSTEM_CHANGE_MOTD();
ldap.LDAP_START();
APACHE_ARTICA_START();
BOA_START();
if FIleExists(SYS.sudo_path()) then begin
   if FileExists('/usr/sbin/cyrus-makedirs') then fpsystem(SYS.sudo_path() + '-u cyrus /usr/sbin/cyrus-makedirs >/dev/null 2>&1');
end;

end;
//##############################################################################

function MyConf.SYSTEM_START_ARTICA_ALL_DAEMON():boolean;
var
   Rootpath:string;
   D:boolean;
   knel:integer;
   kernel_version:string;
   spfm:tspf;

begin
     logs:=Tlogs.Create;
     spfm:=tspf.Create;
     kernel_version:=trim(SYSTEM_KERNEL_VERSION());
     kernel_version:=Copy(kernel_version,0,3);
     logs.Debuglogs('SYSTEM_START_ARTICA_ALL_DAEMON:: kernel version is '+kernel_version);
     result:=true;
     knel:=StrToInt(AnsiReplaceStr(kernel_version,'.',''));
     if knel<26 then begin
        writeln('Your kernel version '+ kernel_version + ' is not supported');
        writeln('You need to upgrade your system to the newest version (>=2.6)');
        writeln('aborting...');
        halt(0);
     end;



     if FileExists('/opt/artica/license.expired.conf') then DeleteFile('/opt/artica/license.expired.conf');


     PERL_CREATE_DEFAULT_SCRIPTS();
     D:=COMMANDLINE_PARAMETERS('debug');
     Rootpath:=get_ARTICA_PHP_PATH();


     logs.Debuglogs('SYSTEM_START_ARTICA_ALL_DAEMON:: Rootpath='+ Rootpath);

     ForceDirectories('/opt/artica/etc/lire/converters');

     if not FileExists('/lib/libsqlite3.so.0') then begin
        if FileExists('/opt/artica/lib/libsqlite3.so.0') then begin
            logs.DebugLogs('Starting......: Linking /opt/artica/lib/libsqlite3.so.0 -> /lib/libsqlite3.so.0');
            fpsystem('/bin/ln -s /opt/artica/lib/libsqlite3.so.0 /lib/libsqlite3.so.0');
        end;
     end;
     
     
if not fileExists(ldap.INITD_PATH()) then begin
     if not FileExists('/lib/libldap-2.4.so.2') then begin
     if FileExists('/opt/artica/lib/libldap-2.4.so.2') then begin
          logs.DebugLogs('Starting......: Linking /opt/artica/lib/libldap-2.4.so.2 -> /lib/libldap-2.4.so.2');
          fpsystem('/bin/ln -s /opt/artica/lib/libldap-2.4.so.2 /lib/libldap-2.4.so.2');
     END;
     END;

     if not FileExists('/lib/liblber-2.4.so.2') then begin
        if FileExists('/opt/artica/lib/liblber-2.4.so.2') then begin
          logs.DebugLogs('Starting......: Linking /opt/artica/lib/liblber-2.4.so.2 -> /lib/liblber-2.4.so.2');
          fpsystem('/bin/ln -s /opt/artica/lib/liblber-2.4.so.2 /lib/liblber-2.4.so.2');
     END;
     END;
end;
     forcedirectories('/opt/artica/var/rrd/yorel');
     fpsystem('/bin/chmod -R 755 /opt/artica/var/rrd/yorel');
     ln(Rootpath+'/bin/install/rrd/andalemono','/opt/artica/var/rrd/yorel/andalemono');


     if not FileExists('/etc/aliases') then begin
        if FileExists('/usr/bin/newaliases') then begin
            logs.DebugLogs('Starting......: create /etc/aliases file...');
            fpsystem('/bin/touch /etc/aliases');
            fpsystem('/usr/bin/newaliases');
        end;
     end;


     ldap.LDAP_START();
     //mailman_pid:=MAILMAN_GET_PID();
     RRDTOOL_FIX();
     SYSTEM_VERIFY_CRON_TASKS();
     fpsystem('/bin/chmod -R 777 /etc/cron.d/');
     roundcube.START();
     YOREL_VERIFY_START();
     SASLAUTHD_START();
     CCYRUS.CYRUS_DAEMON_START();
     MYSQL_ARTICA_START();
     ARTICA_TAIL_START();
     monitorix.START();
     logs.Debuglogs('SYSTEM_START_ARTICA_ALL_DAEMON:: Postfix conf ? ='+ postfix.POSFTIX_POSTCONF_PATH());
     if FileExists(postfix.POSFTIX_POSTCONF_PATH()) then begin
        postfix.POSTFIX_START();
        logs.Debuglogs('Postfix exists... start and verify all daemons');
        clamav.FRESHCLAM_START();
        clamav.CLAMD_START();
        clamav.MILTER_START();
        spamass.SPAMASSASSIN_START();
        spamass.MILTER_START();
        spfm.SPFMILTER_START();
        mimedef.MIMEDEFANG_START();
        dkim.DKIM_FILTER_START();

        
        AMAVISD_START();
        miltergreylist.MILTER_GREYLIST_START();
        KAS_MILTER_START();
        MAILFROMD_START();
        mailgraph.MAILGRAPH_START();


     if FileExists('/opt/artica/mailman/mail/mailman') then begin
        if not SYSTEM_PROCESS_EXIST(MAILMAN_GET_PID()) then begin
           if D then showscreen('SYSTEM_START_ARTICA_DAEMON:: Start mailman service server ');
           fpsystem('/opt/artica/mailman/bin/mailmanctl start >/dev/null 2>&1');
           logs.DebugLogs('Starting......: mailman daemon pid ' + MAILMAN_GET_PID());
           fpsystem(ExtractFilePath(ParamStr(0)) + 'artica-mailman -css-patch');
           end else begin
               logs.DebugLogs('Starting......: mailman daemon is already running using PID ' + MAILMAN_GET_PID() + '...');
           end;
     end;
     
    end;
     
     roundcube.ROUNDCUBE_START_SERVICE();
     samba.SAMBA_START();
     samba.WINBIND_START();
     ntpd.NTPD_START();
     roundcube.START();
     APACHE_ARTICA_START();
     APACHE_OBM_START();
     ARTICA_FILTER_CHECK_PERMISSIONS();
     FETCHMAIL_START_DAEMON();
     HOTWAYD_START();
     DNSMASQ_START_DAEMON();
     squid.SQUID_START();
     dansguardian.DANSGUARDIAN_START();
     KAV6_START();
     KAV4PROXY_START();
     logs.OutputCmd(get_ARTICA_PHP_PATH() + '/bin/artica-ldap -inadyn');
     Cpureftpd.PURE_FTPD_START();
     BOA_START();
     ARTICA_START();
     logs.Debuglogs('SYSTEM_START_ARTICA_ALL_DAEMON:: finish');
     
     
     if FileExists('/etc/artica-postfix/FROM_ISO') then begin
        if Not Fileexists('/etc/artica-postfix/rebooted.start') then begin
           fpsystem('touch /etc/artica-postfix/rebooted.start');
           fpsystem('/sbin/shutdown -r now');
        end;
     end;
           
        
     
     
end;
//##############################################################################
function myconf.CYRUS_enabled_in_master_cf():boolean;
var
   RegExpr:TRegExpr;
   list:TstringList;
   i:Integer;
begin
   result:=false;
   if not FileExists('/etc/postfix/master.cf') then exit;
   list:=TStringList.Create;
   list.LoadFromFile('/etc/postfix/master.cf');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='flags= user=cyrus argv=(.+)';
   for i:=0 to list.Count-1 do begin
        if RegExpr.Exec(list.Strings[i]) then begin
            result:=true;
            break;
        end;
   end;
   RegExpr.free;
   list.free;
end;
//##############################################################################


procedure myconf.BOA_STOP();
var count:integer;
 begin
 count:=0;
 if SYSTEM_PROCESS_EXIST(BOA_DAEMON_GET_PID()) then begin
        writeln('Stopping BOA.................: ' + BOA_DAEMON_GET_PID() + ' PID..');
        fpsystem('/bin/kill '+BOA_DAEMON_GET_PID());

        while SYSTEM_PROCESS_EXIST(BOA_DAEMON_GET_PID()) do begin
              sleep(100);
              inc(count);
              if count>20 then begin
                 fpsystem('/bin/kill -9 ' + BOA_DAEMON_GET_PID());
                 break;
              end;
        end;
        if SYSTEM_PROCESS_EXIST(BOA_DAEMON_GET_PID()) then begin
           writeln('Stopping BOA.................: Failed to stop PID ' + BOA_DAEMON_GET_PID());
        end;
  end else begin
     writeln('Stopping BOA.................: Already stopped');
  end;
end;
//##############################################################################
procedure myconf.APACHE_ARTICA_STOP();
 var
    count      :integer;
    D          :boolean;
    logs       :Tlogs;
    pids       :string;
begin

      logs:=Tlogs.Create;
      if fileExists(lighttpd.LIGHTTPD_INITD()) then lighttpd.LIGHTTPD_STOP();

      
      
      
      
      if not FileExists(APACHE_GET_INITD_PATH()) then begin
         logs.Debuglogs('Stopping Apache artica.......: Not installed');
         exit;
     end;
     count:=0;
     D:=COMMANDLINE_PARAMETERS('debug');

     if SYSTEM_PROCESS_EXIST(APACHE_PID()) then begin
        writeln('Stopping Apache artica.......: ' + APACHE_PID() + ' PID..');
        if D then showscreen('SYSTEM_START_ARTICA_DAEMON:: stop apache service server "' + APACHE_GET_INITD_PATH() + '"');
        logs.Debuglogs(APACHE_GET_INITD_PATH() + ' stop -> PID='+APACHE_PID());
        fpsystem(APACHE_GET_INITD_PATH() + ' stop');
        while SYSTEM_PROCESS_EXIST(APACHE_PID()) do begin
              sleep(100);
              inc(count);
              if count>100 then begin
                 pids:=SYSTEM_PROCESS_LIST_PID('/opt/artica/bin/artica-www -k start');
                 if length(trim(pids))>0 then begin
                    writeln('Stopping Apache artica.......: Failed to stop clean pid ' + APACHE_PID() + ' try old method -> kill pids ' + pids);
                    fpsystem('/bin/kill -9 ' + pids);
                    count:=0;
                    while SYSTEM_PROCESS_EXIST(APACHE_PID()) do begin
                        sleep(100);
                        inc(count);
                        if count>100 then begin
                           writeln('Stopping Apache artica.......: Failed to stop ');
                           break;
                        end;
                    end;
                 end;
              end;
        end;

      end else begin
        pids:=SYSTEM_PROCESS_LIST_PID('/opt/artica/bin/artica-www -k start');
        if length(pids)>0 then begin
             writeln('Stopping Apache artica.......: Failed to stop clean pid ' + APACHE_PID() + ' try old method -> kill pids ' + pids);
            fpsystem('/bin/kill -9 ' + pids);
        end;
        logs.Debuglogs('Stopping Apache artica.......: Already stopped');
     end;
     
    lighttpd.LIGHTTPD_STOP();

end;
//##############################################################################
procedure myconf.APACHE_OBM_STOP();
 var
    count      :integer;
    D          :boolean;
    cmdline    :string;
begin
      if not FileExists(APACHE_GET_INITD_PATH()) then begin
         writeln('Stopping Apache artica.......: Not installed, are you sure that artica is really installed ???');
         exit;
     end;
     count:=0;
     D:=COMMANDLINE_PARAMETERS('debug');
     cmdline:='/opt/artica/bin/artica-www -f /opt/artica/conf/www-obm.conf -k stop';

     if SYSTEM_PROCESS_EXIST(APACHE_OBM_PID()) then begin
        writeln('Stopping Apache OBM..........: ' + APACHE_OBM_PID() + ' PID..');
        if D then showscreen('SYSTEM_START_ARTICA_DAEMON:: stop apache service server "' + cmdline + '"');
        fpsystem(cmdline);
        while SYSTEM_PROCESS_EXIST(APACHE_OBM_PID()) do begin
              sleep(100);
              inc(count);
              if count>100 then begin
                 writeln('Stopping Apache OBM..........: Failed');
                 exit;
              end;
        end;

      end else begin
        writeln('Stopping Apache OBM..........: Already stopped');
     end;

end;
//##############################################################################
function myconf.APACHE_ARTICA_ENABLED():string;
var
   s:string;
begin

if not FileExists(APACHE_GET_INITD_PATH()) then exit('0');

if not FileExists(lighttpd.LIGHTTPD_BIN_PATH()) then begin
   result:='1';
   exit;
end;
s:=get_INFOS('ApacheArticaEnabled');
if length(s)=0 then exit('0');
exit(s);
end;
//##############################################################################




procedure myconf.APACHE_ARTICA_START();
 var
    count      :integer;
    D          :boolean;
    CopyPear   :boolean;
    logs       :Tlogs;
    pids       :string;
begin
     CopyPear:=false;
     count:=0;
     logs:=Tlogs.Create;
     logs.Debuglogs('APACHE_ARTICA_START()');
     D:=COMMANDLINE_PARAMETERS('debug');
     if APACHE_ARTICA_ENABLED()<>'1' then begin
        pids:=SYSTEM_PROCESS_LIST_PID('/opt/artica/bin/artica-www -k start');
        if length(pids)>0 then begin
           logs.Debuglogs('APACHE_ARTICA_ENABLED<>1 APACHE PID=' + APACHE_PID() + ' -> Stop apache');
           APACHE_ARTICA_STOP();
        end;
        logs.Debuglogs('APACHE_ARTICA_START() ->  LIGHTTPD_START();');
        lighttpd.LIGHTTPD_START();
        exit;
     end;

     if not FileExists(APACHE_GET_INITD_PATH()) then begin
         logs.DebugLogs('Starting......: Apache daemon... Not installed, are you sure that artica is really installed ???');
         exit;
     end;


     if not FileExists('/opt/artica/pear/DB.php') then CopyPear:=true;
     if not FileExists('/opt/artica/pear/Net/Socket.php') then CopyPear:=true;


     if CopyPear=true then begin
       logs.DebugLogs('Starting......: Apache daemon installing pear libraries..');
       if not DirectoryExists(get_ARTICA_PHP_PATH() + '/bin/install/pear-package') then begin
               logs.DebugLogs('Starting......: Apache daemon WARNING !!! Unable to stat ' + get_ARTICA_PHP_PATH() + '/bin/install/pear-package !!!');
       end else begin
           fpsystem('/bin/cp -rfv ' +  get_ARTICA_PHP_PATH() + '/bin/install/pear-package/* /opt/artica/pear');
       end;

     end;


     if not SYSTEM_PROCESS_EXIST(APACHE_PID()) then begin

        if D then showscreen('SYSTEM_START_ARTICA_DAEMON:: Start apache service server "' + APACHE_GET_INITD_PATH() + '"');
        fpsystem(APACHE_GET_INITD_PATH() + ' start');
        while not SYSTEM_PROCESS_EXIST(APACHE_PID()) do begin
              sleep(100);
              inc(count);
              if count>200 then begin
                 logs.DebugLogs('Starting......: Apache daemon... (failed!!!)');
                 exit;
              end;
        end;

      end else begin
        logs.DebugLogs('Starting......: Apache daemon is already running using PID ' + APACHE_PID() + '...');
        exit;
     end;

     logs.DebugLogs('Starting......: Apache daemon with new PID ' + APACHE_PID() + '...');


end;
//##############################################################################







procedure myconf.APACHE_OBM_START();
 var
    count      :integer;
    D          :boolean;
    cmdline    :string;
begin
     count:=0;
     D:=COMMANDLINE_PARAMETERS('debug');

     if not FileExists(APACHE_GET_INITD_PATH()) then begin
         logs.DebugLogs('Starting......: Apache daemon... Not installed, are you sure that artica is really installed ???');
         exit;
     end;

     if Get_INFOS('OBMEnabled')<>'1' then exit;

     cmdline:='/opt/artica/bin/artica-www -f /opt/artica/conf/www-obm.conf -k start';


    if not SYSTEM_PROCESS_EXIST(APACHE_OBM_PID()) then begin

        if D then showscreen('APACHE_OBM_START:: Start apache OBM service server "' + cmdline + '"');
        fpsystem(cmdline);
        while not SYSTEM_PROCESS_EXIST(APACHE_OBM_PID()) do begin
              sleep(100);
              inc(count);
              if count>200 then begin
                 logs.DebugLogs('Starting......: Apache OBM daemon... (failed!!!)');
                 exit;
              end;
        end;

      end else begin
       if ExtractFileName(ParamStr(0))<>'process1' then logs.DebugLogs('Starting......: Apache OBM daemon is already running using PID ' + APACHE_OBM_PID() + '...');
        exit;
     end;

     logs.DebugLogs('Starting......: Apache OBM daemon with new PID ' + APACHE_OBM_PID() + '...');


end;
//##############################################################################

procedure myconf.KAS_MILTER_START();
 var
    count      :integer;
    cmdline    :string;
    logs       :Tlogs;
    SYS        :Tsystem;
begin

     count:=0;

     if not FileExists('/etc/init.d/kas3-milter') then exit;
     if Get_INFOS('KasxFilterEnabled')<>'1' then exit;
     logs:=Tlogs.Create;
     cmdline:='/etc/init.d/kas3-milter start';
     
     SYS:=Tsystem.Create;
     SYS.AddUserToGroup('postfix','mailflt3','','');
     

 if not SYSTEM_PROCESS_EXIST(KAS_MILTER_PID()) then begin
        logs.logs('Starting kaspersky anti-spam milter service');
        logs.logs(cmdline);
        fpsystem(cmdline);
        while not SYSTEM_PROCESS_EXIST(KAS_MILTER_PID()) do begin
              sleep(100);
              inc(count);
              if count>100 then begin
                 logs.DebugLogs('Starting......: kaspersky anti-spam milter daemon... (failed!!!)');
                 logs.Debuglogs('Failed starting kaspersky anti-spam milter');
                 logs.mysql_logs('2','0','Failed starting kaspersky anti-spam milter');
                 exit;
              end;
        end;

      end else begin
        logs.DebugLogs('Starting......: kaspersky anti-spam milter is already running using PID ' + KAS_MILTER_PID() + '...');
        exit;
     end;

     logs.DebugLogs('Starting......: kaspersky anti-spam milter daemon with new PID ' + KAS_MILTER_PID() + '...');
     logs.mysql_logs('2','1','Success starting kaspersky anti-spam milter service');

end;
//##############################################################################
procedure myconf.KAS_MILTER_STOP();
 var
    count      :integer;
    cmdline    :string;
    logs       :Tlogs;
begin

     count:=0;

     if not FileExists('/etc/init.d/kas3-milter') then exit;

     logs:=Tlogs.Create;
     cmdline:='/etc/init.d/kas3-milter stop';

 if SYSTEM_PROCESS_EXIST(KAS_MILTER_PID()) then begin
        logs.logs('stopping kaspersky anti-spam milter service');
        logs.logs(cmdline);
        fpsystem(cmdline);
        while SYSTEM_PROCESS_EXIST(KAS_MILTER_PID()) do begin
              sleep(100);
              inc(count);
              if count>100 then begin
                 logs.Debuglogs('stopping......: kaspersky anti-spam milter daemon... (failed!!!)');
                 logs.Debuglogs('Failed stopping kaspersky anti-spam milter');
                 logs.mysql_logs('2','0','Failed stopping kaspersky anti-spam milter');
                 exit;
              end;
        end;
 end;


     logs.mysql_logs('2','1','Success stopping kaspersky anti-spam milter service');

end;
//##############################################################################

procedure myconf.OBM_SYNCHRO();
var
  logs:Tlogs;
  ini:TiniFile;
  l:TstringList;
  update:boolean;
  i:integer;
  path:string;
begin
if Get_INFOS('OBMEnabled')<>'1' then exit;
if not DirectoryExists('/usr/share/obm') then exit;
if not DirectoryExists('/opt/artica/mysql/mysql-data/obm') then exit;
ini:=TiniFile.Create('/etc/artica-postfix/obm.sync.conf');
logs:=Tlogs.Create;
l:=TstringList.Create;
l.Add('UserObm.MYD');
l.Add('UGroup.MYD');
l.Add('Domain.MYD');

update:=false;
   for i:=0 to l.Count-1 do begin
        path:='/opt/artica/mysql/mysql-data/obm/' + l.Strings[i];
        if ini.ReadInteger('OBM',l.Strings[i],0)<>logs.GetFileBytes(path) then begin
           logs.logs('OBM_SYNCHRO:: ' + l.Strings[i] + ' as moved' );
           ini.WriteInteger('OBM',l.Strings[i],logs.GetFileBytes(path));
           update:=true;
        end;

   end;

   if update then begin
      fpsystem('/opt/artica/bin/php ' + get_ARTICA_PHP_PATH() + '/cron.obm.synchro.php >/opt/artica/logs/cron.obm.synchro.php.tmp 2>&1');
      logs.mysql_logs('5','1',ReadFileIntoString('/opt/artica/logs/cron.obm.synchro.php.tmp'));
      DeleteFile('/opt/artica/logs/cron.obm.synchro.php.tmp');
      fpsystem(get_ARTICA_PHP_PATH() + '/bin/artica-ldap -mailboxes');
   end;
end;
//##############################################################################

procedure myconf.AMAVISD_START();
 var
    count      :integer;
    D          :boolean;
    cmdline    :string;
    SYS        :Tsystem;
begin
     if not FileExists(postfix.POSFTIX_POSTCONF_PATH()) then exit;
     count:=0;
     D:=COMMANDLINE_PARAMETERS('debug');
     if Not FileExists('/opt/artica/bin/amavisd') then exit;
     if get_INFOS('AmavisFilterEnabled')='0' then exit;

if SYSTEM_PROCESS_EXIST(AMAVISD_PID()) then begin
   if ExtractFileName(ParamStr(0))<>'process1' then logs.DebugLogs('Starting......: avamisd-new is already running using PID ' + AMAVISD_PID() + '...');
   exit;
end;

     SYS:=Tsystem.Create;
     if not SYS.IsUserExists('amavis') then begin
        logs.DebugLogs('Starting......: amavisd-new...Creating amavis user');
        SYS.AddUserToGroup('amavis','amavis','','');
        SYS.AddUserToGroup('clamav','amavis','','');
     end;

     forcedirectories('/var/run/amavisd');
     forcedirectories('/opt/artica/amavis/tmp');
     if not DirectoryExists('/opt/artica/logs/amavis') then begin
        logs.DebugLogs('Starting......: amavisd-new creating /opt/artica/logs/amavis');
        forcedirectories('/opt/artica/logs/amavis');
        fpsystem('/bin/chown -R amavis:amavis /opt/artica/logs/amavis');
        fpsystem('/bin/chmod 755 /opt/artica/logs/amavis');
     end;

     fpsystem('/bin/chown amavis:amavis /var/run/amavisd');
     fpsystem('/bin/chown -R amavis:amavis /opt/artica/amavis');
     fpsystem('/bin/chown -R amavis:amavis /opt/artica/logs/amavis');

     if DirectoryExists('/opt/artica/dcc') then begin
         fpsystem('chown -R root:amavis /opt/artica/dcc');
     end;


     if ExtractFileName(ParamStr(0))<>'process1' then logs.DebugLogs('Starting......: amavisd-new apply settings...');
     fpsystem(get_ARTICA_PHP_PATH() + '/bin/artica-ldap -amavis');
     AMAVISD_PF_START();


     cmdline:='/opt/artica/bin/amavisd -u amavis -g amavis -c /opt/artica/etc/amavis/amavisd.conf  -P /var/run/amavisd/amavis-artica.pid start';

     if not FileExists('/opt/artica/bin/amavisd') then begin
         if D then writeln('AMAVISD_START:: Starting......: amavisd-new is not installed (could not stat /opt/artica/bin/amavisd)');
         exit;
     end;

     if not SYSTEM_PROCESS_EXIST(AMAVISD_PID()) then begin

        if D then showscreen('AMAVISD_START:: Start amavisd "' + cmdline + '"');
        fpsystem(cmdline);
        while not SYSTEM_PROCESS_EXIST(AMAVISD_PID) do begin
              sleep(100);
              inc(count);
              if count>200 then begin
                 logs.DebugLogs('Starting......: amavisd-new... (failed!!!)');
                 exit;
              end;
        end;

      end else begin
       if ExtractFileName(ParamStr(0))<>'process1' then logs.DebugLogs('Starting......: avamisd-new is already running using PID ' + AMAVISD_PID() + '...');
        exit;
     end;

     logs.DebugLogs('Starting......: amavisd-new with new PID ' + AMAVISD_PID() + '...');


end;
//##############################################################################
procedure myconf.AMAVISD_PF_START();
var
pids       :string;
pidsb      :string;
cmdline    :string;
D          :boolean;
logs       :Tlogs;
count      :integer;
begin
   logs:=Tlogs.Create;
   D:=COMMANDLINE_PARAMETERS('debug');
   if not FileExists('/opt/artica/sbin/p0f') then begin
      logs.DebugLogs('Starting......: avamisd-new /opt/artica/sbin/p0f is not installed, skip');
      exit;
   end;

   if not FileExists('/opt/artica/bin/p0f-analyzer.pl') then begin
      if ExtractFileName(ParamStr(0))<>'process1' then  logs.DebugLogs('Starting......: avamisd-new /opt/artica/bin/p0f-analyzer.pl is not installed, skip');
      exit;
   end;


   pids:=SYSTEM_PROCESS_LIST_PID('/opt/artica/bin/perl -T /opt/artica/bin/p0f-analyzer.pl 2345');
   pidsb:=SYSTEM_PROCESS_LIST_PID('/opt/artica/sbin/p0f -l tcp dst port 25 -f /opt/artica/etc/p0f/p0f.fp');



   if D then writeln('AMAVIS_PF_START:: pids=' + pids + ' ,pidsb=' +pidsb);
   if length(trim(pids))>0 then begin
   if ExtractFileName(ParamStr(0))<>'process1' then begin
       if ExtractFileName(ParamStr(0))<>'process1' then  logs.DebugLogs('Starting......: p0f-analyzer is already running using PID ' + pids + '...');
       if ExtractFileName(ParamStr(0))<>'process1' then  logs.DebugLogs('Starting......: p0f scanner is already running using PID ' + pidsb + '...');
   end;
   exit;

   end;
  cmdline:='/opt/artica/sbin/p0f -l ''tcp dst port 25'' -f /opt/artica/etc/p0f/p0f.fp 2>&1|/opt/artica/bin/p0f-analyzer.pl 2345 >/opt/artica/logs/amavis.pf.tmp 2>&1 &';
  logs:=Tlogs.Create;
  logs.logs('AMAVISD_PF_START:: executing ' +cmdline );
  logs.logs('AMAVISD_PF_START:: results ->' + ReadFileIntoString('/opt/artica/logs/amavis.pf.tmp'));
  fpsystem(cmdline);
 count:=0;
 while length(trim(SYSTEM_PROCESS_LIST_PID('/opt/artica/bin/perl -T /opt/artica/bin/p0f-analyzer.pl 2345')))=0 do begin
     if D then writeln('AMAVISD_PF_START:: PID of p0f-analyzer.pl ::',SYSTEM_PROCESS_LIST_PID('/opt/artica/bin/perl -T /opt/artica/bin/p0f-analyzer.pl 2345'),' count=',count);
     sleep(100);
        inc(count);
        if count>30 then begin
           logs.DebugLogs('Starting......: p0f-analyzer,pf0 scanner are failed to start...');
           exit;
           break;
        end;
  end;

   pids:=SYSTEM_PROCESS_LIST_PID('/opt/artica/bin/perl -T /opt/artica/bin/p0f-analyzer.pl 2345');
   pidsb:=SYSTEM_PROCESS_LIST_PID('/opt/artica/sbin/p0f -l tcp dst port 25 -f /opt/artica/etc/p0f/p0f.fp');


 if ExtractFileName(ParamStr(0))<>'process1' then logs.DebugLogs('Starting......: p0f-analyzer with new PID ' + pids +'...');
 if ExtractFileName(ParamStr(0))<>'process1' then logs.DebugLogs('Starting......: p0f scanner with new PID ' + pidsb +'...');
 logs.logs('AMAVISD_PF_START:: results ->' + pids +' ' + pidsb +'...');

end;
//##############################################################################
procedure myconf.AMAVISD_PF_STOP();
var
pids       :string;
pidsb      :string;
count      :integer;

begin

   if not FileExists('/opt/artica/sbin/p0f') then begin
      exit;
   end;
   pids:=SYSTEM_PROCESS_LIST_PID('/opt/artica/bin/perl -T /opt/artica/bin/p0f-analyzer.pl 2345');
   pidsb:=SYSTEM_PROCESS_LIST_PID('/opt/artica/sbin/p0f -l tcp dst port 25 -f /opt/artica/etc/p0f/p0f.fp');

   if length(trim(pids))=0 then begin
      writeln('Stopping p0f-analyzer........: Already stopped');
   end;

   if length(trim(pidsb))=0 then begin
      writeln('Stopping p0f.................: Already stopped');
   end;

   if length(trim(pids))=0 then begin
     if length(trim(pidsb))=0 then begin
     exit;
     end;
   end;
  writeln('Stopping p0f-analyzer........: ' + pids + ' ' + pidsb);

  fpsystem('/bin/kill ' + pids + ' ' + pidsb);
  sleep(100);



pidsb:=SYSTEM_PROCESS_LIST_PID('/opt/artica/sbin/p0f -l tcp dst port 25 -f /opt/artica/etc/p0f/p0f.fp');
count:=0;
 while SYSTEM_PROCESS_EXIST(pids) do begin
     sleep(100);
        inc(count);
        if count>20 then begin
           fpsystem('/bin/kill -9 ' + pids);
           break;
        end;
        pids:=SYSTEM_PROCESS_LIST_PID('/opt/artica/bin/perl -T /opt/artica/bin/p0f-analyzer.pl 2345');
  end;
count:=0;
 while SYSTEM_PROCESS_EXIST(pidsb) do begin
     sleep(100);
        inc(count);
        if count>20 then begin
           fpsystem('/bin/kill -9 ' + pidsb);
           break;
        end;
        pidsb:=SYSTEM_PROCESS_LIST_PID('/opt/artica/sbin/p0f -l tcp dst port 25 -f /opt/artica/etc/p0f/p0f.fp');
  end;

end;
//##############################################################################
function myconf.BACKUP_MYSQL():string;
var
   root    :string;
   password:string;
   socket  :string;
   sdate   :string;
   cmd     :string;
   size    :integer;
   targetf :string;
   backup_path:string;
   conf    :TiniFile;
begin
  root      :=MYSQL_ROOT();
  password  :=MYSQL_PASSWORD();;
  socket    :=MYSQL_READ_CF('socket',MYSQL_MYCNF_PATH());
  sdate     :=TEMP_DATE();


if length(global_backup_usb_path)=0 then begin
   if not FileExists('/etc/artica-postfix/artica-backup.conf')then begin
      logs.Debuglogs('BACKUP_MYSQL():: no configuration set');
      exit('No configurations set');
   end;
   
   conf:=TiniFile.Create('/etc/artica-postfix/artica-backup.conf');
   backup_path:=conf.ReadString('backup','backup_path','/opt/artica/backup');
   
end else begin
      backup_path:=global_backup_usb_path;

end;

forcedirectories(backup_path+'/'+sdate+'/etc');
logs.OutputCmd('cd /usr/share/artica-postfix');
cmd:=mysqldump_path() + ' ' ;
cmd:=cmd+'--user='+root+' --password='+password+' --extended-insert --quote-names --opt ';
cmd:=cmd+'--add-drop-table --all-databases --socket='+ socket+' > '+backup_path+'/'+sdate+'/'+sdate+'.sql';

writeln('Perform sql backup...');

fpsystem(cmd);
writeln('Perform LDAP backup...');
logs.OutputCmd('/etc/init.d/artica-postfix stop ldap');
cmd:=ldap.SLAPCAT_PATH()+' -v -f '+ldap.SLAPD_CONF_PATH() +' -l '+backup_path+'/'+sdate+'/'+sdate+'.ldif >/dev/null 2>&1';
logs.logs('BACKUP_MYSQL:: ' + cmd);
logs.OutputCmd(cmd);
writeln('Compress files...');
logs.OutputCmd('/etc/init.d/artica-postfix start ldap');
logs.OutputCmd('/bin/cp -rf /etc/artica-postfix/* '+backup_path+'/'+sdate+'/etc');
targetf:=sdate+'.tar.gz';
logs.OutputCmd('cd '+backup_path+'/'+sdate + ' && /bin/tar -czf '+targetf+' *');
logs.OutputCmd('/bin/mv '+backup_path+'/'+sdate +'/'+ targetf+' '+backup_path+'/');
logs.OutputCmd('/bin/rm -rf '+backup_path+'/'+sdate);
size:=logs.GetFileBytes(backup_path+'/'+targetf);
logs.mysql_logs('6','1','Succes create backup '+targetf+ ' ' +IntToStr(size)+' bytes');
logs.Syslogs('Succes create artica backup '+targetf+ ' ' +IntToStr(size)+' bytes');
exit('New contener ' + targetf + ' created');

end;
//##############################################################################
function myconf.mysqldump_path():string;
begin
    if FileExists('/usr/bin/mysqldump') then exit('/usr/bin/mysqldump');
    if FileExists('/opt/artica/mysql/bin/mysqldump') then exit('/opt/artica/mysql/bin/mysqldump');
end;
//##############################################################################

function myconf.TEMP_DATE():string;
var
   txt:string;
   J:TstringList;
begin

fpsystem('date +%Y-%m-%H-%M >/opt/artica/logs/date.txt');
J:=TStringList.Create;
J.LoadFromFile('/opt/artica/logs/date.txt');
DeleteFile('/opt/artica/logs/date.txt');
txt:=trim(J.Strings[0]);
result:=txt;

end;
//##############################################################################
function myconf.TEMP_SEC():string;
var
   txt:string;
   J:TstringList;
begin

fpsystem('date +%s >/opt/artica/logs/date.txt');
J:=TStringList.Create;
J.LoadFromFile('/opt/artica/logs/date.txt');
DeleteFile('/opt/artica/logs/date.txt');
txt:=trim(J.Strings[0]);
result:=txt;

end;
//##############################################################################
procedure myconf.ARTICA_POLICY_START();
var
   logs:Tlogs;
   PolicyFilterPath:string;
   Rootpath:string;
begin


 if not FileExists(postfix.POSFTIX_POSTCONF_PATH()) then exit;
 logs:=Tlogs.Create;

     Rootpath:=get_ARTICA_PHP_PATH();
     PolicyFilterPath:=Rootpath+ '/bin/artica-policy';

 if get_INFOS('ArticaPolicyEnabled')<>'1' then begin
      logs.Debuglogs('ARTICA_POLICY_START:: ArticaPolicyEnabled<>1 abort...');
      exit;
 end;
 if not SYSTEM_PROCESS_EXIST(ARTICA_POLICY_GET_PID()) then begin
           MonShell(PolicyFilterPath,false);
           logs.DebugLogs('Starting......: artica-policy daemon pid '+ARTICA_POLICY_GET_PID());
           end else begin
              if ExtractFileName(ParamStr(0))<>'process1' then  logs.DebugLogs('Starting......: artica-policy daemon is already running using PID ' + ARTICA_POLICY_GET_PID() + '...');
           end;
 end;
//##############################################################################
function myconf.SASLPASSWD_PATH():string;
begin
  if FileExists('/opt/artica/bin/saslpasswd2') then exit('/opt/artica/bin/saslpasswd2');
  if FileExists('/usr/sbin/saslpasswd2') then exit('/usr/sbin/saslpasswd2');
end;
//##############################################################################


procedure myconf.ARTICA_START();
 var
    count      :integer;
    Rootpath   :string;
    articaPath :string;
begin
     logs:=Tlogs.Create;
     count:=0;
     Rootpath:=get_ARTICA_PHP_PATH();
     articaPath:=Rootpath + '/bin/artica-postfix';
     ForceDirectories(Rootpath + '/ressources/logs');

     if FileExists('/etc/artica-postfix/autokill') then DeleteFile('/etc/artica-postfix/autokill');

     if FileExists('/opt/artica/lib/libssl.so.0.9.8') then begin
        if not FileExists('/lib/libssl.so.0.9.8') then fpsystem('/bin/cp /opt/artica/lib/libssl.so.0.9.8 /lib/libssl.so.0.9.8');
     end;

     if FileExists('/opt/artica/lib/libcrypto.so.0.9.8') then begin
        if not FileExists('/lib/libcrypto.so.0.9.8') then fpsystem('/bin/cp /opt/artica/lib/libcrypto.so.0.9.8 /lib/libcrypto.so.0.9.8');
     end;

     if FileExists('/opt/artica/lib/libcom_err.so.3') then begin
        if not FileExists('/lib/libcom_err.so.3') then fpsystem('/bin/ln -s /opt/artica/lib/libcom_err.so.3 /lib/libcom_err.so.3');
     end;


     if not SYSTEM_PROCESS_EXIST(ARTICA_DAEMON_GET_PID()) then begin
        logs.logs('ARTICA_START:: Starting artica daemon');
        if FileExists('/opt/artica/logs/crossroads.syslog.log') then fpsystem('/bin/rm -rf /opt/artica/logs/crossroads.syslog.log');

        logs.logs('ARTICA_START:: Start artica service server "' + articaPath+ '"');
        fpsystem(articaPath);
        while not SYSTEM_PROCESS_EXIST(ARTICA_DAEMON_GET_PID()) do begin
              sleep(100);
              inc(count);
              if count>200 then begin
                 logs.DebugLogs('Starting......: Artica daemon... (failed!!!)');
                 exit;
              end;
        end;

      end else begin
        if ExtractFileName(ParamStr(0))<>'process1' then  logs.DebugLogs('Starting......: Artica daemon is already running using PID ' + ARTICA_DAEMON_GET_PID() + '...');
        exit;
     end;
     logs.logs('ARTICA_START:: END');
     logs.DebugLogs('Starting......: Artica daemon with new PID ' + ARTICA_DAEMON_GET_PID() + '...');


end;
//#############################################################################
procedure myconf.ARTICA_TAIL_START();
 var
    count      :integer;
begin

     count:=0;
     if not FileExists(get_ARTICA_PHP_PATH() + '/bin/artica-tail') then exit;
     if not SYSTEM_PROCESS_EXIST(ARTICA_TAIL_PID()) then begin

        fpsystem(get_ARTICA_PHP_PATH() + '/bin/artica-tail');
        while not SYSTEM_PROCESS_EXIST(ARTICA_TAIL_PID()) do begin
              sleep(100);
              inc(count);
              if count>200 then begin
                 logs.DebugLogs('Starting......: artica-tail... (failed!!!)');
                 exit;
              end;
        end;

      end else begin
      if ExtractFileName(ParamStr(0))<>'process1' then logs.DebugLogs('Starting......: artica-tail daemon is already running using PID ' + ARTICA_TAIL_PID() + '...');
        exit;
     end;

     logs.DebugLogs('Starting......: artica-tail daemon with new PID ' + ARTICA_TAIL_PID() + '...');
end;
//#############################################################################

function myconf.ROUNDCUBE_DEFAULT_CONFIG():string;
var
   l:TstringList;
begin
l:=TStringList.Create;
l.Add('<?php');
l.Add('$rcmail_config = array();');
l.Add('$rcmail_config["debug_level"] = 1;');
l.Add('$rcmail_config["enable_caching"] = TRUE;');
l.Add('$rcmail_config["message_cache_lifetime"] = "10d";');
l.Add('$rcmail_config["auto_create_user"] = TRUE;');
l.Add('$rcmail_config["default_host"] = "127.0.0.1";');
l.Add('$rcmail_config["default_port"] = 143;');
l.Add('$rcmail_config["username_domain"] = "";');
l.Add('$rcmail_config["mail_domain"] = "";');
l.Add('$rcmail_config["virtuser_file"] = "";');
l.Add('$rcmail_config["virtuser_query"] = "";');
l.Add('$rcmail_config["smtp_server"] = "127.0.0.1";');
l.Add('$rcmail_config["smtp_port"] = 25;');
l.Add('$rcmail_config["smtp_user"] = "";');
l.Add('$rcmail_config["smtp_pass"] = "";');
l.Add('$rcmail_config["smtp_auth_type"] = "";');
l.Add('$rcmail_config["smtp_helo_host"] = "";');
l.Add('$rcmail_config["smtp_log"] = TRUE;');
l.Add('$rcmail_config["list_cols"] = array("subject", "from", "date", "size");');
l.Add('$rcmail_config["skin_path"] = "skins/default/";');
l.Add('$rcmail_config["skin_include_php"] = FALSE;');
l.Add('$rcmail_config["temp_dir"] = "temp/";');
l.Add('$rcmail_config["log_dir"] = "logs/";');
l.Add('$rcmail_config["session_lifetime"] = 10;');
l.Add('$rcmail_config["ip_check"] = false;');
l.Add('$rcmail_config["double_auth"] = false;');
l.Add('$rcmail_config["des_key"] = "rcmail-!24ByteDESkey*Str";');
l.Add('$rcmail_config["locale_string"] = "en";');
l.Add('$rcmail_config["date_short"] = "D H:i";');
l.Add('$rcmail_config["date_long"] = "d.m.Y H:i";');
l.Add('$rcmail_config["date_today"] = "H:i";');
l.Add('$rcmail_config["useragent"] = "RoundCube Webmail/0.1";');
l.Add('$rcmail_config["product_name"] = "RoundCube Webmail With Artica";');
l.Add('$rcmail_config["imap_root"] = "";');
l.Add('$rcmail_config["drafts_mbox"] = "Drafts";');
l.Add('$rcmail_config["junk_mbox"] = "Junk";');
l.Add('$rcmail_config["sent_mbox"] = "Sent";');
l.Add('$rcmail_config["trash_mbox"] = "Trash";');
l.Add('$rcmail_config["default_imap_folders"] = array("INBOX", "Drafts", "Sent", "Junk", "Trash");');
l.Add('$rcmail_config["create_default_folders"] = TRUE;');
l.Add('$rcmail_config["protect_default_folders"] = TRUE;');
l.Add('$rcmail_config["skip_deleted"] = FALSE;');
l.Add('$rcmail_config["read_when_deleted"] = TRUE;');
l.Add('$rcmail_config["flag_for_deletion"] = TRUE;');
l.Add('$rcmail_config["mdn_requests"] = 0;');
l.Add('$rcmail_config["default_charset"] = "ISO-8859-1";');
l.Add('$rcmail_config["enable_spellcheck"] = TRUE;');
l.Add('$rcmail_config["spellcheck_uri"] = "";');
l.Add('$rcmail_config["spellcheck_languages"] = array("en"=>"English", "de"=>"Deutsch");');
l.Add('$rcmail_config["generic_message_footer"] = "";');
l.Add('$rcmail_config["http_received_header"] = false;');
l.Add('$rcmail_config["mail_header_delimiter"] = NULL;');
l.Add('$rcmail_config["session_domain"] = "";');
l.Add('$rcmail_config["dont_override"] = array();');
l.Add('$rcmail_config["javascript_config"] = array("read_when_deleted", "flag_for_deletion");');
l.Add('$rcmail_config["include_host_config"] = false;');
l.Add('$rcmail_config["enable_installer"] = false;');
l.Add('$rcmail_config["pagesize"] = 40;');
l.Add('$rcmail_config["timezone"] = intval(date("O"))/100 - date("I");');
l.Add('$rcmail_config["dst_active"] = (bool)date("I");');
l.Add('$rcmail_config["prefer_html"] = TRUE;');
l.Add('$rcmail_config["htmleditor"] = TRUE;');
l.Add('$rcmail_config["prettydate"] = TRUE;');
l.Add('$rcmail_config["message_sort_col"] = "date";');
l.Add('$rcmail_config["message_sort_order"] = "DESC";');
l.Add('$rcmail_config["draft_autosave"] = 300;');
l.Add('$rcmail_config["preview_pane"] = FALSE;');
l.Add('$rcmail_config["max_pagesize"] = 200;');
l.Add('$rcmail_config["mime_magic"] = "/usr/share/misc/magic";');
l.Add('?>');
result:=l.Text;
l.free;
end;
//#############################################################################
function myconf.ROUNDCUBE_MYSQL_CONFIG():string;
var
l:TstringList;
root,password,port,st:string;
begin
  st      :='';
  result  :='';
  root    :=MYSQL_ROOT();
  password:=MYSQL_PASSWORD();
  port    :=MYSQL_SERVER_PARAMETERS_CF('port');

  if length(password)>0 then begin
     st:=root + ':' + password;
  end else begin
       st:=root;
  end;
l:=TstringList.Create;
l.Add('<?php');
l.Add('$rcmail_config = array();');
l.Add('$rcmail_config["db_dsnw"] ="mysql://' + st +'@127.0.0.1:' + port+'/roundcubemail";');
l.Add('$rcmail_config["db_dsnr"] = "";');
l.Add('$rcmail_config["db_backend"] = "db";');
l.Add('$rcmail_config["db_max_length"] = 512000;  // 500K');
l.Add('$rcmail_config["db_persistent"] = FALSE;');
l.Add('$rcmail_config["db_table_users"] = "users";');
l.Add('$rcmail_config["db_table_identities"] = "identities";');
l.Add('$rcmail_config["db_table_contacts"] = "contacts";');
l.Add('$rcmail_config["db_table_session"] = "session";');
l.Add('$rcmail_config["db_table_cache"] = "cache";');
l.Add('$rcmail_config["db_table_messages"] = "messages";');
l.Add('$rcmail_config["db_sequence_users"] = "user_ids";');
l.Add('$rcmail_config["db_sequence_identities"] = "identity_ids";');
l.Add('$rcmail_config["db_sequence_contacts"] = "contact_ids";');
l.Add('$rcmail_config["db_sequence_cache"] = "cache_ids";');
l.Add('$rcmail_config["db_sequence_messages"] = "message_ids";');
l.Add('?>');
l.SaveToFile('/usr/share/roundcubemail/config/db.inc.php');
l.free;
end;
//#############################################################################
procedure myconf.BOA_START();
var
   BoaPath:string;
   Rootpath:string;
   logs:Tlogs;
begin
logs:=tlogs.Create;
Rootpath:=get_ARTICA_PHP_PATH();
BoaPath:=Rootpath + '/bin/boa -c /etc/artica-postfix -f /etc/artica-postfix/httpd.conf -l 4';

if not SYSTEM_PROCESS_EXIST(BOA_DAEMON_GET_PID()) then begin
        BOA_SET_CONFIG();
        BOA_FIX_ETC_HOSTS();
        logs.DebugLogs('BOA_START:: Starting......: BOA daemon...');
        logs.Debuglogs('BOA_START:: Start boa http server "' + BoaPath + '"');
        
        fpsystem(BoaPath +' >/dev/null 2>&1');
   end else begin
       if ExtractFileName(ParamStr(0))<>'process1' then begin
        logs.DebugLogs('Starting......: BOA daemon is already running using PID ' + BOA_DAEMON_GET_PID()+ '...');
       end;
       exit;
     end;

if not SYSTEM_PROCESS_EXIST(BOA_DAEMON_GET_PID()) then begin
   logs.DebugLogs('Starting......: BOA failed to start');
end;

end;
//##############################################################################
procedure myconf.BOA_FIX_ETC_HOSTS();
var
   RegExpr:TRegExpr;
   list:TstringList;
   i:Integer;
   found:boolean;
   hostname:string;
begin
    found:=false;
    hostname:=LINUX_GET_HOSTNAME();
    list:=TStringList.Create;
    if FileExists('/etc/hosts') then begin
       RegExpr:=TRegExpr.Create;
       RegExpr.Expression:='^127\.\0\.1\.1';
       list.LoadFromFile('/etc/hosts');
       for i:=0 to list.Count-1 do begin
            if RegExpr.Exec(list.Strings[i]) then begin
                 list.Strings[i]:='127.0.1.1'+chr(9) + hostname + chr(9) + hostname;
                 found:=true;
                 break;
            end;
       end;
    end;
    
    
    RegExpr.Free;
    if not found then begin
       list.Add('127.0.1.1'+chr(9) + hostname + chr(9) + hostname);
    end;
    
    list.SaveToFile('/etc/hosts');
    list.free;

end;
//##############################################################################
function myconf.MAILGRAPH_RDD_PATH():string;
var
   RegExpr:TRegExpr;
   list:TstringList;
   i:Integer;
begin
  if not FileExists('/etc/init.d/mailgraph') then exit('/opt/artica/var/rrd/mailgraph');
  list:=TstringList.Create;
  list.LoadFromFile('/etc/init.d/mailgraph');
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='RRD_DIR="(.+?)"';
  for i:=0 to list.Count-1 do begin
       if RegExpr.Exec(list.Strings[i]) then begin
          result:=RegExpr.Match[1];
          break;
       end;
  end;
  
  list.Free;
  RegExpr.Free;

end;
//##############################################################################
function MyConf.ARTICA_FILTER_CHECK_PERMISSIONS():string;
var
   queuePath:string;

begin
     result:='';

     QueuePath:=ARTICA_FILTER_QUEUEPATH();

     forcedirectories('/var/log/artica-postfix');
     forcedirectories('/usr/share/artica-postfix/LocalDatabases');
     forcedirectories('/var/quarantines');

     if not FileExists(QueuePath) then begin
        writeln('creating folder ' +  QueuePath);
        forcedirectories(QueuePath);

        fpsystem('/bin/chown -R postfix:postfix ' + QueuePath + ' >/dev/null 2>&1');
     end;

    forcedirectories(QueuePath+'/bightml');
    fpsystem('/bin/chmod 755 /var/log/artica-postfix');
    fpsystem('/bin/chown -R postfix:postfix ' + QueuePath + ' >/dev/null 2>&1');

    if FileExists('/usr/local/bin/dspam') then begin
         fpsystem('/bin/chown artica:root /usr/local/bin/dspam >/dev/null 2>&1');
         fpsystem('/bin/chown -R postfix:postfix /etc/dspam >/dev/null 2>&1');
         ForceDirectories('/usr/local/var/dspam/data >/dev/null 2>&1');
         ForceDirectories('/var/spool/dspam >/dev/null 2>&1');
         fpsystem('/bin/chown -R postfix:postfix /var/spool/dspam >/dev/null 2>&1');
         fpsystem('/bin/chown -R postfix:postfix /usr/local/var/dspam >/dev/null 2>&1');
    end;



end;
//##############################################################################

function MyConf.FETCHMAIL_START_DAEMON():boolean;
var
 fetchmail_daemon_pool,fetchmailpid,fetchmailpath:string;
 fetchmail_count:integer;
 D:boolean;
begin
     result:=true;
     D:=COMMANDLINE_PARAMETERS('debug');
     fetchmailpid:=FETCHMAIL_PID();

     if SYSTEM_PROCESS_EXIST(fetchmailpid) then begin
         if ExtractFileName(ParamStr(0))<>'process1' then  logs.DebugLogs('Starting......: fetchmail is already running using PID ' + fetchmailpid + '...');
         exit;
     end;

     fetchmailpath:=FETCHMAIL_BIN_PATH();
     fetchmail_daemon_pool:=FETCHMAIL_SERVER_PARAMETERS('daemon');
     fetchmail_count:=FETCHMAIL_COUNT_SERVER();

     LOGS.logs('FETCHMAIL_START_DAEMON:: PID=' +fetchmailpid + ';Path='+fetchmailpath+';Pool='+ fetchmail_daemon_pool+';Servers Count=' + INtTOStr(fetchmail_count));

     if FileExists('/opt/artica/logs/fetchmail.daemon.started') then DeleteFile('/opt/artica/logs/fetchmail.daemon.started');
     if length(fetchmail_daemon_pool)=0 then fpsystem('/bin/echo "Artica...No config saved /etc/fetchmailrc" > /opt/artica/logs/fetchmail.daemon.started');



    if fetchmail_count>0 then begin
     if length(fetchmailpath)>0 then begin
        if length(fetchmail_daemon_pool)>0 then begin
           if not SYSTEM_PROCESS_EXIST(fetchmailpid) then begin
              logs.DebugLogs('Starting......: fetchmail daemon...');
              if D then showscreen('SYSTEM_START_ARTICA_DAEMON:: Start FETCHMAIL service server ' + IntToStr(fetchmail_count) + ' server(s)');
              if FileExists('/opt/artica/logs/fetchmail.daemon.started') then DeleteFile('/opt/artica/logs/fetchmail.daemon.started');
              logs.logs(fetchmailpath + ' --daemon ' + fetchmail_daemon_pool + ' --pidfile /var/run/fetchmail.pid --fetchmailrc /etc/fetchmailrc > /opt/artica/logs/fetchmail.daemon.started 2>&1');
              fpsystem(fetchmailpath + ' --daemon ' + fetchmail_daemon_pool + ' --pidfile /var/run/fetchmail.pid --fetchmailrc /etc/fetchmailrc > /opt/artica/logs/fetchmail.daemon.started 2>&1');
           end else begin
               if ExtractFileName(ParamStr(0))<>'process1' then  logs.DebugLogs('Starting......: fetchmail is already running using PID ' + fetchmailpid + '...');
           end;
        end;
     end;
    end;
end;
//##############################################################################

procedure myConf.DNSMASQ_START_DAEMON();
var bin_path,pid,cache,cachecmd:string;
begin
    cache:=DNSMASQ_GET_VALUE('cache-size');
    bin_path:=DNSMASQ_BIN_PATH();
    if not FileExists(bin_path) then begin
      // logs.DebugLogs('Starting......: dnsmasq is not installed ('+bin_path+')...');
       exit;
    end;
    pid:=DNSMASQ_PID();
    if SYSTEM_PROCESS_EXIST(pid) then begin
       if ExtractFileName(ParamStr(0))<>'process1' then logs.DebugLogs('Starting......: dnsmasq already exists using pid ' + pid+ '...');
       exit;
    end;

    if FileExists('/etc/init.d/dnsmasq') then begin
       fpsystem('/etc/init.d/dnsmasq start');
       exit;
    end;

    if length(cache)=0 then begin
       cachecmd:=' --cache-size=1000';
    end;
    forceDirectories('/var/log/dnsmasq');
    logs.DebugLogs('Starting......: dnsmasq daemon...');
    fpsystem(bin_path + ' --pid-file=/var/run/dnsmasq.pid --conf-file=/etc/dnsmasq.conf --user=root --log-facility=/var/log/dnsmasq/dnsmasq.log' + cachecmd);
end;
//##############################################################################
function myConf.DNSMASQ_PID():string;
var
   RegExpr:TRegExpr;
   filedatas:TStringList;
   i:Integer;
begin

result:='';
     if not FileExists('/var/run/dnsmasq.pid') then exit();
     filedatas:=TStringList.Create;
     filedatas.LoadFromFile('/var/run/dnsmasq.pid');
     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='([0-9]+)';
     For i:=0 to filedatas.Count-1 do begin
         if RegExpr.Exec(filedatas.Strings[i]) then begin
               result:=RegExpr.Match[1];
               break;
         end;

     end;

    RegExpr.Free;
    filedatas.Free;

end;
//##############################################################################
procedure myconf.KAV4PROXY_START();
 var
    pid:string;
    count:integer;
begin
  count:=0;
  if not FileExists('/opt/kaspersky/kav4proxy/sbin/kav4proxy-kavicapserver') then begin
      if ExtractFileName(ParamStr(0))<>'process1'  then logs.DebugLogs('Starting......: Kaspersky Antivirus for SQUID is not installed... skip');
      exit;
  end;
  pid:=KAV4PROXY_PID();
  if SYSTEM_PROCESS_EXIST(pid) then begin
   if ExtractFileName(ParamStr(0))<>'process1' then  logs.DebugLogs('Starting......: Kaspersky Antivirus for SQUID already running using pid ' + pid+ '...');
   exit;
  end;
  forceDirectories('/var/run/kav4proxy');
  fpsystem('/bin/chown kluser:klusers /var/run/kav4proxy');
  fpsystem('/etc/init.d/kav4proxy start >/dev/null 2>&1');


  while not SYSTEM_PROCESS_EXIST(KAV4PROXY_PID()) do begin

        sleep(100);
        inc(count);
        if count>20 then begin
           logs.Syslogs('Unable to start Kaspersky for Squid Proxy');
           break;
        end;
  end;

   pid:=KAV4PROXY_PID();
  if SYSTEM_PROCESS_EXIST(pid) then begin
   logs.DebugLogs('Starting......: Kaspersky Antivirus for SQUID started with new pid ' + pid+ '...');
  end else begin
   logs.DebugLogs('Starting......: Kaspersky Antivirus for SQUID Failed to start...');
  end;
end;
//##############################################################################
procedure myconf.ARTICA_TAIL_STOP();
 var
    pid:string;
    count:integer;
begin
count:=0;

  pid:=ARTICA_TAIL_PID();
  if SYSTEM_PROCESS_EXIST(pid) then begin
   writeln('Stopping artica-tail.........: ' + pid + ' PID');
   fpsystem('/bin/kill ' + pid + ' >/dev/null 2>&1');

  while SYSTEM_PROCESS_EXIST(ARTICA_TAIL_PID()) do begin
        sleep(100);
        inc(count);
        fpsystem('/bin/kill ' + ARTICA_TAIL_PID() + ' >/dev/null 2>&1');
        if count>30 then begin
           fpsystem('/bin/kill -9 ' + ARTICA_TAIL_PID() + ' >/dev/null 2>&1');
           break;
        end;
  end;
   exit;
  end;

  if not SYSTEM_PROCESS_EXIST(ARTICA_TAIL_PID()) then begin
     writeln('Stopping artica-tail.........: Already stopped');
  end;
end;
//##############################################################################




procedure myconf.ARTICA_STOP();
 var
    pid:string;
    count:integer;
    artica_others_filter:string;
    l:TstringList;
begin
count:=0;

  pid:=ARTICA_DAEMON_GET_PID();
  if SYSTEM_PROCESS_EXIST(pid) then begin
   fpsystem('/bin/kill -9 ' + pid + ' >/dev/null 2>&1');

   forcedirectories('/etc/artica-postfix');
   l:=Tstringlist.Create;
   l.Add('####');
   l.SaveToFile('/etc/artica-postfix/autokill');
   l.Free;




  while SYSTEM_PROCESS_EXIST(ARTICA_DAEMON_GET_PID()) do begin
        sleep(100);
        inc(count);
        fpsystem('/bin/kill -9 ' + ARTICA_DAEMON_GET_PID() + ' >/dev/null 2>&1');
        if count>30 then break;
  end;

   if SYSTEM_PROCESS_EXIST(SYSTEM_GET_PID('/etc/artica-postfix/artica-process1.pid')) then begin
        writeln('Stopping artica-process NÂ°1..: '+SYSTEM_GET_PID('/etc/artica-postfix/artica-process1.pid') + ' PID');
        while SYSTEM_PROCESS_EXIST(SYSTEM_GET_PID('/etc/artica-postfix/artica-process1.pid')) do begin
        sleep(100);
        inc(count);
        fpsystem('/bin/kill -9 ' + ARTICA_DAEMON_GET_PID() + ' >/dev/null 2>&1');
        if count>30 then break;
        end;
   end;


   pid:=trim(SYSTEM_PROCESS_LIST_PID('/usr/share/artica-postfix/bin/process1'));
   if length(pid)>0 then begin
        fpsystem('/bin/kill -9 ' + pid);
   end;



 pid:=trim(SYSTEM_PROCESS_LIST_PID('/usr/share/artica-postfix/bin/artica-postfix'));
 if length(pid)>0 then begin
        fpsystem('/bin/kill -9 ' + pid);
   end;


  artica_others_filter:=ARTICA_FILTER_GET_ALL_PIDS();
  if length(trim(artica_others_filter))>0 then begin
      fpsystem('kill -9 ' +artica_others_filter);
   end;

   exit;
  end;

  if not SYSTEM_PROCESS_EXIST(ARTICA_DAEMON_GET_PID()) then begin
     writeln('Stopping Artica..............: Already stopped');
  end;
end;
procedure myconf.KAV4PROXY_STOP();
 var
    pid:string;
    count:integer;
begin
count:=0;
  if not FileExists('/opt/kaspersky/kav4proxy/sbin/kav4proxy-kavicapserver') then exit;
  pid:=KAV4PROXY_PID();
  if SYSTEM_PROCESS_EXIST(pid) then begin
   writeln('Stopping KAV antivirus SQUID.: ' + pid + ' PID');
   fpsystem('/etc/init.d/kav4proxy stop >/dev/null 2>&1');
  while SYSTEM_PROCESS_EXIST(KAV4PROXY_PID()) do begin
        sleep(100);
        inc(count);
        fpsystem('/etc/init.d/kav4proxy stop >/dev/null 2>&1');
        if count>20 then break;
  end;
   exit;
  end;

  if not SYSTEM_PROCESS_EXIST(pid) then begin
     writeln('Stopping KAV antivirus SQUID.: Already stopped');
  end;
end;
//##############################################################################
function myConf.KAV4PROXY_PID():string;
var
   RegExpr:TRegExpr;
   filedatas:TStringList;
   i:Integer;
begin
    result:='';
    if not FileExists('/opt/kaspersky/kav4proxy/sbin/kav4proxy-kavicapserver') then exit;
    if not FileExists('/var/run/kav4proxy/kavicapserver.pid') then exit;
filedatas:=TStringList.Create;
     filedatas.LoadFromFile('/var/run/kav4proxy/kavicapserver.pid');
     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='([0-9]+)';
     For i:=0 to filedatas.Count-1 do begin
         if RegExpr.Exec(filedatas.Strings[i]) then begin
               result:=RegExpr.Match[1];
               break;
         end;

     end;

    RegExpr.Free;
    filedatas.Free;

end;
//##############################################################################



procedure myconf.KAV6_STOP();
var
   filedatas:TStringList;
   RegExpr:TRegExpr;
   i:Integer;
begin
  if not FileExists('/opt/kav/5.6/kavmilter/bin/kavmilter') then exit;
  fpsystem('/bin/ps ax | awk ''{if (match($5, ".*/kavmilter$") || $5 == "$KAV_MILTER") print $1}'' >/opt/artica/logs/kav6.pids');
  if not FileExists('/opt/artica/logs/kav6.pids') then exit;
  filedatas:=TStringList.Create;
  filedatas.LoadFromFile('/opt/artica/logs/kav6.pids');
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='([0-9]+)';
  if filedatas.Count=0 then begin
     logs.logs('KAV6_STOP:: already stopped...');
     writeln('Stopping KAV antivirus milter: Already stopped');
     exit;
     filedatas.free;
     RegExpr.free;
  end;
  For i:=0 to filedatas.Count-1 do begin
     if RegExpr.Exec(filedatas.Strings[i]) then begin
          logs.logs('KAV6_STOP:: /bin/kill ' + RegExpr.Match[1]);
          writeln('Stopping KAV antivirus milter: ' + RegExpr.Match[1] + ' PID');
          fpsystem('/bin/kill ' + RegExpr.Match[1]);
     end;

  end;



end;
//##############################################################################
function MyConf.KAV_MILTER_MEMORY():string;
var
   filedatas:TstringList;
   i:integer;
   pidlists:string;
   RegExpr:TRegExpr;
   D:Boolean;
begin
  pidlists:='';
  D:=COMMANDLINE_PARAMETERS('debug');

  if D then writeln('KAV_MILTER_PID:: Is There any kavmilter here ???');
  if not FileExists('/opt/kav/5.6/kavmilter/bin/kavmilter') then exit;
  fpsystem('/bin/ps ax | awk ''{if (match($5, ".*/kavmilter$") || $5 == "$KAV_MILTER") print $1}'' >/opt/artica/logs/kav6.pids');
  if not FileExists('/opt/artica/logs/kav6.pids') then begin
  if D then writeln('KAV_MILTER_PID:: unable to stat /opt/artica/logs/kav6.pids');
  exit;
  end;
  filedatas:=TStringList.Create;
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='([0-9]+)';
  if FileExists('/opt/artica/logs/kav6.pids') then   filedatas.LoadFromFile('/opt/artica/logs/kav6.pids');
  For i:=0 to filedatas.Count-1 do begin
     if RegExpr.Exec(filedatas.Strings[i]) then begin
        if SYSTEM_PROCESS_EXIST(RegExpr.Match[1]) then begin
           pidlists:=pidlists + RegExpr.Match[1] + '=' + IntToStr(SYSTEM_PROCESS_MEMORY(RegExpr.Match[1])) + ';';
           if D then writeln('KAV_MILTER_PID:: PID: ' + RegExpr.Match[1] );
        end;
     end;
  end;

  result:=trim(pidlists);
end;
//##############################################################################

function Myconf.KAV_MILTER_PID():string;
var
   filedatas:TstringList;
   i:integer;
   pidlists:string;
   RegExpr:TRegExpr;
   D:Boolean;
begin
  pidlists:='';
  D:=COMMANDLINE_PARAMETERS('debug');

  if D then writeln('KAV_MILTER_PID:: Is There any kavmilter here ???');
  if not FileExists('/opt/kav/5.6/kavmilter/bin/kavmilter') then exit;
  fpsystem('/bin/ps ax | awk ''{if (match($5, ".*/kavmilter$") || $5 == "$KAV_MILTER") print $1}'' >/opt/artica/logs/kav6.pids');
  if not FileExists('/opt/artica/logs/kav6.pids') then begin
  if D then writeln('KAV_MILTER_PID:: unable to stat /opt/artica/logs/kav6.pids');
  exit;
  end;
  filedatas:=TStringList.Create;
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='([0-9]+)';
  if FileExists('/opt/artica/logs/kav6.pids') then   filedatas.LoadFromFile('/opt/artica/logs/kav6.pids');
  For i:=0 to filedatas.Count-1 do begin
     if RegExpr.Exec(filedatas.Strings[i]) then begin
        if SYSTEM_PROCESS_EXIST(RegExpr.Match[1]) then begin
           pidlists:=pidlists + RegExpr.Match[1] + ' ';
           if D then writeln('KAV_MILTER_PID:: PID: ' + RegExpr.Match[1] );
        end;
     end;
  end;

  result:=trim(pidlists);

end;
//##############################################################################

function Myconf.INADYN_PID():string;
var
   filedatas:TstringList;
   i:integer;
   pidlists:string;
   RegExpr:TRegExpr;
   D:Boolean;
begin
  pidlists:='';
  D:=COMMANDLINE_PARAMETERS('debug');


  fpsystem('/bin/ps ax | awk ''{if (match($5, ".*/bin/inadyn")) print $1}'' >/opt/artica/logs/inadyn.pids');
  if not FileExists('/opt/artica/logs/inadyn.pids') then begin
  if D then writeln('INADYN_PID:: unable to stat /opt/artica/logs/inadyn.pids');
  exit;
  end;
  filedatas:=TStringList.Create;
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='([0-9]+)';
  if FileExists('/opt/artica/logs/inadyn.pids') then   filedatas.LoadFromFile('/opt/artica/logs/inadyn.pids');
  For i:=0 to filedatas.Count-1 do begin
     if RegExpr.Exec(filedatas.Strings[i]) then begin
        if SYSTEM_PROCESS_EXIST(RegExpr.Match[1]) then begin
           pidlists:=pidlists + RegExpr.Match[1] + ' ';
           if D then writeln('INADYN_PID:: PID: ' + RegExpr.Match[1] );
        end;
     end;
  end;

  result:=trim(pidlists);

end;
//##############################################################################
procedure myconf.KAV6_START();
var
    pidlists:string;
    RegExpr:TRegExpr;
    l:TstringList;
    i:Integer;
    Expired:boolean;
begin
Expired:=false;
if not FileExists('/opt/kav/5.6/kavmilter/bin/kavmilter') then exit;
if FileExists('/opt/artica/license.expired.conf') then exit;


pidlists:='';
pidlists:=KAV_MILTER_PID();

if get_INFOS('kavmilterEnable')<>'1' then exit;

   if length(pidlists)>0 then begin
       if ExtractFileName(ParamStr(0))<>'process1' then logs.DebugLogs('Starting......: Kaspersky Mail server already started running using pid ' + pidlists+ '...');
       exit;
   end;
   logs.logs('KAV6_START:: /etc/init.d/kavmilterd start >/opt/artica/logs/kav6.start 2>&1');
   fpsystem('/etc/init.d/kavmilterd start >/opt/artica/logs/kav6.start 2>&1');

   l:=TstringList.create;
   l.LoadFromFile('/opt/artica/logs/kav6.start');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='Active key expired';
   for i:=0 to l.Count-1 do begin
      if RegExpr.Exec(l.Strings[i]) then begin
         Expired:=true;
         break;
      end;

   end;
   if Expired=true then begin
       l.SaveToFile('/opt/artica/license.expired.conf');
       logs.Debuglogs('Starting......: Kaspersky Mail server (License expired !)');
   end else begin
      if length(trim(KAV_MILTER_PID()))>0 then begin
         logs.DebugLogs('Starting......: Kaspersky Mail server (' + KAV_MILTER_PID() + ')');
      end;
   end;


end;
//##############################################################################


procedure myConf.DNSMASQ_STOP_DAEMON();
var bin_path,pid:string;
begin

    bin_path:=DNSMASQ_BIN_PATH();
    if not FileExists(bin_path) then exit;
    pid:=DNSMASQ_PID();
    if not SYSTEM_PROCESS_EXIST(pid) then begin
       writeln('Stopping dnsmasq.........: Already stopped');
       exit;
    end;

    if FileExists('/etc/init.d/dnsmasq') then begin
       fpsystem('/etc/init.d/dnsmasq stop');
       exit;
    end;
    writeln('Stopping dnsmasq.........: ' + pid + ' PID');
    fpsystem('kill ' + pid);
end;
//##############################################################################
function MyConf.FETCHMAIL_SERVER_PARAMETERS(param:string):string;
var
   RegExpr:TRegExpr;
   filedatas:TStringList;
   i:integer;
begin
  if not FileExists('/etc/fetchmailrc') then exit;
  filedatas:=TStringList.Create;
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='^set\s+' + param + '\s+(.+)';
  filedatas.LoadFromFile('/etc/fetchmailrc');
   for i:=0 to filedatas.Count -1 do begin
      if RegExpr.Exec(filedatas.Strings[i]) then begin
         result:=trim(RegExpr.Match[1]);
         break;
      end;
   end;

   RegExpr.Free;
   filedatas.free;
end;
//##############################################################################
function MyConf.FETCHMAIL_COUNT_SERVER():integer;
var
   RegExpr:TRegExpr;
   filedatas:TStringList;
   i:integer;
begin
  result:=0;
  if not FileExists('/etc/fetchmailrc') then exit;
  filedatas:=TStringList.Create;
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='^poll\s+(.+)';
  filedatas.LoadFromFile('/etc/fetchmailrc');
   for i:=0 to filedatas.Count -1 do begin
      if RegExpr.Exec(filedatas.Strings[i]) then begin
         inc(result);
         break;
      end;
   end;

   RegExpr.Free;
   filedatas.free;
end;
//##############################################################################


function MyConf.get_MAILGRAPH_RRD():string;
var
   RegExpr:TRegExpr;
   php_path,cgi_path,filedatas:string;
begin

 php_path:=get_ARTICA_PHP_PATH();
 cgi_path:=php_path + '/bin/mailgraph/mailgraph1.cgi';
 if not FileExists(cgi_path) then exit;
 RegExpr:=TRegExpr.create;
 RegExpr.expression:='my \$rrd[|=| ]+[''|"]([\/a-zA-Z0-9-\._]+)[''|"];';
 filedatas:=ReadFileIntoString(cgi_path);
  if  RegExpr.Exec(filedatas) then begin
  result:=RegExpr.Match[1];
  end;
  RegExpr.Free;
end;
//##############################################################################
function MyConf.get_LINUX_DOMAIN_NAME():string;
var data:string;
begin
if not FileExists('/bin/hostname') then exit;
fpsystem('/bin/hostname -d >/opt/artica/logs/hostname.txt');
data:=ReadFileIntoString('tmp/hostname.txt');
result:=trim(data);
end;

//##############################################################################
function MyConf.get_MAILGRAPH_RRD_VIRUS():string;
var
   RegExpr:TRegExpr;
   php_path,cgi_path,filedatas:string;
begin

 php_path:=get_ARTICA_PHP_PATH();
 cgi_path:=php_path + '/bin/mailgraph/mailgraph1.cgi';
 if not FileExists(cgi_path) then exit;
 RegExpr:=TRegExpr.create;
 RegExpr.expression:='my \$rrd_virus[|=| ]+[''|"]([\/a-zA-Z0-9-\._]+)[''|"];';
 filedatas:=ReadFileIntoString(cgi_path);
  if  RegExpr.Exec(filedatas) then begin
  result:=RegExpr.Match[1];
  end;
  RegExpr.Free;
end;

//##############################################################################
procedure MyConf.StripDiezes(filepath:string);
begin
    set_FileStripDiezes(filepath);
end;
procedure MyConf.set_FileStripDiezes(filepath:string);
var
list,list2:TstringList;
i,n:integer;
line:string;
RegExpr:TRegExpr;
begin
 RegExpr:=TRegExpr.create;
 RegExpr.expression:='#';
    if not FileExists(filepath) then exit;
    list:=TstringList.Create();
    list2:=TstringList.Create();
    list.LoadFromFile(filepath);
    n:=-1;
    For i:=0 to  list.Count-1 do begin
        n:=n+1;
         line:=list.Strings[i];
         if length(line)>0 then begin

            if not RegExpr.Exec(list.Strings[i])  then begin
               list2.Add(list.Strings[i]);
            end;
         end;
    end;

     killfile(filepath);
     list2.SaveToFile(filepath);

    RegExpr.Free;
    list2.Free;
    list.Free;
end;
 //##############################################################################
function MyConf.get_httpd_conf():string;
begin
    result:='';
    if fileExists('/opt/artica/conf/artica-www.conf') then exit('/opt/artica/conf/artica-www.conf');

end;
 //##############################################################################
 function MyConf.APACHE_VERSION():string;
var
   RegExpr:TRegExpr;
   l:TstringList;
begin
    if not fileExists('/opt/artica/bin/artica-www') then exit();
    fpsystem('/opt/artica/bin/artica-www -v >/opt/artica/logs/apache.version 2>&1');
    l:=TstringList.Create;
    l.LoadFromFile('/opt/artica/logs/apache.version');
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='Server version: Apache/([0-9\.]+)';
    if RegExpr.Exec(l.Text) then result:=RegExpr.Match[1];
    RegExpr.Free;
    l.free;
end;
 //##############################################################################
function MyConf.PHP5_LIB_MODULES_PATH():string;
begin
  if not FileExists('/opt/artica/bin/php-config') then exit;
  fpsystem('/opt/artica/bin/php-config  --extension-dir >/opt/artica/logs/tmp_php5_ext_dir');
  result:=trim(ReadFileIntoString('/opt/artica/logs/tmp_php5_ext_dir'));
end;



 //##############################################################################
function MyConf.APACHE_PID():string;
var
   httpdconf:string;
   RegExpr:TRegExpr;
   FileData:TStringList;
   PidFile:string;
   i:integer;
   D:boolean;
begin
  result:='';
  D:=COMMANDLINE_PARAMETERS('debug');
  FileData:=TStringList.Create;
  RegExpr:=TRegExpr.Create;

  if not DirectoryExists('/opt/artica/logs') then begin
     if D then writeln('/opt/artica/logs -> doesnt'' exists');
     httpdconf:=get_httpd_conf();
     if D then writeln('Load ->',httpdconf);
     if not FileExists(httpdconf) then exit('0');

     FileData.LoadFromFile(httpdconf);
     RegExpr.Expression:='PidFile\s+(.+)';
     For i:=0 TO FileData.Count -1 do begin
         if RegExpr.Exec(FileData.Strings[i]) then begin
            PidFile:=RegExpr.Match[1];
            break;
         end;
     end;

  end else begin
      PiDFile:='/opt/artica/logs/httpd.pid';
  end;
  if D then writeln('Pid file ->',PiDFile);
  if not FileExists(PidFile) then exit('');
  FileData.LoadFromFile(PiDFile);
  RegExpr.Expression:='([0-9]+)';
  if RegExpr.exec(FileData.Text) then result:=RegExpr.Match[1];
  if result='0' then result:='';
  FileData.Free;
  RegExpr.Free;
end;
 //##############################################################################
function MyConf.APACHE_OBM_PID():string;
var
   RegExpr:TRegExpr;
   FileData:TStringList;
   PidFile:string;
   D:boolean;
begin
  result:='';
  D:=COMMANDLINE_PARAMETERS('debug');


  FileData:=TStringList.Create;
  RegExpr:=TRegExpr.Create;
  PiDFile:='/opt/artica/logs/www.obm.pid';

  if D then writeln('Pid file ->',PiDFile);
  if not FileExists(PidFile) then exit('');
  FileData.LoadFromFile(PiDFile);
  RegExpr.Expression:='([0-9]+)';
  if RegExpr.exec(FileData.Text) then result:=RegExpr.Match[1];
  if result='0' then result:='';
  FileData.Free;
  RegExpr.Free;
end;
 //##############################################################################

 function MyConf.SASLAUTHD_PID():string;
var
   conffile:string;
   RegExpr:TRegExpr;
   FileData:TStringList;
   logs:Tlogs;
   i:integer;
begin
   result:='0';
   logs:=Tlogs.Create;
   if FileExists('/var/run/saslauthd/saslauthd.pid') then conffile:='/var/run/saslauthd/saslauthd.pid';
   if FileExists('/var/run/saslauthd.pid') then conffile:='/var/run/saslauthd.pid';
   if FileExists('/var/run/saslauthd/saslauthd.pid') then conffile:='/var/run/saslauthd/saslauthd.pid';

   if length(conffile)=0 then exit();

  if not FileExists(conffile) then exit();
  RegExpr:=TRegExpr.Create;
  FileData:=TStringList.Create;
  FileData.LoadFromFile(conffile);
  RegExpr.Expression:='([0-9]+)';
  For i:=0 TO FileData.Count -1 do begin
      if RegExpr.Exec(FileData.Strings[i]) then begin
           result:=RegExpr.Match[1];
           break;
      end;
  end;
  
  logs.Debuglogs('SASLAUTHD_PID:: found PID '+ result);
  
  FileData.Free;
  RegExpr.Free;
end;
 //##############################################################################
 function MyConf.CRON_PID():string;
var
   conffile:string;
   RegExpr:TRegExpr;
   FileData:TStringList;

   i:integer;
begin
   result:='0';
  conffile:='/var/run/crond.pid';
  if not FileExists(conffile) then exit('0');
  RegExpr:=TRegExpr.Create;
  FileData:=TStringList.Create;
  FileData.LoadFromFile(conffile);
  RegExpr.Expression:='([0-9]+)';
  For i:=0 TO FileData.Count -1 do begin
      if RegExpr.Exec(FileData.Strings[i]) then begin
           result:=RegExpr.Match[1];
           break;
      end;
  end;
  FileData.Free;
  RegExpr.Free;
end;
 //##############################################################################
procedure MyConf.Cyrus_set_sasl_pwcheck_method(val:string);
var RegExpr:TRegExpr;
list:TstringList;
i:integer;
begin
 RegExpr:=TRegExpr.create;
    list:=TstringList.Create();
    list.LoadFromFile('/etc/imapd.conf');
    for i:=0 to list.Count-1 do begin
          RegExpr.expression:='sasl_pwcheck_method';
          if RegExpr.Exec(list.Strings[i]) then begin
               list.Strings[i]:='sasl_pwcheck_method: ' + val;
          end;

    end;
   list.SaveToFile('/etc/imapd.conf');
   list.Free;
   RegExpr.Free;
end;
 //##############################################################################
function MyConf.CYRUS_IMAPD_CONF_GET_INFOS(value:string):string;
var
   RegExpr:TRegExpr;
   list:TstringList;
   i:integer;
   D:boolean;
begin
D:=COMMANDLINE_PARAMETERS('debug');
 if not FileExists('/etc/imapd.conf') then begin
      if D then ShowScreen('IMAPD_CONF_GET_INFOS::Unable to locate /etc/imapd.conf');
      exit;
 end;

 RegExpr:=TRegExpr.create;
 RegExpr.expression:=value+'[:\s]+([a-z]+)';
 list:=TstringList.Create;
 for i:=0 to list.Count -1 do begin
       if RegExpr.exec(list.Strings[i]) then begin
              result:=Trim(RegExpr.Match[1]);
              if D then ShowScreen('IMAPD_CONF_GET_INFOS::found ' +list.Strings[i] + ' -> ' + result);
              break;
       end;
 end;
 List.Free;
 RegExpr.Free;
end;
 //##############################################################################
function MyConf.Cyrus_get_sasl_pwcheck_method;
var RegExpr:TRegExpr;
datas:string;
begin
 RegExpr:=TRegExpr.create;
 datas:=ReadFileIntoString('/etc/imapd.conf');
 RegExpr.expression:='sasl_pwcheck_method[:\s]+([a-z]+)';
 if RegExpr.Exec(datas) then begin
     result:=Trim(RegExpr.Match[1]);
 end;
 RegExpr.Free;
end;
 //##############################################################################
function MyConf.Cyrus_get_lmtpsocket;
var RegExpr:TRegExpr;
datas:string;
begin
 RegExpr:=TRegExpr.create;
 datas:=ReadFileIntoString('/etc/imapd.conf');
 RegExpr.expression:='lmtpsocket[:\s]+([a-z\/]+)';
 if RegExpr.Exec(datas) then begin
     result:=Trim(RegExpr.Match[1]);
 end;
 RegExpr.Free;
end;
 //##############################################################################

function MyConf.Cyrus_get_admins:string;
var RegExpr:TRegExpr;
datas:string;
begin
 RegExpr:=TRegExpr.create;
 datas:=ReadFileIntoString('/etc/imapd.conf');
 RegExpr.expression:='admins[:\s]+([a-z\.\-_0-9]+)';
 if RegExpr.Exec(datas) then begin
     result:=Trim(RegExpr.Match[1]);
 end;
 RegExpr.Free;
end;
 //##############################################################################
function MyConf.Cyrus_get_value(value:string):string;
var RegExpr:TRegExpr;
datas:string;
begin
 RegExpr:=TRegExpr.create;
 datas:=ReadFileIntoString('/etc/imapd.conf');
 RegExpr.expression:=value+'[:\s]+([a-z\.\-_0-9\s]+)';
 if RegExpr.Exec(datas) then begin
     result:=Trim(RegExpr.Match[1]);
 end;
 RegExpr.Free;
end;
 //##############################################################################
function MyConf.Cyrus_get_adminpassword():string;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
result:=GLOBAL_INI.ReadString('CYRUS','ADMIN_PASSWORD','');
GLOBAL_INI.Free;
end;
 //##############################################################################
procedure MyConf.Cyrus_set_adminpassword(val:string);
var ini:TIniFile;
begin
ini:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
ini.WriteString('CYRUS','ADMIN_PASSWORD',val);
ini.Free;
end;
//#############################################################################
function MyConf.Cyrus_get_admin_name():string;
begin
GLOBAL_INI:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
result:=GLOBAL_INI.ReadString('CYRUS','ADMIN','');
GLOBAL_INI.Free;
end;
 //##############################################################################
procedure MyConf.Cyrus_set_admin_name(val:string);
var ini:TIniFile;
begin
ini:=TIniFile.Create('/etc/artica-postfix/artica-postfix.conf');
ini.WriteString('CYRUS','ADMIN',val);
ini.Free;
end;
 //##############################################################################
function MyConf.KAS_INIT():string;
begin
if FileExists('/etc/init.d/kas3') then result:='/etc/init.d/kas3';
end;
 //##############################################################################

function myConf.KAS_APPLY_RULES(path:string):boolean;
var commands:string;
begin
result:=false;
if fileExists(path) then begin
           LOGS.logs('KAS_APPLY_RULES:: -> replicate Kaspersky Anti-Spam rules files : ' +path);
           commands:='/bin/mv ' + path + '/* /usr/local/ap-mailfilter3/conf/def/group/';
           LOGS.logs('KAS_APPLY_RULES:: ' +commands);
           fpsystem(commands);
           commands:='/usr/local/ap-mailfilter3/bin/sfupdates -s -f';
           LOGS.logs('KAS_APPLY_RULES:: ' +commands);
           ExecProcess(commands);
           result:=true;
        end;
end;



//#############################################################################
procedure MyConf.Cyrus_set_value(info:string;val:string);
var RegExpr:TRegExpr;
list:TstringList;
i:integer;
added:boolean;
begin
LOGS.Enable_echo:=echo_local;
if length(val)=0 then exit;
added:=false;
 RegExpr:=TRegExpr.create;
    list:=TstringList.Create();
    list.LoadFromFile('/etc/imapd.conf');
    for i:=0 to list.Count-1 do begin
          RegExpr.expression:=info;
          if RegExpr.Exec(list.Strings[i]) then begin
               if Debug then LOGS.logs('MyConf.Cyrus_set_value -> found "' + info + '"');
               if Debug then LOGS.logs('MyConf.Cyrus_set_value -> set line "' + IntTostr(i) + '" to "' + val + '"');
               list.Strings[i]:=info+ ': ' + val;
               added:=True;
          end;

    end;
    if added=False then begin
      list.Add(info+ ': ' +val);

    end;

   list.SaveToFile('/etc/imapd.conf');
   list.Free;
   RegExpr.Free;
end;
 //##############################################################################
procedure MyConf.SASLAUTHD_START();
var
   logs:Tlogs;
begin
   logs:=Tlogs.Create;
   if not FileExists(CCYRUS.SASLAUTHD_PATH()) then begin
      logs.Debuglogs('CCYRUS.SASLAUTHD_PATH() return null, aborting there is no saslauthd binary here...');
      exit;
   end;


if SYSTEM_PROCESS_EXIST(SASLAUTHD_PID()) then begin
   logs.DebugLogs('Starting......: saslauthd already running using PID ' +SASLAUTHD_PID()+ '...');
   exit;
end;
   forceDirectories('/var/run/saslauthd');
   logs.DebugLogs('Starting......: -> CCYRUS.Configure()');
   CCYRUS.Configure();




if FileExists(CCYRUS.SASLAUTHD_INITD_PATH()) then begin
     logs.DebugLogs('Starting......: saslauthd');
     fpsystem(CCYRUS.SASLAUTHD_INITD_PATH()+' start >/dev/null 2>&1');
     exit;
end else begin
     logs.DebugLogs('Starting......: saslauthd not installed as init.d path');

end;

if FileExists('/opt/artica/bin/saslauthd') then begin
     logs.DebugLogs('Starting......: saslauthd');
     fpsystem('/opt/artica/bin/saslauthd -a ldap -n 0 -c -O /opt/artica/etc/saslauthd.conf -m /var/run');
     exit;
end else begin
   if FileExists('/etc/init.d/saslauthd') then begin
     logs.DebugLogs('Starting......: saslauthd');
     fpsystem('/etc/init.d/saslauthd start >/dev/null 2>&1');
   end;
end;


end;
 //##############################################################################
procedure MyConf.SASLAUTHD_STOP();
begin
if SYSTEM_PROCESS_EXIST(SASLAUTHD_PID()) then begin

   if FileExists(CCYRUS.SASLAUTHD_INITD_PATH()) then begin
     writeln('Stopping SaslAuthd...........: saslauthd');
     fpsystem(CCYRUS.SASLAUTHD_INITD_PATH()+' stop >/dev/null 2>&1');
     exit;
   end;

   writeln('Stopping SaslAuthd...........: ' + SASLAUTHD_PID() + ' PID..');
   fpsystem('/bin/kill ' + SASLAUTHD_PID());
end;
end;
 //##############################################################################
procedure MyConf.HOTWAYD_START();
begin
    if not FileExists('/opt/artica/sbin/hotwayd') then exit;
    if SYSTEM_PROCESS_EXIST(XINETD_PID()) then begin
      if ExtractFileName(ParamStr(0))<>'process1' then logs.DebugLogs('Starting......: xinetd already running using PID ' +XINETD_PID()+ '...');
      exit;
    end;
    logs.DebugLogs('Starting......: xinetd');
    If FileExists('/etc/init.d/xinetd') then fpsystem('/etc/init.d/xinetd start >/dev/null 2>&1');
end;
 //##############################################################################
function MyConf.HOTWAYD_VERSION():string;
var RegExpr:TRegExpr;
datas:string;
begin
if not FileExists('/opt/artica/sbin/hotwayd') then exit;
datas:=ExecPipe('/opt/artica/sbin/hotwayd -v');
RegExpr:=TRegExpr.create;
RegExpr.expression:='hotwayd v([0-9\.]+)';
if RegExpr.Exec(datas) then result:=RegExpr.Match[1];
RegExpr.free;
end;
 //##############################################################################

function MyConf.XINETD_PID();
begin
   if FileExists('/var/run/xinetd.pid') then begin
      result:=trim(ReadFileIntoString('/var/run/xinetd.pid'));
      exit;
   end;

end;
 //##############################################################################

function MyConf.Cyrus_get_servername:string;
var RegExpr:TRegExpr;
datas:string;
begin
 RegExpr:=TRegExpr.create;
 datas:=ReadFileIntoString('/etc/imapd.conf');
 RegExpr.expression:='servername[:\s]+([a-z\.\-_]+)';
 if RegExpr.Exec(datas) then begin
     result:=Trim(RegExpr.Match[1]);
 end;
 RegExpr.Free;
end;
 //#############################################################################

function MyConf.Cyrus_get_unixhierarchysep:string;
var RegExpr:TRegExpr;
datas:string;
begin
 RegExpr:=TRegExpr.create;
 datas:=ReadFileIntoString('/etc/imapd.conf');
 RegExpr.expression:='unixhierarchysep[:\s]+([a-z\.\-_]+)';
 if RegExpr.Exec(datas) then begin
     result:=Trim(RegExpr.Match[1]);
 end;
 RegExpr.Free;
end;
 //#############################################################################
function MyConf.Cyrus_get_virtdomain:string;
var RegExpr:TRegExpr;
datas:string;
begin
 RegExpr:=TRegExpr.create;
 datas:=ReadFileIntoString('/etc/imapd.conf');
 RegExpr.expression:='virtdomains[:\s]+([a-z\.\-_]+)';
 if RegExpr.Exec(datas) then begin
     result:=Trim(RegExpr.Match[1]);
 end;
 RegExpr.Free;
end;
 //#############################################################################
function MyConf.LINUX_GET_HOSTNAME:string;
var datas:string;
begin
 fpsystem('/bin/hostname >/opt/artica/logs/hostname.txt');
 datas:=ReadFileIntoString('/opt/artica/logs/hostname.txt');
 result:=Trim(datas);
end;
 //#############################################################################


function MyConf.APACHE_GET_INITD_PATH:string;
begin
   if FileExists('/opt/artica/bin/apachectl') then exit('/opt/artica/bin/apachectl');
end;
 //#############################################################################
function MyConf.APACHE2_DirectoryAddOptions(Change:boolean;WichOption:string):string;

var
   httpd_path:string;
   RegExpr:TRegExpr;
   RegExpr2:TRegExpr;
   D,start, LineISFound:Boolean;
   list:TstringList;
   i,FoundLine:integer;
begin

     D:=COMMANDLINE_PARAMETERS('debug');
     LineISFound:=false;

     httpd_path:=get_httpd_conf();
     if D then showScreen('APACHE2_DirectoryAddOptions: Load file "' +  httpd_path + '"');
     list:=TstringList.Create();
     list.LoadFromFile(httpd_path);

     RegExpr2:=TRegExpr.create;
     RegExpr:=TRegExpr.Create;

     RegExpr2.expression:='#';
     start:=False;

         RegExpr.Expression:='<Directory "' + get_www_root + '">';
         if D then showScreen('APACHE2_DirectoryAddOptions: try to found line <Directory "' + get_www_root + '">');
         if D then showScreen('APACHE2_DirectoryAddOptions: file "' +  IntToStr(list.Count) + '" lines..');
         For i:=0 to  list.Count-1 do begin
             if not RegExpr2.Exec(list.Strings[i]) then begin
                if RegExpr.Exec(list.Strings[i]) then begin
                   if start=false then begin
                      start:=True;
                      if D then ShowScreen('APACHE2_DirectoryAddOption:: Found start line ' + IntToStr(i));
                      RegExpr.Expression:='Options(.+)';
                   end;
                end;
                if RegExpr.Exec(list.Strings[i]) then begin
                   if Start=true then
                       FoundLine:=i;
                       LineISFound:=True;
                       if D then ShowScreen('APACHE2_DirectoryAddOption:: Found Options in line ' + IntToStr(i));
                       if D then ShowScreen('APACHE2_DirectoryAddOption:: ' + trim(RegExpr.Match[1]));
                       break;
                   end;
                end;

         end;

      if LineISFound=false then begin
          if D then ShowScreen('Unable to found matched pattern');
          exit();
      end;
      if trim(RegExpr.Match[1])='None' then begin
           list.Strings[FoundLine]:=chr(9)+chr(9)+ 'Options ' + WichOption;
           result:='no';
      end;

      if trim(RegExpr.Match[1])='none' then begin
         list.Strings[FoundLine]:=chr(9)+chr(9)+ 'Options ' + WichOption;
         result:='no';
      end;

      if D then ShowScreen('APACHE2_DirectoryAddOption:: FoundLine=' + IntToStr(FoundLine));
      RegExpr.Expression:=WichOption;
      if not RegExpr.Exec(list.Strings[FoundLine]) then begin
            result:='no';
            list.Strings[FoundLine]:=list.Strings[FoundLine]+ ' ' + WichOption;
      end;

      if Change then list.SaveToFile(httpd_path);
      list.Free;




end;

 //#############################################################################


function MyConf.get_www_userGroup():string;
var
user,group:string;
RegExpr:TRegExpr;
RegExpr2:TRegExpr;
list:TstringList;
i:integer;
httpd_path:string;
logs:Tlogs;
begin
        logs:=Tlogs.Create;
     if APACHE_ARTICA_ENABLED()<>'1' then begin

         httpd_path:=lighttpd.LIGHTTPD_CONF_PATH();
         logs.Debuglogs('get_www_userGroup using ' + httpd_path);
         if not FileExists(httpd_path) then exit;
         RegExpr:=TRegExpr.Create;
         list:=TstringList.Create();
         list.LoadFromFile(httpd_path);
          For i:=0 to  list.Count-1 do begin
            RegExpr.Expression:='^server\.username.+?"(.+?)"';
            if RegExpr.Exec(list.Strings[i]) then begin
                   user:=RegExpr.Match[1];
            end;
            
            RegExpr.Expression:='^server\.groupname.+?"(.+?)"';
            if RegExpr.Exec(list.Strings[i]) then begin
                   group:=RegExpr.Match[1];
            end;
          end;
         RegExpr.Free;
         list.Free;
         result:=user +':' + group;
         exit;
     end;
                


         httpd_path:=get_httpd_conf();
         if FileExists('/etc/apache2/uid.conf') then httpd_path:='/etc/apache2/uid.conf';
         if length(httpd_path)=0 then exit();

         list:=TstringList.Create();
         list.LoadFromFile(httpd_path);

          RegExpr:=TRegExpr.Create;
          RegExpr2:=TRegExpr.create;
          RegExpr2.expression:='#';




         For i:=0 to  list.Count-1 do begin
             if not RegExpr2.Exec(list.Strings[i])  then begin

                RegExpr.Expression:='Group\s+([a-zA-Z0-9\.\-_]+)';
                if RegExpr.Exec(list.Strings[i]) then begin
                   group:=RegExpr.Match[1];
                end;

                RegExpr.Expression:='User\s+([a-zA-Z0-9\.\-_]+)';
                if RegExpr.Exec(list.Strings[i]) then begin
                   user:=RegExpr.Match[1];
                end;

             end;
        end;

         RegExpr.Free;
         RegExpr2.Free;
         list.Free;
         result:=user +':' + group;

    end;
//##############################################################################
function MyConf.get_www_root():string;
var
mDatas   :TstringList;
RegExpr  :TRegExpr;
i        :integer;
D        :Boolean;
begin

    if not FileExists(get_httpd_conf()) then exit;

    D:=COMMANDLINE_PARAMETERS('debug');
    mDatas:=TstringList.create;
    mDatas.LoadFromFile(get_httpd_conf());


    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='DocumentRoot[''|"|\s]+(.+?)["|''|\s|\n]+';

    For i:=0 to mDatas.Count-1 do begin
    if Copy(mDatas.Strings[i],0,1)<>'#' then begin
       if RegExpr.Exec(mDatas.Strings[i]) then begin
          Result:=RegExpr.Match[1];
          if Result[length(Result)]='/' then Result:=Copy(Result,0,length(Result)-1);
          break;
          end else begin
              if D then writeln('get_www_root() -> ' + mDatas.Strings[i] + ' does not match ' + RegExpr.Expression);
          end;
       end;
    end;
    RegExpr.free;
    mDatas.free;

end;

//##############################################################################
function MyConf.postfix_get_virtual_mailboxes_maps():string;
var
mDatas:string;
RegExpr:TRegExpr;
begin
    mDatas:=ReadFileIntoString(postfix.POSFTIX_MASTER_CF_PATH());
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='virtual_mailbox_maps.+(hash:|mysql:)([0-9a-zA-Z\.\-_/]+)';
    if RegExpr.Exec(mDatas) then begin
       Result:=RegExpr.Match[2];
       RegExpr.free;
       exit;
    end;
end;
//##############################################################################
function MyConf.POSTFIX_HEADERS_CHECKS():string;
var
mDatas:string;
RegExpr:TRegExpr;
begin
    mDatas:=ExecPipe(postfix.POSFTIX_POSTCONF_PATH()+' -h header_checks');

    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='regexp:([0-9a-zA-Z\.\-_/]+)';
    if RegExpr.Exec(mDatas) then begin
       Result:=RegExpr.Match[1];
       RegExpr.free;
       exit;
    end;
end;
//##############################################################################
procedure MyConf.POSTFIX_CHECK_POSTMAP();
var
mDatas:TstringList;
RegExpr:TRegExpr;
local_path,FilePathName, FilePathNameTO:string;
i:integer;
xLOGS:Tlogs;
begin
    xLOGS:=Tlogs.Create;
    if not FileExists(postfix.POSFTIX_MASTER_CF_PATH()) then begin
       xLOGS.logs('MYCONF::POSTFIX_CHECK_POSTMAP:: /etc/postfix/master.cf doesn''t exists !!!???');
       exit;
    end;

    local_path:=get_ARTICA_PHP_PATH() + '/ressources/conf';
    if debug then writeln('Use ' + local_path + ' as detected config ');
    xLOGS.logs('MYCONF::POSTFIX_CHECK_POSTMAP:: Use ' + local_path + ' as detected config');

    mDatas:=TstringList.Create;
    mDatas.LoadFromFile(postfix.POSFTIX_MASTER_CF_PATH());
    RegExpr:=TRegExpr.Create;
    RegExpr.Expression:='hash:([0-9a-zA-Z\.\-_/]+)';
    xLOGS.logs('MYCONF::POSTFIX_CHECK_POSTMAP:: FIND hash:([0-9a-zA-Z\.\-_/]+)');
    for i:=0 to  mDatas.Count -1 do begin
         if RegExpr.Exec(mDatas.Strings[i]) then begin
            FilePathName:=local_path + '/' +  ExtractFileName(RegExpr.Match[1]);
            FilePathNameTO:=RegExpr.Match[1];
            xLOGS.logs('MYCONF::POSTFIX_CHECK_POSTMAP:: Found "' + RegExpr.Match[1] + '" => "' +FilePathName + '" => "'+ FilePathNameTO + '"');


            if fileExists(local_path + '/' +  ExtractFileName(RegExpr.Match[1])) then begin
                    if debug then writeln('Update ' +ExtractFileName(RegExpr.Match[1]));
                    xLOGS.logs('MYCONF::POSTFIX_CHECK_POSTMAP:: /bin/mv ' + FilePathName + ' ' + FilePathNameTO);
                    fpsystem('/bin/mv ' + FilePathName + ' ' + FilePathNameTO);
                     if debug then writeln('postmap ' +FilePathNameTO);

                     xLOGS.logs('MYCONF::POSTFIX_CHECK_POSTMAP:: /bin/chmod 640 ' + FilePathNameTO);
                     fpsystem('/bin/chmod 640 ' + FilePathNameTO);
                     fpsystem('/bin/chown root ' + FilePathNameTO + ' >/dev/null 2>&1');
                     xLOGS.logs('MYCONF::POSTFIX_CHECK_POSTMAP:: /usr/sbin/postmap ' + FilePathNameTO);
                     fpsystem('/usr/sbin/postmap ' + FilePathNameTO);


            end else begin
                 if debug then writeln('No update operation for ' + RegExpr.Match[1] + ' (' + ExtractFileName(RegExpr.Match[1]) + ')');
            end;


         end;
    end;
    RegExpr.Free;
    mDatas.Free;
end;
//##############################################################################
function MyConf.ARTICA_DAEMON_GET_PID():string;
begin
    result:=SYSTEM_GET_PID('/etc/artica-postfix/artica-agent.pid');
end;
//##############################################################################
function MyConf.ARTICA_FILTER_GET_PID():string;
begin
     result:=SYSTEM_GET_PID('/etc/artica-postfix/artica-filter.pid');
end;
//##############################################################################
function MyConf.BOA_DAEMON_GET_PID():string;
var
   Rootpath,BoaPath,PID,allpids:string;
   RegExpr:TRegExpr;
   D:BOOLEAN;
begin
D:=COMMANDLINE_PARAMETERS('debug');
Rootpath:=get_ARTICA_PHP_PATH();
BoaPath:=Rootpath + '/bin/boa';
PID:=trim(SYSTEM_GET_PID('/etc/artica-postfix/boa.pid'));
if D then writeln('BOA_DAEMON_GET_PID:: Found PID="',PID,'"');
if length(PID)>0 then begin

   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:=PID;
   allpids:=SYSTEM_PROCESS_LIST_PID(BoaPath);
   if D then writeln('BOA_DAEMON_GET_PID:: Found allpids="',allpids,'"');
   if RegExpr.Exec(allpids) then result:=PID;
   RegExpr.Free
end;
if D then writeln('BOA_DAEMON_GET_PID:: Found PID FINAL="',result,'"');

end;
//##############################################################################
function MyConf.ARTICA_POLICY_GET_PID():string;
begin
     result:=SYSTEM_GET_PID('/etc/artica-postfix/artica-policy.pid');
end;
//##############################################################################
function MyConf.MAILMAN_GET_PID():string;
begin
     result:=SYSTEM_GET_PID('/opt/artica/var/mailman/data/master-qrunner.pid');
end;
//##############################################################################
function myconf.AMAVISD_PID() :string;
begin
result:=SYSTEM_GET_PID('/var/run/amavisd/amavis-artica.pid');
end;
//##############################################################################
function myconf.ARTICA_TAIL_PID():string;
begin
result:=SYSTEM_GET_PID('/etc/artica-postfix/artica-tail.pid');
end;
//##############################################################################
function myconf.CLAMD_GETINFO(Key:String):string;
var
RegExpr:TRegExpr;
l:TStringList;
i:integer;
begin
 if not FileExists(CLAMD_CONF_PATH()) then exit;
 l:=TStringList.Create;
 RegExpr:=TRegExpr.Create;
 l.LoadFromFile(CLAMD_CONF_PATH());
 RegExpr.Expression:='^' + Key + '\s+(.+)';
 For i:=0 to l.Count-1 do begin
     if RegExpr.Exec(l.Strings[i]) then begin
        result:=RegExpr.Match[1];
        break;
     end;

 end;
  RegExpr.Free;
  l.free;
end;

//##############################################################################
function myconf.CLAMD_CONF_PATH():string;
begin
   if FileExists('/etc/clamav/clamd.conf') then exit('/etc/clamav/clamd.conf');
   if FileExists('/opt/artica/etc/clamd.conf') then exit('/opt/artica/etc/clamd.conf');
end;
//##############################################################################
procedure myconf.CLAMD_SETINFO(Key:String;value:string);
var
RegExpr:TRegExpr;
l:TStringList;
i:integer;
F:boolean;
begin
 f:=False;
 l:=TStringList.Create;
 if not FileExists(CLAMD_CONF_PATH()) then exit();



 RegExpr:=TRegExpr.Create;
 l.LoadFromFile(CLAMD_CONF_PATH());
 RegExpr.Expression:='^' + Key + '\s+(.+)';
 For i:=0 to l.Count-1 do begin
     if RegExpr.Exec(l.Strings[i]) then begin
        F:=true;
        l.Strings[i]:=key + ' ' + value;
        break;
     end;

 end;

  if not F then l.Add(key + ' ' + value);
  l.SaveToFile(CLAMD_CONF_PATH());
  RegExpr.Free;
  l.free;
end;
//##############################################################################

function MyConf.MAILMAN_VERSION():string;
var
   line:string;
   RegExpr:TRegExpr;
   D:Boolean;
begin
     D:=COMMANDLINE_PARAMETERS('debug');
     if not FileExists('/opt/artica/mailman/bin/version') then begin
       if D then  writeln('MAILMAN_VERSION() -> unable to stat /opt/artica/mailman/bin/version');
        exit;
     end;



     line:=ExecPipe('/opt/artica/mailman/bin/version');
    if D then  writeln('MAILMAN_VERSION() ->' + line);
     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='([0-9\.]+)';
     if RegExpr.Exec(line) then begin
        result:=RegExpr.Match[1];
        if D then  writeln('MAILMAN_VERSION() -> ' + result);
     end else begin
          if D then  writeln('MAILMAN_VERSION() does''t match ->' + RegExpr.Expression);
     end;
     RegExpr.Free;
end;
//##############################################################################
function MyConf.ReadFileIntoString(path:string):string;
var
   List:TstringList;
begin

      if not FileExists(path) then begin
        exit;
      end;

      List:=Tstringlist.Create;
      List.LoadFromFile(path);
      result:=List.Text;
      List.Free;
end;
//##############################################################################
procedure MyConf.killfile(path:string);
Var F : Text;
begin

 if not FileExists(path) then exit;
 if Debug then LOGS.logs('MyConf.killfile -> remove "' + path + '"');
TRY
 Assign (F,path);
 Erase (f);
 EXCEPT
 end;
end;
//##############################################################################
function MyConf.get_LINUX_MAILLOG_PATH():string;
var filedatas,logconfig,ExpressionGrep:string;
D:boolean;
RegExpr:TRegExpr;
begin
 D:=COMMANDLINE_PARAMETERS('debug');
if FileExists('/etc/syslog.conf') then logconfig:='/etc/syslog.conf';
if FileExists('/etc/syslog-ng/syslog-ng.conf') then logconfig:='/etc/syslog-ng/syslog-ng.conf';
if FileExists('/etc/rsyslog.conf') then logconfig:='/etc/rsyslog.conf';

if D then ShowScreen('');
if D then ShowScreen('get_LINUX_MAILLOG_PATH:: Master config is :"'+logconfig+'"');

filedatas:=ReadFileIntoString(logconfig);
   ExpressionGrep:='mail\.=info.+?-([\/a-zA-Z_0-9\.]+)?';
   RegExpr:=TRegExpr.create;
   RegExpr.ModifierI:=True;
   RegExpr.expression:=ExpressionGrep;
   if RegExpr.Exec(filedatas) then  begin
     result:=RegExpr.Match[1];
     RegExpr.Free;
     exit;
   end;


   ExpressionGrep:='mail\.\*.+?-([\/a-zA-Z_0-9\.]+)?';
   RegExpr.expression:=ExpressionGrep;
   if RegExpr.Exec(filedatas) then   begin
     result:=RegExpr.Match[1];
     RegExpr.Free;
     exit;
   end;

   ExpressionGrep:='destination mailinfo[\s\{a-z]+\("(.+?)"';
   RegExpr.expression:=ExpressionGrep;
   if RegExpr.Exec(filedatas) then   begin
     result:=RegExpr.Match[1];
     RegExpr.Free;
     exit;
   end;

  RegExpr.Free;
end;
//##############################################################################
function MyConf.POSTFIX_LAST_ERRORS():string;
var logPath,cmdline:string;
D,A:boolean;
RegExpr:TRegExpr;
FileData:TstringList;
i:integer;
begin
  D:=COMMANDLINE_PARAMETERS('debug');
  result:='';
  logPath:=get_LINUX_MAILLOG_PATH();
  logs.logs('POSTFIX_LAST_ERRORS() -> ' + logpath);
  if not FileExists(logpath) then begin
     if D then ShowScreen('POSTFIX_LAST_ERRORS:: Error unable to stat "' + logPath + '"');
     exit;
  end;
  A:=COMMANDLINE_PARAMETERS('errors');
  D:=COMMANDLINE_PARAMETERS('debug');
   RegExpr:=TRegExpr.Create;
   FileData:=TstringList.CReate;
   ArrayList:=TstringList.CReate;
   RegExpr.Expression:='(fatal|failed|failure|deferred|Connection timed out|expired|rejected|warning)';
   cmdline:='/usr/bin/tail -n 2000 ' + logPath;
   logs.logs('POSTFIX_LAST_ERRORS() -> ' + cmdline);

   if D then ShowScreen('POSTFIX_LAST_ERRORS:: "'+cmdline+'"');
   FileData.LoadFromStream(ExecStream(cmdline,false));

   logs.logs('POSTFIX_LAST_ERRORS() ->tail -> ' + IntToStr(FileData.count) + ' lines');

   if D then ShowScreen('POSTFIX_LAST_ERRORS:: tail -> ' + IntToStr(FileData.count) + ' lines');
   For i:=0 to FileData.count-1 do begin
       RegExpr.Expression:='(postfix\/|cyrus\/)';
       if RegExpr.Exec(FileData.Strings[i]) then begin
          RegExpr.Expression:='(fatal|failed|failure|deferred|Connection timed out|expired|rejected)';
            if RegExpr.Exec(FileData.Strings[i]) then begin
               if A then writeln(FileData.Strings[i]);
               ArrayList.Add(FileData.Strings[i]);
            end;
       end;

   end;

   RegExpr.free;
   FileData.Free;


end;
//##############################################################################
function MyConf.GetIPAddressOfInterface( if_name:ansistring):ansistring;
var
 ifr : ifreq;
 sock : longint;
 p:pChar;

begin
 Result:='0.0.0.0';
 strncpy( ifr.ifr_ifrn.ifrn_name, pChar(if_name), IF_NAMESIZE-1 );
 ifr.ifr_ifru.ifru_addr.sa_family := AF_INET;
 sock := socket(AF_INET, SOCK_DGRAM, IPPROTO_IP);
 if ( sock >= 0 ) then begin
   if ( ioctl( sock, SIOCGIFADDR, @ifr ) >= 0 ) then begin
     p:=inet_ntoa( ifr.ifr_ifru.ifru_addr.sin_addr );
     if ( p <> nil ) then Result :=  p;
   end;
   libc.__close(sock);
 end;
end;
//##############################################################################
function MyConf.CheckInterface( if_name:string):boolean;
var
RegExpr:TRegExpr;
 datas : string;
begin
 Result:=False;
 if not FileExists('/sbin/ifconfig') then exit;

     fpsystem('/sbin/ifconfig ' + if_name + ' >/opt/artica/logs/ifconfig_' + if_name);
     datas:= ReadFileIntoString('/opt/artica/logs/ifconfig_' + if_name);
     RegExpr:=TRegExpr.create;
     RegExpr.expression:='adr\:([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)';
     if RegExpr.Exec(datas) then begin
       RegExpr.Free;
       Result:=True;
       exit;
   end;
end;
//##############################################################################
function MyConf.GetIPInterface( if_name:string):string;
var
RegExpr:TRegExpr;
 datas : string;
begin

 if not FileExists('/sbin/ifconfig') then exit;

     fpsystem('/sbin/ifconfig ' + if_name + ' >/opt/artica/logs/ifconfig_' + if_name);
     datas:= ReadFileIntoString('/opt/artica/logs/ifconfig_' + if_name);
     RegExpr:=TRegExpr.create;
     RegExpr.expression:='adr\:([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)';
     if RegExpr.Exec(datas) then begin
       RegExpr.Free;
       if length(RegExpr.Match[1])>0 then Result:=RegExpr.Match[1];
       exit;
   end;
end;
//##############################################################################
procedure MyConf.POSTFIX_REPLICATE_MAIN_CF(mainfile:string);
var
   conf_path,bounce_template_cf:string;
begin

     if not fileExists(mainfile) then begin
       ShowScreen('POSTFIX_REPLICATE_MAIN_CF:: Unable to stat ' + mainfile);
       exit;
     end;

        conf_path:=ExtractFilePath(mainfile);
        ShowScreen('POSTFIX_REPLICATE_MAIN_CF:: conf directory=' + conf_path);
        bounce_template_cf:=conf_path+ '/bounce.template.cf';
        ShowScreen('POSTFIX_REPLICATE_MAIN_CF:: -> ' + bounce_template_cf + ' ?');
        if FileExists(bounce_template_cf) then begin
            fpsystem('/bin/mv ' + bounce_template_cf + ' /etc/postfix');
            ShowScreen('POSTFIX_REPLICATE_MAIN_CF::  move ' + bounce_template_cf + ' (ok)');
            fpsystem('/bin/chown root:root /etc/postfix/bounce.template.cf >/dev/null 2>&1');
        end;


        logs.logsPostfix('replicate: ' + mainfile +' to /etc/postfix' );

        fpsystem('/bin/mv ' + mainfile + ' /etc/postfix');



        POSTFIX_CHECK_POSTMAP();
        logs.logsPostfix('replicate:restart postfix');
        postfix.POSFTIX_VERIFY_MAINCF();



end;
//#####################################################################################









function myConf.PERL_VERSION():string;
var
   version:string;
   RegExpr:TRegExpr;
begin
    if not FileExists(PERL_BIN_PATH()) then exit;
    RegExpr:=TRegExpr.Create;
    version:=ExecPipe(PERL_BIN_PATH()+' -v 2>&1');
    RegExpr.Expression:=' v([0-9\.]+)';
    if RegExpr.Exec(version) then result:=RegExpr.Match[1];
    RegExpr.free;
end;
//##################################################################################### 
function myConf.PERL_BIN_PATH():string;
begin
    if FileExists('/usr/local/bin/perl') then exit('/usr/local/bin/perl');
    if FileExists('/usr/bin/perl') then exit('/usr/bin/perl');
    if FileExists('/opt/artica/bin/perl') then exit('/opt/artica/bin/perl');
end;
//#################################################################################
function myConf.PERL_INCFolders():TstringList;
const
  CR = #$0d;
  LF = #$0a;
  CRLF = CR + LF;

var
    datas:string;
    F:TstringList;
    RegExpr:TRegExpr;
    L:TStringDynArray;
    i:integer;
begin
     datas:=ExecPipe(PERL_BIN_PATH() + ' -V 2>&1');
     RegExpr:=TRegExpr.Create;

     RegExpr.Expression:='@INC:(.+)';
     if RegExpr.Exec(datas) then begin
        l:=Explode(CRLF,RegExpr.Match[1]);
        F:=TstringList.Create;

        For i:=0 to length(l)-1 do begin
            if length(trim(l[i]))>3 then F.Add(trim(l[i]));
        end;
     end;

   result:=F;
   if ParamStr(1)='@INC' then begin
        For i:=0 to F.Count -1 do begin
            writeln(F.Strings[i]);
        end;
   end;

end;

//#####################################################################################
procedure MyConf.THREAD_COMMAND_SET(zcommands:string);
var  FileDataCommand:TstringList;
begin
  FileDataCommand:=TstringList.Create;
  if fileExists('/etc/artica-postfix/background') then FileDataCommand.LoadFromFile('/etc/artica-postfix/background');
  FileDataCommand.Add(zcommands);
  FileDataCommand.SaveToFile('/etc/artica-postfix/background');
  FileDataCommand.Free;

end;
//##############################################################################
function MyConf.get_LINUX_INET_INTERFACES():string;
var
 s:shortstring;
 f:text;
 p:LongInt;
 xInterfaces:string;
begin
 xInterfaces:='';
 assign(f,'/proc/net/dev');
 reset(f);
 while not eof(f) do begin
   readln(f,s);
   p:=pos(':',s);
   if ( p > 0 ) then begin
     delete(s, p, 255);
     while ( s <> '' ) and (s[1]=#32) do delete(s,1,1);
       if CheckInterface(s) then xInterfaces:=xInterfaces + ';'+ s + ':[' + GetIPAddressOfInterface(s) + ']';
   end;
 end;
 exit(xInterfaces);
 close(f);
 end;
//##############################################################################

procedure myconf.MAILGRAPGH_FIX_PERL();
begin
     if SYSTEM_GET_PLATEFORM()='686' then begin
    //     if FileExists('/opt/artica/lib/perl/5.8.8/i686-linux/RRDs.pm');
     end;

end;



//##############################################################################
function MyConf.SYSTEM_NETWORK_INITD():string;
begin
if FileExists('/etc/init.d/networking') then exit('/etc/init.d/networking');
if FileExists('/etc/init.d/network') then exit('/etc/init.d/network');
logs.logs('SYSTEM_NETWORK_INITD:: unable to locate init.d daemon');
end;



//##############################################################################
function MyConf.MAILGRAPGH_PID_PATH():string;
var
   RegExpr:TRegExpr;
   list:TstringList;
   i:integer;
begin
if not FileExists('/etc/init.d/mailgraph-init') then exit('');
list:=TstringList.Create;
 RegExpr:=TRegExpr.create;
 RegExpr.Expression:='^PID_FILE[\s''"=]([a-z0-9\-\/\.]+)';
 list.LoadFromFile('/etc/init.d/mailgraph-init');
 for i:=0 to list.Count-1 do begin
     if RegExpr.Exec(list.Strings[i]) then begin
         result:=RegExpr.Match[1];
         RegExpr.free;
         list.free;
         exit;
     end;
 end;
end;
//##############################################################################
function MyConf.SYSTEM_CRON_TASKS():TstringList;
const
  CR = #$0d;
  LF = #$0a;
  CRLF = CR + LF;

var
   list:TstringList;
   LineDatas:string;
   i:integer;
   SYS:TSystem;
   D:boolean;
   C:boolean;
begin
   D:=COMMANDLINE_PARAMETERS('debug');
   C:=COMMANDLINE_PARAMETERS('list');
   SYS:=TSystem.Create;
   list:=TstringList.Create;
   list.AddStrings(SYS.DirFiles('/etc/cron.d','*'));
   ArrayList:=TstringList.Create;
    for i:=0 to list.Count-1 do begin
          if D then ShowScreen('SYSTEM_CRON_TASKS:: File [' + list.Strings[i] + ']');
          LineDatas:='<cron>' + CRLF  +'<filename>/etc/cron.d/' + list.Strings[i] + '</filename>' + CRLF + '<filedatas>' + ReadFileIntoString('/etc/cron.d/' + list.Strings[i])+CRLF + '</filedatas>' + CRLF + '</cron>';
           ArrayList.Add(LineDatas);
           if C then showscreen(CRLF+'------------------------------------------------------------' + CRLF+LineDatas+CRLF + '------------------------------------------------------------'+CRLF);

    end;
   Result:=ArrayList;
   list.free;
   SYS.free;

end;
//##############################################################################
function MyConf.FETCHMAIL_PID():string;
Var
   RegExpr:TRegExpr;
   list:TstringList;
   i:integer;
   PidPath:string;
   D:boolean;

begin
 D:=COMMANDLINE_PARAMETERS('debug');
  if not fileExists('/etc/init.d/fetchmail') then begin
      if D then writeln('FETCHMAIL_PID:: not fileExists=/etc/init.d/fetchmail assign it by default on /var/run/fetchmail.pid');
      result:=SYSTEM_GET_PID('/var/run/fetchmail.pid');
      exit;
  end;
  list:=TstringList.Create;
  list.LoadFromFile('/etc/init.d/fetchmail');
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='PIDFILE="(.+?)"';
  for i:=0 to list.Count-1 do begin
       if RegExpr.Exec(list.Strings[i]) then begin
          PidPath:=RegExpr.Match[1];
          break;
       end;
  end;

  list.Free;
  if D then writeln('FETCHMAIL_PID:: PidPath=' + PidPath);
  RegExpr.Free;
  result:=SYSTEM_GET_PID(PidPath);
end;
//##############################################################################


function MyConf.FETCHMAIL_STATUS():string;
var res,version,firstStat:string;
d:boolean;
binpath,fetchmailpid:string;
begin

       binpath:=FETCHMAIL_BIN_PATH();
       d:=COMMANDLINE_PARAMETERS('debug');
       if d then ShowScreen('FETCHMAIL_STATUS::-> Reading /etc/init.d/fetchmail script');
       firstStat:='-1';

       if length(binpath)=0 then begin
          result:=firstStat+';0.0.0;0';
          exit;
       end;

       version:=FETCHMAIL_VERSION();
       if length(version)>0 then firstStat:='0';

       fetchmailpid:=FETCHMAIL_PID();
       if not SYSTEM_PROCESS_EXIST(fetchmailpid) then begin
          exit(firstStat+';' + version + ';0');
       end else begin
           res:='1' ;
           result:=res + ';' + version + ';' +fetchmailpid;
       end;
           if d then ShowScreen('FETCHMAIL_STATUS::Result -> was status;version;pid ->[' + result + ']');


end;




//##############################################################################
function MyConf.SYSTEM_IP_OVERINTERNET():string;
var
   F      :TstringList;
   RegExpr:TRegExpr;
begin
     result:='0.0.0.0';
     download_silent:=true;
     WGET_DOWNLOAD_FILE('http://checkip.dyndns.org/','/opt/artica/logs/dyndns.ip.org');
     if not FileExists('/opt/artica/logs/dyndns.ip.org') then exit;
     f:=TstringList.Create;
     f.LoadFromFile('/opt/artica/logs/dyndns.ip.org');
     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='([0-9\.]+)';
     if RegExpr.Exec(f.Text) then result:=trim(RegExpr.Match[1]);
     RegExpr.free;
     f.free;


end;
//##############################################################################


function MyConf.MYSQL_STATUS():string;
var mysql_init,pid_path,pid,status:string;
D:boolean;

begin
      D:=COMMANDLINE_PARAMETERS('debug');
      pid:='0';
      pid_path:=MYSQL_PID_PATH();
      pid:=SYSTEM_GET_PID(pid_path);
      mysql_init:=MYSQL_INIT_PATH();
      if D then logs.logs('pid_path=' + pid_path + ' mysql_init=' + mysql_init + ' pid=' + pid);
      if length(mysql_init)=0 then begin
         result:='-1;0;0';
      end else begin
          if length(pid_path)=0 then result:='-1;0;0';
          if length(pid)=0 then result:='0;' + MYSQL_VERSION() + ';0';
          if SYSTEM_PROCESS_EXIST(pid) then begin
              status:='1';
              end else begin
                  status:='0';
              end;
       end;

      result:=status + ';' + MYSQL_VERSION() + ';' +pid;
            if D then  logs.logs('Mysql result=' + result);

end;
//##############################################################################

function MyConf.MYSQL_PID_PATH():string;
var
   mycnf_path:string;
   RegExpr:TRegExpr;
   list:TstringList;
   i:integer;
   D:boolean;
begin
  D:=COMMANDLINE_PARAMETERS('debug');

  mycnf_path:=MYSQL_MYCNF_PATH();
  if D then ShowScreen('MYSQL_PID_PATH::mycnf_path->' + mycnf_path);
  if length(mycnf_path)=0 then exit('');
  list:=TstringList.create;
  list.LoadFromFile(mycnf_path);
  RegExpr:=TRegExpr.create;
  RegExpr.Expression:='pid-file[\s=]+([\/a-z\.A-Z0-9]+)';
  for i:=0 to list.Count-1 do begin
          if RegExpr.Exec(list.Strings[i]) then begin
                result:=RegExpr.Match[1];
                list.Free;
                RegExpr.Free;
                if D then ShowScreen('MYSQL_PID_PATH::success->' + result);
                exit;
          end;
  end;
  if D then ShowScreen('MYSQL_PID_PATH::failed->');
end;
//##############################################################################
function MyConf.SYSTEM_USER_LIST():string;
var RegExpr:TRegExpr;
list:TstringList;
i:integer;
D:boolean;
begin
   result:='';
   RegExpr:=TRegExpr.Create;
   list:=TstringList.Create;
   ArrayList:=TstringList.Create;
   list.LoadFromFile('/etc/shadow');
   if ParamStr(1)='-userslist' then D:=true;

   RegExpr.Expression:='([a-zA-Z0-9\.\-\_\s]+):';
   for i:=0 to list.Count-1 do begin
         if D then ShowScreen('USER:' + RegExpr.Match[1]);
         if RegExpr.Exec(trim(list.Strings[i])) then begin
             if length(trim(RegExpr.Match[1]))>0 then ArrayList.Add(RegExpr.Match[1]);
         end;


   end;
list.free;
RegExpr.free;
end;


//##############################################################################
procedure MyConf.AVESERVER_REPLICATE_kav4mailservers(mainfile:string);
var pid,ForwardMailer:string;
stat:integer;
begin
pid:=AVESERVER_GET_PID();
     if not FileExists('/etc/init.d/aveserver') then begin
        lOGS.logs('AVESERVER_REPLICATE_kav4mailservers:: unable to stat /etc/init.d/aveserver');
        exit;
     end;

     if FileExists('/proc/' + pid + '/exe') then stat:=1 else stat:=0;

     if fileExists(mainfile) then begin
        fpsystem('/bin/mv ' + mainfile + ' /etc/kav/5.5/kav4mailservers/kav4mailservers.conf');
        if FileExists('/etc/init.d/kas3') then begin
                 lOGS.logs('AVESERVER_REPLICATE_kav4mailservers:: Kaspersky anti-spam exists in this system..');
                 ForwardMailer:=AVESERVER_GET_VALUE('smtpscan.general','ForwardMailer');
                 if ForwardMailer<>'smtp:127.0.0.1:9025' then begin
                    AVESERVER_SET_VALUE('smtpscan.general','ForwardMailer','smtp:127.0.0.1:9025');
                    AVESERVER_SET_VALUE('smtpscan.general','Protocol','smtp');
                 end;
        end;
        LOGS.logs('AVESERVER_REPLICATE_kav4mailservers::  -> AVESERVER_REPLICATE_TEMPLATES()');
        AVESERVER_REPLICATE_TEMPLATES();

        if stat=0 then fpsystem('/etc/init.d/aveserver start 2>&1');
        if stat=1 then fpsystem('/etc/init.d/aveserver reload 2>&1');
     end
        else begin
          LOGS.logs('AVESERVER_REPLICATE_kav4mailservers::  -> ' + mainfile + ' does not exists');
     end;

end;


//##############################################################################
function MyConf.SYSTEM_CRON_REPLIC_CONFIGS():string;
var
CronTaskPath:string;
CronTaskkDelete:string;
FileToDelete:string;
list:TstringList;
i:integer;
D:boolean;
SYS:Tsystem;
FileCount:integer;
begin
     result:='';
     D:=COMMANDLINE_PARAMETERS('debug');
     if ParamStr(1)='-replic_cron'then D:=true;


    CronTaskPath:=get_ARTICA_PHP_PATH() + '/ressources/conf/cron';
    SYS:=Tsystem.Create;
    FileCount:=SYS.DirectoryCountFiles(CronTaskPath);
    if D then ShowScreen('SYSTEM_CRON_REPLIC_CONFIGS: ' + CronTaskPath + ' store ' + IntTOStr(FileCount) + ' files' );
    lOGS.logs('SYSTEM_CRON_REPLIC_CONFIGS:: ' + CronTaskPath + ' store ' + IntTOStr(FileCount) + ' files');
    if FileCount=0 then begin
       SYS.Free;
       exit;
    end;



 CronTaskkDelete:=CronTaskPath+ '/CrontaskToDelete';
 if FileExists(CronTaskkDelete) then begin
       list:=TstringList.Create;
       list.LoadFromFile(CronTaskkDelete);
       if D then ShowScreen('SYSTEM_CRON_REPLIC_CONFIGS: ' + IntToStr(list.Count) + ' files to delete');


       for i:=0 to list.Count -1 do begin
            FileToDelete:='/etc/cron.d/' + trim(list.Strings[i]);
             if D then ShowScreen('SYSTEM_CRON_REPLIC_CONFIGS: "'+ FileToDelete + '"');
             lOGS.logs('SYSTEM_CRON_REPLIC_CONFIGS:: Delete "'+ FileToDelete + '"');
             if fileExists(FileToDelete) then begin
                  if D then ShowScreen('SYSTEM_CRON_REPLIC_CONFIGS: delete: ' + FileToDelete );
                  fpsystem('/bin/rm ' + FileToDelete);
             end;
       end;
  if D then ShowScreen('SYSTEM_CRON_REPLIC_CONFIGS: delete: ' + CronTaskkDelete );
  fpsystem('/bin/rm ' + CronTaskkDelete);

 end;
  if FileExists(CronTaskPath + '/artica.cron.kasupdate') then fpsystem('/usr/local/ap-mailfilter3/bin/enable-updates.sh');

   fpsystem('/bin/mv '  + CronTaskPath + '/* ' + '/etc/cron.d/');
   fpsystem('/bin/chown root:root /etc/cron.d/* >/dev/null 2>&1');
   fpsystem('/etc/init.d/cron reload');
   if D then ShowScreen('SYSTEM_CRON_REPLIC_CONFIGS: Done...' );
  lOGS.logs('SYSTEM_CRON_REPLIC_CONFIGS:: Replicate cron task list done...');
end;
//##############################################################################
function MyConf.SYSTEM_DAEMONS_STATUS():TstringList;
var RegExpr:TRegExpr;
mstr:string;
list:TstringList;
i:integer;
D:boolean;
begin
  RegExpr:=TRegExpr.Create;
  list:=TstringList.Create;
  mstr:=KAS_STATUS();
  D:=COMMANDLINE_PARAMETERS('debug');


  RegExpr.Expression:='([0-9\-]+)-([0-9\-]+);([0-9\-]+)-([0-9\-]+);([0-9\-]+)-([0-9\-]+);([0-9\-]+)-([0-9\-]+)';
  if RegExpr.Exec(mstr) then begin
      list.Add('[APP_KAS3]');
      list.Add('ap-process-server='+RegExpr.Match[1]+ ';' +RegExpr.Match[2]);
      list.Add('ap-spfd='+RegExpr.Match[3]+ ';' +RegExpr.Match[4]);
      list.Add('kas-license='+RegExpr.Match[5]+ ';' +RegExpr.Match[6]);
      list.Add('kas-thttpd='+RegExpr.Match[7]+ ';' +RegExpr.Match[8]);
  end;
   list.Add('');
   mstr:=postfix.POSTFIX_STATUS();
   RegExpr.Expression:='([0-9\-]+);([0-9\.]+);([0-9\-]+)';
   if RegExpr.Exec(mstr) then begin
      list.Add('[APP_POSTFIX]');
      list.Add('postfix='+RegExpr.Match[3]+ ';' +RegExpr.Match[1]);
   end;



   list.Add('');
   mstr:=AVESERVER_STATUS();
   RegExpr.Expression:='([0-9\-]+);([0-9\.\sa-zA-Z]+);([0-9\-]+);([0-9\-]+)';
   if RegExpr.Exec(mstr) then begin
      list.Add('[APP_AVESERVER]');
      list.Add('aveserver='+RegExpr.Match[3]+ ';' +RegExpr.Match[1]);
//      list.Add('patternDate='+RegExpr.Match[4]);
   end;

   list.Add('');
   mstr:=FETCHMAIL_STATUS();
   if D then ShowScreen('SYSTEM_DAEMONS_STATUS:: FETCHMAIL=' + mstr);
   RegExpr.Expression:='([0-9\-]+);([0-9\.\sa-zA-Z]+);([0-9\-]+)';
   if RegExpr.Exec(mstr) then begin
      list.Add('[APP_FETCHMAIL]');
      list.Add('fetchmail='+RegExpr.Match[3]+ ';' +RegExpr.Match[1]);
   end;

   list.Add('');


   list.Add('');
   mstr:=mailgraph.MAILGRAPGH_STATUS();
   RegExpr.Expression:='([0-9\-]+);([0-9\.\sa-zA-Z]+);([0-9\-]+)';
   if RegExpr.Exec(mstr) then begin
      list.Add('[APP_MAILGRAPH]');
      list.Add('mailgraph='+RegExpr.Match[3]+ ';' +RegExpr.Match[1]);
   end;

   list.Add('');
   mstr:=MYSQL_STATUS();
   if D then ShowScreen('SYSTEM_DAEMONS_STATUS:: MYSQL_STATUS=' + mstr);
   RegExpr.Expression:='([0-9\-]+);([0-9\.\sa-zA-Z]+);([0-9\-]+)';
   if RegExpr.Exec(mstr) then begin
      list.Add('[APP_MYSQL]');
      list.Add('mysqld='+RegExpr.Match[3]+ ';' +RegExpr.Match[1]);
   end;



    if ParamStr(2)='all' then begin
          for i:=0 to list.Count-1 do begin
              ShowScreen(list.Strings[i]);

          end;

    end;

    RegExpr.free;
    exit(list);
    list.free;


end;
FUNCTION myConf.KAS_AP_PROCESS_SERVER_PID():string;
begin
  result:=SYSTEM_GET_PID('/usr/local/ap-mailfilter3/run/ap-process-server.pid');
end;
FUNCTION myConf.KAS_AP_SPF_PID():string;
begin
  result:=SYSTEM_GET_PID('/usr/local/ap-mailfilter3/run/ap-spfd.pid');
end;
FUNCTION myConf.KAS_LICENCE_PID():string;
begin
  result:=SYSTEM_GET_PID('/usr/local/ap-mailfilter3/run/kas-license.pid');
end;
FUNCTION myConf.KAS_THTTPD_PID():string;
begin
  result:=SYSTEM_GET_PID('/usr/local/ap-mailfilter3/run/kas-thttpd.pid');
end;
FUNCTION myconf.KAS_MILTER_PID():string;
begin
    result:=SYSTEM_GET_PID('/usr/local/ap-mailfilter3/run/kas-milter.pid');
end;
FUNCTION myconf.MAILFROMD_PID():string;
begin
    result:=SYSTEM_GET_PID(MAILFROMD_VALUES('pidfile'));
end;
//##############################################################################

function MyConf.KAS_STATUS():string;
var
   pid,one,two,three,four:string;
begin
   pid:=KAS_AP_PROCESS_SERVER_PID();
   if length(pid)=0 then one:='0-0';
   if FileExists('/proc/' + pid + '/exe') then one:=pid+'-1' else one:=pid+'-0';

   pid:=KAS_AP_SPF_PID();
   if length(pid)=0 then two:='0-0';
   if FileExists('/proc/' + pid + '/exe') then two:=pid+'-1' else two:=pid+'-0';

   pid:=KAS_LICENCE_PID();
   if length(pid)=0 then three:='0-0';
   if FileExists('/proc/' + pid + '/exe') then three:=pid+'-1' else three:=pid+'-0';

   pid:=KAS_THTTPD_PID();
   if length(pid)=0 then four:='0-0';
   if FileExists('/proc/' + pid + '/exe') then four:=pid+'-1' else four:=pid+'-0';

   result:=one + ';' + two + ';' + three + ';' + four;
end;
//##############################################################################
function MyConf.AVESERVER_STATUS():string;
var pid:string;
begin
   pid:=AVESERVER_GET_PID();

   if length(pid)=0 then begin
       if FileExists('/etc/init.d/aveserver') then begin
          result:='0;'+ AVESERVER_GET_VERSION()+ ';0;0';
          exit;
       end;
       result:='-1;' + AVESERVER_GET_VERSION() + ';' + pid + ';' + AVESERVER_PATTERN_DATE();
       exit;
   end;
   if FileExists('/proc/' + pid + '/exe') then begin
      result:='1;' + AVESERVER_GET_VERSION() + ';' + pid + ';' + AVESERVER_PATTERN_DATE();
      exit;
   end;

end;
//##############################################################################
function MyConf.KAV4PROXY_PATTERN_DATE():string;
var
   BasesPath:string;
   xml:string;
   RegExpr:TRegExpr;
begin
//#UpdateDate="([0-9]+)\s+([0-9]+)"#
 BasesPath:=KAV4PROXY_GET_VALUE('path','BasesPath');
 if not FileExists(BasesPath + '/master.xml') then exit;
 xml:=ReadFileIntoString(BasesPath + '/master.xml');
 RegExpr:=TRegExpr.Create;
 RegExpr.Expression:='UpdateDate="([0-9]+)\s+([0-9]+)"';
 if RegExpr.Exec(xml) then begin

 //date --date "$dte 3 days 5 hours 10 sec ago"

    result:=RegExpr.Match[1] + ';' + RegExpr.Match[2];
 end;
 RegExpr.Free;
end;
//##############################################################################

function MyConf.AVESERVER_PATTERN_DATE():string;
var
   BasesPath:string;
   xml:string;
   RegExpr:TRegExpr;
begin
//#UpdateDate="([0-9]+)\s+([0-9]+)"#
 BasesPath:=AVESERVER_GET_VALUE('path','BasesPath');
 if not FileExists(BasesPath + '/master.xml') then exit;
 xml:=ReadFileIntoString(BasesPath + '/master.xml');
 RegExpr:=TRegExpr.Create;
 RegExpr.Expression:='UpdateDate="([0-9]+)\s+([0-9]+)"';
 if RegExpr.Exec(xml) then begin

 //date --date "$dte 3 days 5 hours 10 sec ago"

    result:=RegExpr.Match[1] + ';' + RegExpr.Match[2];
 end;
 RegExpr.Free;
end;
//##############################################################################
function MyConf.KAVMILTER_PATTERN_DATE():string;
var
   BasesPath:string;
   xml:string;
   RegExpr:TRegExpr;
begin
//#UpdateDate="([0-9]+)\s+([0-9]+)"#
 BasesPath:=KAVMILTER_GET_VALUE('path','BasesPath');
 if not FileExists(BasesPath + '/master.xml') then exit;
 xml:=ReadFileIntoString(BasesPath + '/master.xml');
 RegExpr:=TRegExpr.Create;
 RegExpr.Expression:='UpdateDate="([0-9]+)\s+([0-9]+)"';
 if RegExpr.Exec(xml) then begin

 //date --date "$dte 3 days 5 hours 10 sec ago"

    result:=RegExpr.Match[1] + ';' + RegExpr.Match[2];
 end;
 RegExpr.Free;
end;
//##############################################################################
procedure MyConf.ExecProcess(commandline:string);
var
  P: TProcess;
 begin

  P := TProcess.Create(nil);
  P.CommandLine := commandline  + ' &';
  if debug then LOGS.Logs('MyConf.ExecProcess -> ' + commandline);
  P.Execute;
  P.Free;
end;
//##############################################################################
procedure MyConf.MonShell(cmd:string;sh:boolean);
var
  AProcess: TProcess;
 begin
      if sh then cmd:='sh -c "' + cmd + '"';

      try
        AProcess := TProcess.Create(nil);
        AProcess.CommandLine := cmd;
        AProcess.Execute;
     finally
        AProcess.Free;
     end;
end;
//##############################################################################
function MyConf.ExecPipe(commandline:string):string;
const
  READ_BYTES = 2048;
  CR = #$0d;
  LF = #$0a;
  CRLF = CR + LF;

var
  S: TStringList;
  M: TMemoryStream;
  P: TProcess;
  n: LongInt;
  BytesRead: LongInt;
  xRes:string;

begin
  // writeln(commandline);
  if length(trim(commandline))=0 then exit;
  M := TMemoryStream.Create;
  xRes:='';
  BytesRead := 0;
  P := TProcess.Create(nil);
  P.CommandLine := commandline;
  P.Options := [poUsePipes];
  if debug then LOGS.Logs('MyConf.ExecPipe -> ' + commandline);

  P.Execute;
  while P.Running do begin
    M.SetSize(BytesRead + READ_BYTES);
    n := P.Output.Read((M.Memory + BytesRead)^, READ_BYTES);
    if n > 0 then begin
      Inc(BytesRead, n);
    end
    else begin
      Sleep(100);
    end;

  end;

  repeat
    M.SetSize(BytesRead + READ_BYTES);
    n := P.Output.Read((M.Memory + BytesRead)^, READ_BYTES);
    if n > 0 then begin
      Inc(BytesRead, n);
    end;
  until n <= 0;
  M.SetSize(BytesRead);
  S := TStringList.Create;
  S.LoadFromStream(M);
  if debug then LOGS.Logs('Tprocessinfos.ExecPipe -> ' + IntTostr(S.Count) + ' lines');
  for n := 0 to S.Count - 1 do
  begin
    if length(S[n])>1 then begin

      xRes:=xRes + S[n] +CRLF;
    end;
  end;
  if debug then LOGS.Logs('Tprocessinfos.ExecPipe -> exit');
  S.Free;
  P.Free;
  M.Free;
  exit( xRes);
end;
//##############################################################################
function MyConf.SYSTEM_PROCESS_MEMORY(PID:string):integer;
begin
result:=SYSTEM_PROCESS_MEMORY_FATHER(PID);
end;
//##############################################################################
function myconf.SYSTEM_PROCESS_MEMORY_FATHER(PID:string):integer;
var
   l:TstringList;
   RegExpr:TRegExpr;
   i:Integer;
   FATHER:integer;
   D:Boolean;
   tempfile:string;
begin
D:=COMMANDLINE_PARAMETERS('debug');
result:=0;

PID:=trim(PID);
if PID='0' then begin
   if D then writeln('SYSTEM_PROCESS_MEMORY_FATHER PID=',PID, ' aborting...');
   exit;
end;

if length(PID)=0 then begin
  if D then writeln('SYSTEM_PROCESS_MEMORY_FATHER PID=NULL aborting...');
   exit;
end;

if D then writeln('SYSTEM_PROCESS_MEMORY_FATHER PID=',PID);
l:=TstringList.Create;

  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='^([0-9]+)';
  if not RegExpr.Exec(PID) then begin
     exit;
  end else begin
      PID:=RegExpr.Match[1];
      if D then writeln('SYSTEM_PROCESS_MEMORY_FATHER FATHER PID after regex=',PID);
  end;


  FATHER:=SYSTEM_PROCESS_MEMORY_SINGLE(PID);


 if D then writeln('SYSTEM_PROCESS_MEMORY_FATHER FATHER ',PID,'=',FATHER);

tempfile:='/opt/artica/logs/'+MD5FromString(PID);
if D then writeln('SYSTEM_PROCESS_MEMORY_FATHER -> tempfile=',tempfile);
if D then writeln('SYSTEM_PROCESS_MEMORY_FATHER -> /bin/ps -aeo "%p;%P;%a" --cols 500 >'+tempfile +' 2>&1');

fpsystem('/bin/ps -aeo "%p;%P;%a" --cols 500 >'+tempfile +' 2>&1');
if not FileExists(tempfile) then exit;

try
l.LoadFromFile(tempfile);
RegExpr.Expression:='([0-9]+);\s+'+PID+';.+';
if D then writeln('SYSTEM_PROCESS_MEMORY_FATHER Lines=',l.Count);
for i:=0 to l.Count -1 do begin
    if RegExpr.Exec(l.Strings[i]) then begin
          if D then writeln('FOUND ->',RegExpr.Match[1]);
          FATHER:=FATHER+SYSTEM_PROCESS_MEMORY_SINGLE(RegExpr.Match[1]);
    end else begin
       // if D then writeln('Could not parse ' + l.Strings[i] + ' regex ' + RegExpr.Expression);
    end;
end;
except
   writeln('SYSTEM_PROCESS_MEMORY_FATHER FATHER error on PID ',PID);
end;
DeleteFile(tempfile);
result:=FATHER;

end;
//##############################################################################
function MyConf.SYSTEM_PROCESS_MEMORY_SINGLE(PID:string):integer;
var
   S:Tstringlist;
   RegExpr:TRegExpr;
   I:INTEGER;
   D:boolean;
begin
     result:=0;
     D:=False;
     if length(PID)=0 then exit;
     if PID='0' then exit;
     D:=COMMANDLINE_PARAMETERS('debug');
     if D then writeln('SYSTEM_PROCESS_MEMORY_SINGLE::->',PID);

     if not FileExists('/proc/' + trim(PID) + '/status') then begin
        if D then writeln('SYSTEM_PROCESS_MEMORY_SINGLE:: Could not find /proc/' + trim(PID) + '/status');
        exit(0);
     end;
     s:=TStringList.Create;
     S.LoadFromFile('/proc/' + trim(PID) + '/status');
     if D then writeln('SYSTEM_PROCESS_MEMORY_SINGLE:: /proc/' + trim(PID) + '/status');
     RegExpr:=TRegExpr.Create;
     RegExpr.Expression:='^VmRSS:\s+([0-9]+)';
     for i:=0 to s.Count-1 do begin
       if RegExpr.Exec(s.Strings[i]) then begin
          if D then writeln('SYSTEM_PROCESS_MEMORY_SINGLE :',PID,'=',RegExpr.Match[1],': ',s.Strings[i]);
          result:=StrToInt(trim(RegExpr.Match[1]));
          break;
       end;
     end;

s.free;
RegExpr.free;

end;



//##############################################################################
function MyConf.SYSTEM_PROCESS_STATUS(PID:string):string;
var
   S:Tstringlist;
   RegExpr:TRegExpr;
   I:INTEGER;
   D:boolean;
begin
     result:='';
     RegExpr:=TRegExpr.Create;

     if length(PID)=0 then exit;
     PID:=trim(PID);
     RegExpr.Expression:='^([0-9]+)';
     if PID='0' then exit;
     D:=False;
     D:=COMMANDLINE_PARAMETERS('debug');


     if D then writeln('SYSTEM_PROCESS_STATUS::->',PID);

     if RegExpr.Exec(PID) then begin
        PID:=RegExpr.Match[1];
        if D then writeln('SYSTEM_PROCESS_STATUS:: AFTER REGEX ->',PID);
     end else begin
        if D then writeln('SYSTEM_PROCESS_STATUS:: BAD MATCH REGEX ->',PID);
        exit;
     end;


     if not FileExists('/proc/' + trim(PID) + '/status') then begin
        if D then writeln('SYSTEM_PROCESS_STATUS:: Could not find /proc/' + trim(PID) + '/status');
        exit('0');
     end;
     s:=TStringList.Create;
     S.LoadFromFile('/proc/' + trim(PID) + '/status');
     if D then writeln('SYSTEM_PROCESS_STATUS:: /proc/' + trim(PID) + '/status');

     RegExpr.Expression:='^State:\s+([A-Z])\s+\(([a-zA-Z]+)\)';
     for i:=0 to s.Count-1 do begin
       if RegExpr.Exec(s.Strings[i]) then begin
          if D then writeln('SYSTEM_PROCESS_STATUS :',PID,'=',RegExpr.Match[2],': ',RegExpr.Match[1],' ',s.Strings[i]);
          result:=trim(RegExpr.Match[2]);
          break;
       end;
     end;

s.free;
RegExpr.free;

end;



//##############################################################################
function MyConf.ExecStream(commandline:string;ShowOut:boolean):TMemoryStream;
const READ_BYTES=1024;
var
  M: TMemoryStream;
  P: TProcess;
  n: LongInt;
  BytesRead: LongInt;
begin
  commandline:=commandline + ' 2>&1';
  M := TMemoryStream.Create;
  BytesRead := 0;
  P := TProcess.Create(nil);
  P.CommandLine := commandline;
  P.Options := [poUsePipes];
  if ShowOut then WriteLn('-- executing ' + commandline + ' --');
  if debug then LOGS.Logs('Tprocessinfos.ExecPipe -> ' + commandline);
  TRY
     P.Execute;
     while P.Running do begin
           M.SetSize(BytesRead + READ_BYTES);
           n := P.Output.Read((M.Memory + BytesRead)^, READ_BYTES);
           if n > 0 then begin
              Inc(BytesRead, n);
              end else begin
              Sleep(100);
           end;
     end;
  EXCEPT
        P.Free;
        exit;
  end;


  repeat
    M.SetSize(BytesRead + READ_BYTES);
    n := P.Output.Read((M.Memory + BytesRead)^, READ_BYTES);
    if n > 0 then begin
      Inc(BytesRead, n);
    end;
  until n <= 0;
  M.SetSize(BytesRead);
  exit(M);
end;

//##############################################################################
function MyConf.LINUX_REPOSITORIES_INFOS(inikey:string):string;
var ConfFile:string;
ini:TiniFile;
begin

  ConfFile:=LINUX_CONFIG_INFOS();
  if length(ConfFile)=0 then exit;
  ini:=TIniFile.Create(ConfFile);
  result:=ini.ReadString('REPOSITORIES',inikey,'');
  ini.Free;
end;

//##############################################################################
function MyConf.LINUX_APPLICATION_INFOS(inikey:string):string;
var ConfFile:string;
ini:TiniFile;
begin

  ConfFile:=LINUX_CONFIG_INFOS();
  if length(ConfFile)=0 then exit;
  ini:=TIniFile.Create(ConfFile);
  result:=ini.ReadString('APPLICATIONS',inikey,'');
  ini.Free;
end;
//##############################################################################
function MyConf.LINUX_CONFIG_PATH():string;
var
   Distri,path,fullPath:string;
   D:Boolean;
begin
   D:=false;
   D:=COMMANDLINE_PARAMETERS('debug');
   Distri:=LINUX_DISTRIBUTION();
   if D then writeln('LINUX_CONFIG_PATH ->LINUX_DISTRIBUTION=' + Distri);
   path:=ExtractFileDir(ParamStr(0));
   fullPath:=path + '/install/distributions/' + Distri;
   if D then writeln('LINUX_CONFIG_PATH is path ? (' + fullPath + ')');
   if not DirectoryExists(fullpath) then begin
      writeln('Unable to locate necessary folder:"' + fullPath + '"');
      exit();
   end;
   result:=fullpath;
end;
//##############################################################################
function MyConf.LINUX_CONFIG_INFOS():string;
var
   Distri,path,fullPath,include:string;
   sini:TiniFile;

begin
   Distri:=LINUX_DISTRIBUTION();
   path:=ExtractFileDir(ParamStr(0));
   fullPath:=path + '/install/distributions/' + Distri + '/infos.conf';
   if not FileExists(fullpath) then begin
      writeln('Unable to locate necessary file:"' + fullPath + '"');
      exit();
   end;
    sini:=TiniFile.Create(fullPath);
    include:=sini.ReadString('INCLUDE','config','');
    sini.Free;
    if length(include)>0 then begin
          fullPath:=path + '/install/distributions/' + include + '/infos.conf';
          if not FileExists(fullpath) then begin
             writeln('Unable to locate include file:"' + fullPath + '"');
             exit();
          end;

    end;



   result:=fullpath;
end;
//##############################################################################
function Myconf.SYSTEM_DAEMONS_STOP_START(APPS:string;mode:string;return_string:boolean):string;
var commandline:string;
    log:Tlogs;
    cyr:Tcyrus;
begin
     cyr:=Tcyrus.Create;
     if APPS='APP_POSTFIX' then commandline:='/etc/init.d/postfix '+mode;
     if APPS='APP_AVESERVER' then CommandLine:='/etc/init.d/aveserver '+mode;
     if APPS='APP_KAS3' then CommandLine:='/etc/init.d/kas3 ' +mode;
     if APPS='APP_FETCHMAIL' then CommandLine:='/etc/init.d/fetchmail ' +mode;
     if APPS='APP_CYRUS' then CommandLine:=cyr.CYRUS_GET_INITD_PATH() + ' '+mode;
     if APPS='APP_MAILGRAPH' then CommandLine:='/etc/init.d/mailgraph-init ' + mode;
     if APPS='APP_MYSQL' then CommandLine:=MYSQL_INIT_PATH() + ' '+mode;
     if return_string=true then exit(CommandLine);
     log:=Tlogs.Create;
     log.logs('SYSTEM_DAEMONS_STOP_START::Perform operation ' + CommandLine);
     fpsystem(CommandLine);

end;
//##############################################################################
function MyConf.CRON_CREATE_SCHEDULE(ProgrammedTime:string;Croncommand:string;name:string):boolean;
 var FileDatas:TstringList;
begin
  result:=true;
  FileDatas:=TstringList.Create;
  FileDatas.Add(ProgrammedTime + ' ' + ' root ' + Croncommand + ' >/dev/null');
  ShowScreen('CRON_CREATE_SCHEDULE:: saving /etc/cron.d/artica.'+name + '.scheduled');
  FileDatas.SaveToFile('/etc/cron.d/artica.'+name + '.scheduled');
  FileDatas.free;


end;




function MyConf.LINUX_INSTALL_INFOS(inikey:string):string;
var ConfFile:string;
ini:TiniFile;
D:boolean;
begin
  D:=COMMANDLINE_PARAMETERS('debug');
  ConfFile:=LINUX_CONFIG_INFOS();
  if D then ShowScreen('LINUX_INSTALL_INFOS:: ConfFile="' + ConfFile + '"');

  if length(ConfFile)=0 then begin
     ShowScreen('LINUX_INSTALL_INFOS(' + inikey + ') unable to get configuration file path');
     exit;
  end;
  ini:=TIniFile.Create(ConfFile);
  result:=ini.ReadString('INSTALL',inikey,'');
  if length(result)=0 then ShowScreen('LINUX_INSTALL_INFOS([INSTALL]::' + inikey + ') this key has no datas');
  ini.Free;
  exit(result);
end;
//##############################################################################
function MyConf.LINUX_LDAP_INFOS(inikey:string):string;
var ConfFile:string;
ini:TiniFile;
begin

  ConfFile:=LINUX_CONFIG_INFOS();
  if length(ConfFile)=0 then begin
     writeln('LINUX_LDAP_INFOS(' + inikey + ') unable to get configuration file path');
     exit;
  end;
  ini:=TIniFile.Create(ConfFile);
  result:=ini.ReadString('LDAP',inikey,'');
  ini.Free;
  exit(result);
end;
//##############################################################################


//##############################################################################
function MyConf.LINUX_DISTRIBUTION():string;
var
   RegExpr:TRegExpr;
   FileTMP:TstringList;
   Filedatas:TstringList;
   i:integer;
   distri_name,distri_ver,distri_provider:string;
   D:boolean;
begin
  D:=COMMANDLINE_PARAMETERS('debug');
  if length(get_INFOS('LinuxDistribution'))>0 then begin
     exit(get_INFOS('LinuxDistribution'));
  end;
  
  RegExpr:=TRegExpr.Create;
  if FileExists('/etc/lsb-release') then begin
      if not FileExists('/etc/redhat-release') then begin
             if D then Writeln('/etc/lsb-release detected (not /etc/redhat-release detected)');
             fpsystem('/bin/cp /etc/lsb-release /opt/artica/logs/lsb-release');
             FileTMP:=TstringList.Create;
             FileTMP.LoadFromFile('/opt/artica/logs/lsb-release');
             for i:=0 to  FileTMP.Count-1 do begin
                 RegExpr.Expression:='DISTRIB_ID=(.+)';
                 if RegExpr.Exec(FileTMP.Strings[i]) then distri_provider:=trim(RegExpr.Match[1]);
                 RegExpr.Expression:='DISTRIB_RELEASE=([0-9\.]+)';
                 if RegExpr.Exec(FileTMP.Strings[i]) then distri_ver:=trim(RegExpr.Match[1]);
                 RegExpr.Expression:='DISTRIB_CODENAME=(.+)';
                 if RegExpr.Exec(FileTMP.Strings[i]) then distri_name:=trim(RegExpr.Match[1]);
             end;

             result:=distri_provider + ' ' +  distri_ver + ' ' +  distri_name;
             set_INFOS('LinuxDistribution',result);
             RegExpr.Free;
             FileTMP.Free;
             exit();
      end;
  end;
  Filedatas:=TstringList.Create;
  if FileExists('/etc/debian_version') then begin
       if D then Writeln('/etc/debian_version detected');
       Filedatas:=TstringList.Create;
       Filedatas.LoadFromFile('/etc/debian_version');
       RegExpr.Expression:='([0-9\.]+)';
       if RegExpr.Exec(Filedatas.Strings[0]) then begin
          Set_infos('LinuxDistribution','Debian ' + RegExpr.Match[1] +' Gnu-linux');
          result:='Debian ' + RegExpr.Match[1] +' Gnu-linux';
          RegExpr.Free;
          Filedatas.Free;
          exit();
       end;
  end;
  //Fedora
  if FileExists('/etc/redhat-release') then begin
     Filedatas:=TstringList.Create;
     Filedatas.LoadFromFile('/etc/redhat-release');
     if D then Writeln('/etc/redhat-release detected -> ' + Filedatas.Strings[0]);

     RegExpr.Expression:='Fedora Core release\s+([0-9]+)';
     if RegExpr.Exec(Filedatas.Strings[0]) then begin
          Set_infos('LinuxDistribution','Fedora Core release ' + RegExpr.Match[1]);
          result:='Fedora Core release ' + RegExpr.Match[1];
          RegExpr.Free;
          Filedatas.Free;
          exit();
       end;
      RegExpr.Expression:='Fedora release\s+([0-9]+)';
      if RegExpr.Exec(Filedatas.Strings[0]) then begin
         Set_infos('LinuxDistribution','Fedora release ' + RegExpr.Match[1]);
         result:='Fedora release ' + RegExpr.Match[1];
         RegExpr.Free;
         Filedatas.Free;
         exit();
      end;

      //Mandriva
      RegExpr.Expression:='Mandriva Linux release\s+([0-9]+)';
      if RegExpr.Exec(Filedatas.Strings[0]) then begin
         Set_infos('LinuxDistribution','Mandriva Linux release ' + RegExpr.Match[1]);
         result:='Mandriva Linux release ' + RegExpr.Match[1];
         RegExpr.Free;
         Filedatas.Free;
         exit();
      end;
      //CentOS
      RegExpr.Expression:='CentOS release\s+([0-9]+)';
      if RegExpr.Exec(Filedatas.Strings[0]) then begin
         result:='CentOS release ' + RegExpr.Match[1];
         Set_infos('LinuxDistribution',result);
         RegExpr.Free;
         Filedatas.Free;
         exit();
      end;

    end;

   //Suse
   if FileExists('/etc/SuSE-release') then begin
       Filedatas:=TstringList.Create;
       Filedatas.LoadFromFile('/etc/SuSE-release');
       result:=trim(Filedatas.Strings[0]);
       Set_infos('LinuxDistribution',result);
       Filedatas.Free;
       exit;
   end;



end;
//##############################################################################
procedure MyConf.ShowScreen(line:string);
 begin
   writeln(line);
    logs.logs('MYCONF::' + line);
 END;
//##############################################################################
function MyConf.SYSTEM_KERNEL_VERSION():string;
begin
    exit(ExecPipe('/bin/uname -r'));
end;
//##############################################################################
function MyConf.SYSTEM_LIBC_VERSION():string;
var
   head,returned,command:string;
   D:boolean;
   RegExpr:TRegExpr;
begin
///lib/libc.so.6 | /usr/bin/head -1

     D:=COMMANDLINE_PARAMETERS('debug');
     if FileExists('/usr/bin/head') then head:='/usr/bin/head';
     if length(head)=0 then begin
        if D then ShowScreen('SYSTEM_LIBC_VERSION:: unable to locate head tool');
        exit;
     end;

     if not fileExists('/lib/libc.so.6') then begin
        if D then ShowScreen('SYSTEM_LIBC_VERSION:: unable to stat /lib/libc.so.6');
        exit;
     end;
 command:='/lib/libc.so.6 | ' + head + ' -1';
 if D then ShowScreen('SYSTEM_LIBC_VERSION:: command="'+ command + '"');
 returned:=ExecPipe('/lib/libc.so.6 | ' + head + ' -1');
 if D then ShowScreen('SYSTEM_LIBC_VERSION:: returned="'+ returned + '"');
 RegExpr:=TRegExpr.Create;
 RegExpr.Expression:='version ([0-9\.]+)';
 if RegExpr.Exec(returned) then SYSTEM_LIBC_VERSION:=RegExpr.Match[1] else begin
      if D then ShowScreen('SYSTEM_LIBC_VERSION:: unable to match pattern');
      exit;
      end;
end;

//##############################################################################
function MyConf.SYSTEM_NETWORK_LIST_NICS():string;
var
   list:TStringList;
   RegExpr,RegExprH,RegExprF,RegExprG:TRegExpr;
   i:integer;
   D,A:boolean;
begin
   result:='';
   A:=false;
   D:=COMMANDLINE_PARAMETERS('debug');
   if ParamStr(1)='-nics' then A:=true;

   list:=TStringList.Create;
   ArrayList:=TStringList.Create;
   fpsystem('/sbin/ifconfig -a >/opt/artica/logs/ifconfig.a 2>&1');

   list.LoadFromFile('/opt/artica/logs/ifconfig.a');
   logs.logs('SYSTEM_NETWORK_LIST_NICS:: include ' +INtToStr(list.Count) + ' parameters' );
      RegExpr:=TRegExpr.Create;
      RegExprH:=TRegExpr.Create;
      RegExprG:=TRegExpr.Create;
      RegExprF:=TRegExpr.Create;
      RegExpr.Expression:='^([a-z0-9\:]+)\s+';
      RegExprF.Expression:='^vmnet([0-9\:]+)';
      RegExprG.Expression:='^sit([0-9\:]+)';
      RegExprH.Expression:='^([a-zA-Z0-9]+):avah';

      for i:=0 to list.Count -1 do begin
        if D then ShowScreen('SYSTEM_NETWORK_LIST_NICS::"'+ list.Strings[i] + '"');
        if RegExpr.Exec(list.Strings[i]) then begin
           if not RegExprF.Exec(RegExpr.Match[1]) then begin
              if not RegExprH.Exec(RegExpr.Match[1]) then begin
                 if not RegExprG.Exec(RegExpr.Match[1]) then begin
                    if RegExpr.Match[1]<>'lo' then begin
                       if D then ShowScreen('SYSTEM_NETWORK_LIST_NICS:: ^([a-z0-9\:]+)\s+=>"'+ list.Strings[i] + '"');
                       ArrayList.Add(RegExpr.Match[1]);
                       if A then writeln(RegExpr.Match[1]);
                    end;
                 end;
              end;
           end;
        end;
   end;

    List.Free;
    RegExpr.free;
    RegExprF.free;
    RegExprH.free;
    RegExprG.free;

end;

//##############################################################################
function MyConf.SYSTEM_NETWORK_INFO_NIC(nicname:string):string;
var      D:boolean;
begin
    result:='';
     D:=COMMANDLINE_PARAMETERS('debug');
     if FileExists('/etc/network/interfaces') then begin
         if D then ShowScreen('SYSTEM_NETWORK_INFO_NIC :: Debian system');
         SYSTEM_NETWORK_INFO_NIC_DEBIAN(nicname);
         exit;
     end;

     if DirectoryExists('/etc/sysconfig/network-scripts') then begin
      if D then ShowScreen('SYSTEM_NETWORK_INFO_NIC :: redhat system');
      SYSTEM_NETWORK_INFO_NIC_REDHAT(nicname);
      exit;
     end;


end;
//##############################################################################
function MyConf.SYSTEM_NETWORK_INFO_NIC_REDHAT(nicname:string):string;
var
   CatchList:TstringList;
   list:Tstringlist;
   i:Integer;
begin
  result:='';
  CatchList:=TStringList.create;
  CatchList.Add('METHOD=redhat');
  list:=TStringList.Create;
  if fileExists('/etc/sysconfig/network-scripts/ifcfg-' + nicname) then begin
        list.LoadFromFile('/etc/sysconfig/network-scripts/ifcfg-' + nicname);
        for i:=0 to list.Count-1 do begin
             CatchList.Add(list.Strings[i]);

        end;

  end;
 ArrayList:=TStringList.create;
 for i:=0 to CatchList.Count-1 do begin
         if ParamStr(1)='-nic-info' then  writeln(CatchList.Strings[i]);
          ArrayList.Add(CatchList.Strings[i]);
    end;
  CatchList.free;
  list.free;


end;

//##############################################################################
function MyConf.SYSTEM_NETWORK_IFCONFIG():string;
         const
            CR = #$0d;
            LF = #$0a;
            CRLF = CR + LF;

var
   D:boolean;
   resultats:string;
   i:integer;
begin
 SYSTEM_NETWORK_LIST_NICS();
 D:=COMMANDLINE_PARAMETERS('debug');
 resultats:='';

 for i:=0 to ArrayList.Count-1 do begin
    if D then ShowScreen('SYSTEM_NETWORK_IFCONFIG:: Parse ' + ArrayList.Strings[i]);
       resultats:=resultats + '[' + ArrayList.Strings[i] + ']'+CRLF;
       resultats:=resultats + SYSTEM_NETWORK_IFCONFIG_ETH(ArrayList.Strings[i]) + CRLF;
 end;
   exit(resultats);

end;
//#############################################################################
function MyConf.SYSTEM_ALL_IPS():string;
var
   A,D:boolean;
   LIST:TstringList;
   i:integer;
   RegExpr:TRegExpr;
   LINE:String;

begin
   A:=False;
   D:=False;
   D:=COMMANDLINE_PARAMETERS('debug');
   result:='';
   if ParamStr(1)='-allips' then A:=True;
   LIST:=TstringList.Create;
   ArrayList:=TstringList.Create;


   fpsystem('/sbin/ifconfig -a >/opt/artica/logs/ifconfig.tmp');
   list.LoadFromFile('/opt/artica/logs/ifconfig.tmp');


   if D then ShowScreen('SYSTEM_ALL_IPS:: return '+ IntToStr(list.Count) + ' lines');
   RegExpr:=TRegExpr.Create;
   RegExpr.Expression:='inet (adr|addr):([0-9\.]+)';
   for i:=0 to list.Count-1 do begin
           if RegExpr.Exec(list.Strings[i]) then begin
              LINE:=RegExpr.Match[2];
              IF A then writeln(LINE);
              if D then writeln('SYSTEM_ALL_IPS: ',LINE);
              ArrayList.Add(LINE);
           end;
    end;
    RegExpr.free;
    LIST.Free;
end;
//#############################################################################
function MyConf.SYSTEM_PROCESS_PS():string;
var
   A,D:boolean;
   LIST:TstringList;
   i:integer;
   RegExpr:TRegExpr;
   LINE:String;

begin
   result:='';
   A:=False;
   D:=False;
   D:=COMMANDLINE_PARAMETERS('debug');
   if ParamStr(1)='-ps' then A:=True;
   LIST:=TstringList.Create;
   ArrayList:=TstringList.Create;
   fpsystem('/bin/ps --no-heading -eo user:80,pid,pcpu,vsz,nice,etime,time,stime,args|sort -nbk 3|tail -50 >/opt/artica/tmp/taskmanager 2>&1');

   list.LoadFromFile('/opt/artica/tmp/taskmanager');
   if D then ShowScreen('SYSTEM_PROCESS_PS:: return '+ IntToStr(list.Count) + ' lines');
   RegExpr:=TRegExpr.Create;
   RegExpr.expression:='^(.+?)\s+(.+?)\s+(.+?)\s+(.+?)\s+(.+?)\s+(.+?)\s+(.+?)\s+(.+?)\s+(.+)';
   for i:=0 to list.Count-1 do begin
           if RegExpr.Exec(list.Strings[i]) then begin
              LINE:=RegExpr.Match[1]+';'+RegExpr.Match[2]+';'+RegExpr.Match[3]+';'+RegExpr.Match[4]+';'+RegExpr.Match[5]+';'+RegExpr.Match[6]+';'+RegExpr.Match[7]+';'+RegExpr.Match[8]+';'+RegExpr.Match[9] + ';'+SYSTEM_PROCESS_INFO(RegExpr.Match[2]);
              IF A then writeln(LINE);
              ArrayList.Add(LINE);
           end;
    end;
    RegExpr.free;
    LIST.Free;
end;



//#############################################################################
function MyConf.SYSTEM_PROCESS_INFO(PID:string):string;
var
   LIST:TstringList;
   i:integer;
   RegExpr:TRegExpr;
   Resultats:string;
begin
 Resultats:='';
 if not FileExists('/proc/' + trim(PID) + '/status') then exit;
 LIST:=TstringList.Create;
 LIST.LoadFromFile('/proc/' + trim(PID) + '/status');
   RegExpr:=TRegExpr.Create;
   RegExpr.expression:='(.+?):\s+(.+)';
 for i:=0 to list.Count-1 do begin
     if RegExpr.Exec(list.Strings[i]) then begin
       Resultats:=Resultats +trim(RegExpr.Match[1])+'=' + trim(RegExpr.Match[2])+',';
     end;
 end;
     RegExpr.free;
    LIST.Free;
 exit(resultats);
end;
//#############################################################################

function MyConf.SYSTEM_NETWORK_IFCONFIG_ETH(ETH:string):string;
         const
            CR = #$0d;
            LF = #$0a;
            CRLF = CR + LF;

var
   D:boolean;
   RegExpr:TRegExpr;
   list:Tstringlist;
   resultats:string;
   i:integer;
begin
 D:=COMMANDLINE_PARAMETERS('debug');
 list:=TstringList.Create;
 list.LoadFromStream(ExecStream('/sbin/ifconfig -a ' + ETH,false));
 RegExpr:=TRegExpr.Create;
 resultats:='';
 for i:=0 to list.Count-1 do begin
    if D then ShowScreen('SYSTEM_NETWORK_IFCONFIG_ETH:: '+ ETH + 'parse '  + list.Strings[i]);
    RegExpr.Expression:='HWaddr\s+([0-9A-Z]{1,2}:[0-9A-Z]{1,2}:[0-9A-Z]{1,2}:[0-9A-Z]{1,2}:[0-9A-Z]{1,2}:[0-9A-Z]{1,2})';
    if RegExpr.Exec(list.Strings[i]) then resultats:=resultats + 'MAC='+ RegExpr.Match[1] + CRLF;

    RegExpr.Expression:='(Masque|Mask):([0-9\.]+)';
    if RegExpr.Exec(list.Strings[i]) then resultats:=resultats + 'NETMASK='+ RegExpr.Match[2] + CRLF;

    RegExpr.Expression:='inet (adr|addr):([0-9\.]+)';
    if RegExpr.Exec(list.Strings[i]) then resultats:=resultats + 'IPADDR='+ RegExpr.Match[2] + CRLF;

 end;
 if not FileExists('/usr/sbin/ethtool') then ShowScreen('SYSTEM_NETWORK_IFCONFIG_ETH:: unable to stat /usr/sbin/ethtool');
 list.LoadFromStream(ExecStream('/usr/sbin/ethtool ' + ETH,false));
 if D then ShowScreen('SYSTEM_NETWORK_IFCONFIG_ETH:: ' + ETH + ' ethtool report ' + IntToStr(list.Count) + ' lines');
 RegExpr.Expression:='\s+([a-zA-Z0-9\s+]+):\s+(.+)';
  for i:=0 to list.Count-1 do begin
       if RegExpr.Exec(list.Strings[i]) then resultats:= resultats+ RegExpr.Match[1] + '='+ RegExpr.Match[2] + CRLF;
  end;

 exit(resultats);
end;
//#############################################################################
function MyConf.SYSTEM_NETWORK_RECONFIGURE():string;
var
    D:boolean;
    list:Tstringlist;
    i:integer;
begin
   D:=COMMANDLINE_PARAMETERS('debug');
   result:='';
   if FileExists('/etc/network/interfaces') then begin
        if D Then ShowScreen('SYSTEM_NETWORK_RECONFIGURE:: SYSTEM DEBIAN');
        if not FileExists(get_ARTICA_PHP_PATH() + '/ressources/conf/debian.interfaces') then begin
              if D Then ShowScreen('SYSTEM_NETWORK_RECONFIGURE:: WARNING !!! unable to stat ' + get_ARTICA_PHP_PATH() + '/ressources/conf/debian.interfaces');
        end;

        fpsystem('/bin/mv  ' + get_ARTICA_PHP_PATH() + '/ressources/conf/debian.interfaces /etc/network/interfaces');
        fpsystem('/etc/init.d/networking force-reload');

   end;

   if DirectoryExists('/etc/sysconfig/network-scripts') then begin
      if D Then ShowScreen('SYSTEM_NETWORK_RECONFIGURE:: SYSTEM REDHAT');
      if not FileExists(get_ARTICA_PHP_PATH() + '/ressources/conf/eth.list') then begin
         if D Then ShowScreen('SYSTEM_NETWORK_RECONFIGURE:: WARNING !! unable to stat "'+ get_ARTICA_PHP_PATH() + '/ressources/conf/eth.list"');
      end;

      list:=Tstringlist.Create;
      List.LoadFromFile(get_ARTICA_PHP_PATH() + '/ressources/conf/eth.list');
      for i:=0 to list.Count-1 do begin
           if D Then ShowScreen('SYSTEM_NETWORK_RECONFIGURE:: -> Modifyl/add ' +list.Strings[i]);
           fpsystem('/bin/mv ' + get_ARTICA_PHP_PATH() + '/ressources/conf/' + list.Strings[i] + ' /etc/sysconfig/network-scripts/');

      end;
      fpsystem('/bin/rm ' + get_ARTICA_PHP_PATH() + '/ressources/conf/eth.list');

      if FileExists(get_ARTICA_PHP_PATH() + '/ressources/conf/eth.del') then begin
          List.LoadFromFile(get_ARTICA_PHP_PATH() + '/ressources/conf/eth.del');
         for i:=0 to list.Count-1 do begin
             if D Then ShowScreen('SYSTEM_NETWORK_RECONFIGURE:: -> Delete ' +list.Strings[i]);
             if FileExists('/etc/sysconfig/network-scripts/' + list.Strings[i]) then fpsystem('/bin/rm /etc/sysconfig/network-scripts/' + list.Strings[i]);
         end;
         fpsystem('/bin/rm ' + get_ARTICA_PHP_PATH() + '/ressources/conf/eth.del');
      end;


      fpsystem('/etc/init.d/network restart');
   end;

end;
//#############################################################################




function MyConf.SYSTEM_NETWORK_INFO_NIC_DEBIAN(nicname:string):string;
var
   D,A:boolean;
   RegExpr:TRegExpr;
   RegExprEnd:TRegExpr;
   RegExprValues:TRegExpr;
   list:Tstringlist;
   CatchList:TstringList;
   expression,key:string;
   i:integer;
begin
        D:=COMMANDLINE_PARAMETERS('debug');
        list:=TStringList.Create;
        CatchList:=TStringList.create;
        RegExprValues:=TRegExpr.Create;
        ArrayList:=TStringList.create;
        result:='';
        RegExpr:=TRegExpr.Create;
        RegExprEnd:=TRegExpr.Create;
        expression:='iface\s+'+nicname+'\s+inet\s+(static|dhcp)';
        RegExprEnd.Expression:='^iface';
        RegExprValues.Expression:='^([a-zA-Z\-\_0-9\:]+)\s+(.+)';
        RegExpr.Expression:=expression;

        list.LoadFromFile('/etc/network/interfaces');
        A:=false;
        for i:=0 to list.Count -1 do begin
           if RegExpr.Exec(list.Strings[i]) then begin
              A:=true;
              if D then ShowScreen('SYSTEM_NETWORK_INFO_NIC_DEBIAN:: detect ' + expression + '=' + list.Strings[i] + ' "' + RegExpr.Match[1] +'"');
              list.Strings[i]:='';
              CatchList.Add('BOOTPROTO=' +  RegExpr.Match[1]);
              CatchList.Add('METHOD=debian');
              CatchList.Add('DEVICE='+nicname);

           end;

           if A=true then begin
              if not RegExprEnd.Exec(list.Strings[i]) then begin
                 if length(trim(list.Strings[i]))>0 then begin
                    if RegExprValues.Exec(list.Strings[i]) then begin
                       key:=RegExprValues.Match[1];
                       if key='address' then key:='IPADDR';
                       if key='netmask' then key:='NETMASK';
                       if key='gateway' then key:='GATEWAY';
                       if key='broadcast' then key:='BROADCAST';
                       if key='network' then key:='NETWORK';
                       if key='metric' then key:='METRIC';
                       CatchList.Add(key + '=' + RegExprValues.Match[2]);
                    end;
                 end;
                 end else begin
                  break;
              end;
           end;


        end;
    for i:=0 to CatchList.Count-1 do begin
         if ParamStr(1)='-nic-infos' then  writeln(CatchList.Strings[i]);
          ArrayList.Add(CatchList.Strings[i]);
    end;
    RegExpr.free;
    RegExprEnd.free;
    RegExprValues.free;

    CatchList.free;
    list.free;

end;
//##############################################################################


function MyConf.SYSTEM_GET_ALL_LOCAL_IP():string;
var
   list:TStringList;
   hash: THashStringList;
   RegExpr:TRegExpr;
   i:integer;
   D:boolean;
   virgule:string;
begin

   result:='';
   D:=COMMANDLINE_PARAMETERS('debug');
   list:=TStringList.Create;
   list.LoadFromStream(ExecStream('/sbin/ifconfig -a',false));
   hash:=  THashStringList.Create;
   for i:=1 to list.Count -1 do begin
      RegExpr:=TRegExpr.Create;
      RegExpr.Expression:='^([a-z0-9\:]+)\s+';
      if RegExpr.Exec(list.Strings[i]) then begin
         if D then ShowScreen('SYSTEM_GET_ALL_LOCAL_IP:: Found NIC "' + RegExpr.Match[1] + '"');
         hash[RegExpr.Match[1]] :=SYSTEM_GET_LOCAL_IP(RegExpr.Match[1]);
      end;
      RegExpr.Free;

   end;

    list.free;
    for i:=0 to hash.Count-1 do begin

        if length(hash[hash.HashCodes[i]])>0 then begin
           if ParamStr(1)='-iplocal' then writeln('NIC -> ',hash.HashCodes[i] + ':' + hash[hash.HashCodes[i]] + ':',i);
           virgule:=',';
           result:=result + hash[hash.HashCodes[i]] + virgule;
        end;

    end;

  if Copy(result,length(result),1)=',' then begin
     result:=Copy(result,1,length(result)-1);
  end;
  hash.Free;

end;
//##############################################################################
function MyConf.SYSTEM_GET_LOCAL_IP(ifname:string):string;
var
 ifr : ifreq;
 sock : longint;
 p:pChar;


begin
 Result:='';

 strncpy( ifr.ifr_ifrn.ifrn_name, pChar(ifname), IF_NAMESIZE-1 );
 ifr.ifr_ifru.ifru_addr.sa_family := AF_INET;
 sock := socket(AF_INET, SOCK_DGRAM, IPPROTO_IP);
 if ( sock >= 0 ) then begin
   if ( ioctl( sock, SIOCGIFADDR, @ifr ) >= 0 ) then begin
     p:=inet_ntoa( ifr.ifr_ifru.ifru_addr.sin_addr );
     if ( p <> nil ) then Result :=  p;
   end;
   libc.__close(sock);
 end;
end;
//##############################################################################
function MyConf.SYSTEM_PROCESS_EXISTS(processname:string):boolean;
var
   mySYS:Tsystem;
begin
   mySys:=Tsystem.Create;
   result:=mysys.PROCESS_EXISTS_BY_NAME(processname);
   mysys.Free;
end;
//##############################################################################
function MyConf.SYSTEM_PROCESS_LIST_PID(processname:string):string;
var
   mySYS:Tsystem;
begin
  mySys:=Tsystem.Create;
   result:=mysys.PROCESS_LIST_PID(processname);
   mysys.Free;

end;
//##############################################################################
procedure myconf.POSTFIX_CONFIGURE_MAIN_CF();
begin
fpsystem('/bin/chown root:root /etc/postfix/main.cf /etc/postfix/master.cf >/dev/null 2>&1' );
postfix.POSTFIX_STOP();
postfix.POSTFIX_START();
end;

procedure myconf.SASLAUTHD_CONFIGURE();
var
   cyrus:Tcyrus;
begin
 cyrus:=TCyrus.Create;
 cyrus.SASLAUTHD_CONFIGURE();
 cyrus.Free;
 SASLAUTHD_START();
end;

//##############################################################################
function myconf.XINETD_BIN():string;
begin
    if FileExists('/usr/sbin/xinetd') then exit('/usr/sbin/xinetd');
end;
//##############################################################################
function myconf.SYSTEM_GET_FOLDERSIZE(folderpath:string):string;
var
   RegExpr      :TRegExpr;
   s1Logs       :Tlogs;
begin
   RegExpr:=TRegExpr.Create;
   s1Logs:=TLogs.Create;
   if not FileExists('/usr/bin/du') then begin
      logs.Syslogs('SYSTEM_GET_FOLDERSIZE:: unable to stat any "du" tool');
   end;
 RegExpr.Expression:='(.+)\s+'+folderpath;
 if RegExpr.Exec(ExecPipe('/usr/bin/du -c -s -h ' + folderpath)) then result:=RegExpr.Match[1];
 RegExpr.Free;
 s1Logs.free;


end;
//##############################################################################
procedure myconf.DeleteFile(Path:string);
begin
if PathIsDirectory(Path) then exit;

   if FileExists(Path) then begin
     fpsystem('/bin/rm -f ' + path + ' >/dev/null 2>&1');
   end;

end;
//##############################################################################
PROCEDURE myconf.BuildDeb(targetfile:string;targetversion:string);
var
   RegExpr      :TRegExpr;
   L            :TstringList;
   i            :integer;
begin
  if Not FileExists(targetfile) then exit;
  L:=TStringList.Create;
  L.LoadFromFile(targetfile);
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='Version:';
  for i:=0 to L.Count-1 do begin
   if RegExpr.Exec(l.Strings[i]) then begin
      l.Strings[i]:='Version: ' + targetversion;
      l.SaveToFile(targetfile);
      break;
   end;
  end;
end;


PROCEDURE myconf.RRDTOOL_FIX();
var logs:Tlogs;
begin
    logs:=Tlogs.Create;
    forcedirectories('/opt/artica/bin');
    if not FileExists('/opt/artica/bin/rrdtool') then begin
       if FileExists(RRDTOOL_BIN_PATH()) then begin
          logs.Debuglogs('RRDTOOL_FIX:: create symlink -> '+RRDTOOL_BIN_PATH());
          ln(RRDTOOL_BIN_PATH(),'/opt/artica/bin/rrdtool');
       end;
    end;
    logs.Debuglogs('RRDTOOL_FIX:: end..');
end;
//##############################################################################
function myconf.FileSize_ko(path:string):longint;
Var
msys:Tsystem;
begin
msys:=Tsystem.Create;
result:=msys.FileSize_ko(path);
end;
//##############################################################################
function myconf.SYSTEM_FILE_MIN_BETWEEN_NOW(filepath:string):LongInt;
begin
result:=SYSTEM_FILE_BETWEEN_NOW(filepath);
end;
//##############################################################################
function myconf.SYSTEM_FILE_BETWEEN_NOW(filepath:string):LongInt;
var
   fa   : Longint;
   S    : TDateTime;
   maint:TDateTime;
begin
if not FileExists(filepath) then exit(0);
    fa:=FileAge(filepath);
    maint:=Now;
    S:=FileDateTodateTime(fa);
    result:=MinutesBetween(maint,S);
end;
//##############################################################################
function myconf.SYSTEM_FILE_SECONDS_BETWEEN_NOW(filepath:string):LongInt;
var
   fa   : Longint;
   S    : TDateTime;
   maint:TDateTime;
begin
if not FileExists(filepath) then exit(0);
    fa:=FileAge(filepath);
    maint:=Now;
    S:=FileDateTodateTime(fa);
    result:=SecondsBetween(maint,S);
end;
//##############################################################################
function myconf.SYSTEM_FILE_DAYS_BETWEEN_NOW(filepath:string):LongInt;
var
   fa   : Longint;
   S    : TDateTime;
   maint:TDateTime;
begin
if not FileExists(filepath) then exit(0);
    fa:=FileAge(filepath);
    maint:=Now;
    S:=FileDateTodateTime(fa);
    result:=DaysBetween(maint,S);
end;
//##############################################################################
function myconf.SYSTEM_FILE_TIME(filepath:string):string;
var
   fa   : Longint;
   S    : TDateTime;
   maintenant : Tsystemtime;
   zDate:string;
   XFL:Tlogs;
begin
if not FileExists(filepath) then exit('');
    XFL:=Tlogs.Create;
    fa:=FileAge(filepath);
    S:=FileDateTodateTime(fa);
    DateTimeToSystemTime(S,maintenant);
   zDate := XFL.FormatHeure(maintenant.Year)+'-' +XFL.FormatHeure(maintenant.Month)+ '-' + XFL.FormatHeure(maintenant.Day)+ chr(32)+XFL.FormatHeure(maintenant.Hour)+':'+XFL.FormatHeure(maintenant.minute)+':'+ XFL.FormatHeure(maintenant.second);
   XFL.Free;
   result:=zDate;
end;
//##############################################################################

procedure myconf.StatFile(path:string);
var
    info : stat;
    S    : TDateTime;
    fa   : Longint;
    maint:TDateTime;
begin
if not FileExists(path) then begin
   writeln('not a file');
   if Not DirectoryExists(path) then begin
      writeln('not a dir');
      exit;
    end;
end;
  if fpstat(path,info)<>0 then
     begin
       writeln('Fstat failed. Errno : ',fpgeterrno);
       halt (1);
     end;
  writeln;
  writeln ('Result of fstat on file ' + path);
  writeln ('Inode         : ',info.st_ino);
  writeln ('Mode          : ',info.st_mode);
  writeln ('nlink         : ',info.st_nlink);
  writeln ('uid           : ',info.st_uid);
  writeln ('gid           : ',info.st_gid);
  writeln ('rdev          : ',info.st_rdev);
  writeln ('Size          : ',info.st_size);
  writeln ('Blksize       : ',info.st_blksize);
  writeln ('Blocks        : ',info.st_blocks);
  writeln ('atime         : ',info.st_atime);
  writeln ('mtime         : ',info.st_mtime);
  writeln ('ctime         : ',info.st_ctime);
  writeln ('Human Date    : ',SYSTEM_FILE_TIME(path));


  if FileSymbolicExists(path) then begin
  writeln ('Symbolic      : ','Yes');
  writeln ('Link          : ',fpReadlink(path));

  
  StatFileSymbolic(path);
  end else begin
  writeln ('Symbolic      : ','No');
  end;

  writeln ('Directory     : ',PathIsDirectory(path));



   fa:=FileAge(path);
   maint:=Now;
  If Fa<>-1 then begin
    S:=FileDateTodateTime(fa);
    writeln ('From    : ',DateTimeToStr(S));
  end;
  writeln ('Between : ',MinutesBetween(maint,S),' minutes');

end;
function myconf.MD5FromFile(path:string):string;
var
Digest:TMD5Digest;
begin
Digest:=MD5File(path);
exit(MD5Print(Digest));
end;
//##############################################################################
function myconf.ln(frompath:string;topath:string):boolean;
var
s:string;
logs:Tlogs;
begin
    logs:=Tlogs.Create;
    result:=true;
    if Not FileExists(frompath) then begin
       logs.Syslogs('Unable to create a symbolic link ' + frompath + 'does not exists');
       exit;
    end;
    try
       if FileSymbolicExists(topath) then begin
          s:=fpReadlink(topath);
          if s=frompath then exit(true);
       end;
    except
      logs.Debuglogs('FATAL ERROR  myconf.ln() function on FileSymbolicExists() return back');
      exit;
    end;
      
    try
    If  fpSymLink (PChar(frompath),PChar(topath))<>0 then begin
        logs.Syslogs('Error linking ' + frompath + ' to ' +topath + ' E=' + IntToStr(fpgeterrno));
        logs.logs('Error linking ' + frompath + ' to ' +topath + ' E=' + IntToStr(fpgeterrno));
        exit(false);
    end;
    except
       logs.Debuglogs('FATAL ERROR  myconf.ln() function on fpSymLink() return');
      exit;
    end;


end;
//##############################################################################

function myconf.MD5FromString(value:string):string;
var
Digest:TMD5Digest;
begin
Digest:=MD5String(value);
exit(MD5Print(Digest));
end;
//##############################################################################
function myconf.FileSymbolicExists(path:string):boolean;
var
info :stat;
begin
result:=false;
if Not FileExists(path) then exit;
 if fpLStat (path,@info)=0 then
    begin
    if fpS_ISLNK(info.st_mode) then exit(true);
    exit;
      Writeln ('File is a link');
    if fpS_ISREG(info.st_mode) then
      Writeln ('File is a regular file');
    if fpS_ISDIR(info.st_mode) then
      Writeln ('File is a directory');
    if fpS_ISCHR(info.st_mode) then
      Writeln ('File is a character device file');
    if fpS_ISBLK(info.st_mode) then
      Writeln ('File is a block device file');
    if fpS_ISFIFO(info.st_mode) then
      Writeln ('File is a named pipe (FIFO)');
    if fpS_ISSOCK(info.st_mode) then
      Writeln ('File is a socket');
    end else begin
    logs.logs('FileSymbolicExists:: Fstat failed. Errno : ' + IntToStr(fpgeterrno));
    end;

end;
//##############################################################################
function myconf.PathIsDirectory(path:string):boolean;
var
info :stat;
D:boolean;
begin
result:=false;
if not FileExists(path) then exit;
D:=COMMANDLINE_PARAMETERS('debug');
if not D then D:=COMMANDLINE_PARAMETERS('--verbose');
 if fpLStat (path,@info)=0 then
    begin

    if fpS_ISDIR(info.st_mode) then
      result:=True;
    end else begin
    if D then  writeln('PathIsDirectory:: Fstat failed. Errno : ',fpgeterrno, ' ',path);
    end;

end;
//##############################################################################
function myconf.StatFileSymbolic(Path:string):string;
var
   info : stat;
begin
result:='';
if  fplstat (Path,@info)<>0 then
     begin
     writeln('LStat failed. Errno : ',fpgeterrno);
     halt (1);
     end;
  writeln ('Inode   : ',info.st_ino);
  writeln ('Mode    : ',info.st_mode);
  writeln ('nlink   : ',info.st_nlink);
  writeln ('uid     : ',info.st_uid);
  writeln ('gid     : ',info.st_gid);
  writeln ('rdev    : ',info.st_rdev);
  writeln ('Size    : ',info.st_size);
  writeln ('Blksize : ',info.st_blksize);
  writeln ('Blocks  : ',info.st_blocks);
  writeln ('atime   : ',info.st_atime);
  writeln ('mtime   : ',info.st_mtime);
  writeln ('ctime   : ',info.st_ctime);

end;
//******************************************************************************
procedure myconf.PATCHING_PERL_TO_ARTICA(TargetPath:string);
var
   D     :Boolean;
   cmd   :string;
   l     :TstringList;
   ltmp  :TStringList;
   i     :integer;
begin

D:=COMMANDLINE_PARAMETERS('debug');
forceDirectories('/opt/artica/logs');

if not FileExists('/usr/bin/find') then begin
   if D then writeln('PATCHING_PERL_TO_ARTICA: unable to stat /usr/bin/find');
   exit;
end;

    cmd:='/usr/bin/find '+TargetPath+'|sed ''s/\.\'+'/'+'/'+'/;'' >/opt/artica/logs/find.tmp';
    if D then writeln('PATCHING_PERL_TO_ARTICA: ' + cmd);
    fpsystem(cmd);

if not FileExists('/opt/artica/logs/find.tmp') then begin
   if D then writeln('PATCHING_PERL_TO_ARTICA: unable to stat /opt/artica/logs/find.tmp');
   exit;
end;
    l:=TstringList.Create;
    l.LoadFromFile('/opt/artica/logs/find.tmp');
    ltmp:=TstringList.Create;
    For i:=0 to l.Count-1 do begin
          if FileExists(l.Strings[i]) then begin
              if D then writeln('PATCHING_PERL_TO_ARTICA: Loading ',l.Strings[i]);
              ltmp.LoadFromFile(l.Strings[i]);
              if length(ltmp.Text)>0 then begin
                 if pos('!',ltmp.Strings[0])>0 then begin
                    writeln('patching ', l.Strings[i],' lenght :', length(ltmp.Text));
                    ltmp.Strings[0]:='#!' + PERL_BIN_PATH();
                    ltmp.SaveToFile(l.Strings[i]);
                 end;
              end;

          end;

    end;

end;
//******************************************************************************
function myconf.SYSTEM_ISIP_LOCAL(ipToTest:string):boolean;
var
   D:boolean;
   i:integer;
begin
   result:=false;
      D:=COMMANDLINE_PARAMETERS('--verbose');
      if not D then  D:=COMMANDLINE_PARAMETERS('debug');

   SYSTEM_ALL_IPS();

   for i:=0 to ArrayList.Count -1 do begin
        if D then writeln('SYSTEM_ISIP_LOCAL: ',ipToTest,'?=',trim(ArrayList.Strings[i]));
        if trim(ipToTest)=trim(ArrayList.Strings[i]) then begin
            if D then writeln('SYSTEM_ISIP_LOCAL:: Found local ip');
            result:=true;
            break;
        end;
   end;

end;
//******************************************************************************
FUNCTION myconf.SYSTEM_GET_SYSLOG_PATH():string;
var logspath:string;
begin
   logspath:=get_INFOS('syslog_path');
   if length(logspath)=0 then begin
      if FileExists('/var/log/syslog') then logspath:='/var/log/syslog';
   end;
   if length(logspath)=0 then begin
      logs.logs('SYSTEM_GET_SYSLOG_PATH:: unable to locate syslog !!');
      logs.logs('SYSTEM_GET_SYSLOG_PATH:: please add a value [INFOS] "syslog_path=path" in /etc/artica-postfix/artica-postfix.conf');
   end;

      result:=logspath;

end;
//******************************************************************************


FUNCTION myconf.GLOBAL_STATUS():string;
 var ini     :TstringList;
begin
   ini:=TstringList.Create;
    ini.Add(squid.SQUID_STATUS());
    ini.Add('[KAV4PROXY]');
   logs.Debuglogs('GLOBAL_STATUS() invoked with parameters ' + Paramstr(1) + ' ' + ParamStr(2));
   if FileExists('/opt/kaspersky/kav4proxy/sbin/kav4proxy-kavicapserver') then begin
     ini.Add('kav4proxy_installed=1');
     if SYSTEM_PROCESS_EXIST(KAV4PROXY_PID()) then ini.Add('running=1') else  ini.Add('running=0');
     ini.Add('master_pid=' + KAV4PROXY_PID());
     ini.Add('application_installed=1');
     ini.Add('master_memory=' + IntToStr(SYSTEM_PROCESS_MEMORY(KAV4PROXY_PID())));
     ini.Add('master_version=' + KAV4PROXY_VERSION());
     ini.Add('patterndate=' + KAV4PROXY_PATTERN_DATE());
     ini.Add('pattern_version=' + KAV4PROXY_PATTERN_DATE());
     ini.Add('status='+SYSTEM_PROCESS_STATUS(KAV4PROXY_PID()));
     ini.Add('service_name=APP_KAV4PROXY');

   end else begin
      ini.Add('kav4proxy_installed=0');
   end;



   ini.Add('[PUREFTPD]');
   if FileExists('/opt/artica/sbin/pure-ftpd') then  begin
      if SYSTEM_PROCESS_EXIST(Cpureftpd.PURE_FTPD_PID()) then ini.Add('running=1') else  ini.Add('running=0');
      ini.Add('pureftpd_installed=1');
      ini.Add('application_installed=1');
      ini.Add('master_pid='+ Cpureftpd.PURE_FTPD_PID());
      ini.Add('master_memory=' + IntToStr(SYSTEM_PROCESS_MEMORY(Cpureftpd.PURE_FTPD_PID())));
      ini.Add('master_version=' + Cpureftpd.PURE_FTPD_VERSION());
      ini.Add('status='+SYSTEM_PROCESS_STATUS(Cpureftpd.PURE_FTPD_PID()));
      ini.Add('service_name=APP_PUREFTPD');
   end;


   ini.Add(postfix.STATUS());


   ini.Add('[KAVMILTER]');
   if FileExists('/opt/kav/5.6/kavmilter/bin/kavmilter') then  begin
      if SYSTEM_PROCESS_EXIST(KAV_MILTER_PID()) then ini.Add('running=1') else  ini.Add('running=0');
      ini.Add('application_installed=1');
      ini.Add('master_pid='+ KAV_MILTER_PID());
      ini.Add('master_memory=' + IntToStr(SYSTEM_PROCESS_MEMORY(KAV_MILTER_PID())));
      ini.Add('master_version=' + KAVMILTER_GET_VERSION());
      ini.Add('pattern_date=' + KAVMILTER_PATTERN_DATE());
      ini.Add('pattern_version=' +KAVMILTER_PATTERN_DATE());
      ini.Add('status='+SYSTEM_PROCESS_STATUS(KAV_MILTER_PID()));
      ini.Add('service_name=APP_KAVMILTER');
   end;



   ini.Add('[KAS3]');
   if FileExists('/opt/kav/5.6/kavmilter/bin/kavmilter') then  begin
      if SYSTEM_PROCESS_EXIST(KAS_AP_PROCESS_SERVER_PID()) then ini.Add('running=1') else  ini.Add('running=0');
      ini.Add('application_installed=1');
      ini.Add('master_pid='+ KAS_AP_PROCESS_SERVER_PID());
      ini.Add('master_memory=' + IntToStr(SYSTEM_PROCESS_MEMORY(KAS_AP_PROCESS_SERVER_PID())));
      ini.Add('master_version=' + KAS_VERSION());
      ini.Add('pattern_date=' + KAVMILTER_PATTERN_DATE());
      ini.Add('pattern_version=' + KAVMILTER_PATTERN_DATE());
      ini.Add('status='+SYSTEM_PROCESS_STATUS(KAS_AP_PROCESS_SERVER_PID()));
      ini.Add('service_name=APP_KAS3');
   end;

   ini.Add('[AMAVIS]');
   if FileExists('/opt/artica/bin/amavisd') then  begin
      if SYSTEM_PROCESS_EXIST(AMAVISD_PID()) then ini.Add('running=1') else  ini.Add('running=0');
      ini.Add('application_installed=1');
      ini.Add('master_pid='+ AMAVISD_PID());
      ini.Add('master_memory=' + IntToStr(SYSTEM_PROCESS_MEMORY(AMAVISD_PID())));
      ini.Add('master_version=' + AMAVISD_VERSION());
      ini.Add('status='+SYSTEM_PROCESS_STATUS(AMAVISD_PID()));
      ini.Add('service_name=APP_AMAVIS');
   end;

   ini.Add('[ARTICA]');
   if SYSTEM_PROCESS_EXIST(ARTICA_DAEMON_GET_PID()) then ini.Add('running=1') else  ini.Add('running=0');
   ini.Add('application_installed=1');
   ini.Add('master_pid='+ ARTICA_DAEMON_GET_PID());
   ini.Add('master_memory=' + IntToStr(SYSTEM_PROCESS_MEMORY(ARTICA_DAEMON_GET_PID())));
   ini.Add('master_version=' + ARTICA_VERSION());
   ini.Add('status='+SYSTEM_PROCESS_STATUS(ARTICA_DAEMON_GET_PID()));
   ini.Add('service_name=APP_ARTICA');

   ini.Add('[ARTICA_POLICY]');
   if SYSTEM_PROCESS_EXIST(ARTICA_POLICY_GET_PID()) then ini.Add('running=1') else  ini.Add('running=0');
   ini.Add('application_installed=1');
   ini.Add('master_pid='+ ARTICA_POLICY_GET_PID());
   ini.Add('master_memory=' + IntToStr(SYSTEM_PROCESS_MEMORY(ARTICA_POLICY_GET_PID())));
   ini.Add('master_version=' + ARTICA_VERSION());
   ini.Add('status='+SYSTEM_PROCESS_STATUS(ARTICA_POLICY_GET_PID()));
   ini.Add('service_name=APP_ARTICA_POLICY');

   ini.Add('[ARTICA_MYSQL]');
   if FileExists(MYSQL_MYSQLD_BIN_PATH()) then begin
   if SYSTEM_PROCESS_EXIST(MYSQL_ARTICA_PID()) then ini.Add('running=1') else  ini.Add('running=0');
   ini.Add('application_installed=1');
   ini.Add('master_pid='+ MYSQL_ARTICA_PID());
   ini.Add('master_memory=' + IntToStr(SYSTEM_PROCESS_MEMORY(MYSQL_ARTICA_PID())));
   ini.Add('master_version=' + MYSQL_VERSION());
   ini.Add('status='+SYSTEM_PROCESS_STATUS(MYSQL_ARTICA_PID()));
   ini.Add('service_name=APP_MYSQL_ARTICA');
   end;

   ini.Add('[LDAP]');
   if SYSTEM_PROCESS_EXIST(ldap.LDAP_PID()) then ini.Add('running=1') else  ini.Add('running=0');
   ini.Add('pidPath='+ldap.PID_PATH());
   ini.Add('application_installed=1');
   ini.Add('master_pid='+ ldap.LDAP_PID());
   ini.Add('master_memory=' + IntToStr(SYSTEM_PROCESS_MEMORY(ldap.LDAP_PID())));
   ini.Add('master_version=' + ldap.LDAP_VERSION());
   ini.Add('status='+SYSTEM_PROCESS_STATUS(ldap.LDAP_PID()));
   ini.Add('service_name=APP_LDAP');








   ini.Add('[APACHE]');
  if SYSTEM_PROCESS_EXIST(APACHE_PID()) then ini.Add('running=1') else  ini.Add('running=0');
      ini.Add('application_enabled=' +APACHE_ARTICA_ENABLED());
      ini.Add('application_installed=1');
      ini.Add('master_pid='+ APACHE_PID());
      ini.Add('master_memory=' + IntToStr(SYSTEM_PROCESS_MEMORY(APACHE_PID())));
      ini.Add('master_version=' + APACHE_VERSION());
      ini.Add('status='+SYSTEM_PROCESS_STATUS(APACHE_PID()));
      ini.Add('service_name=APP_APACHE');



   ini.Add('[BOA]');
  if SYSTEM_PROCESS_EXIST(BOA_DAEMON_GET_PID()) then ini.Add('running=1') else  ini.Add('running=0');
      ini.Add('application_installed=1');
      ini.Add('master_pid='+ BOA_DAEMON_GET_PID());
      ini.Add('master_memory=' + IntToStr(SYSTEM_PROCESS_MEMORY(BOA_DAEMON_GET_PID())));
      ini.Add('master_version=0.94.13');
      ini.Add('status='+SYSTEM_PROCESS_STATUS(BOA_DAEMON_GET_PID()));
      ini.Add('service_name=APP_BOA');

ini.Add('[FETCHMAIL]');
if FileExists(FETCHMAIL_BIN_PATH()) then  begin
      if SYSTEM_PROCESS_EXIST(FETCHMAIL_PID()) then ini.Add('running=1') else  ini.Add('running=0');
      ini.Add('application_installed=1');
      ini.Add('master_pid='+ FETCHMAIL_PID());
      ini.Add('master_memory=' + IntToStr(SYSTEM_PROCESS_MEMORY(FETCHMAIL_PID())));
      ini.Add('master_version=' + FETCHMAIL_VERSION());
      ini.Add('status='+SYSTEM_PROCESS_STATUS(FETCHMAIL_PID()));
      ini.Add('service_name=APP_FETCHMAIL');
      if not  FileExists('/etc/fetchmailrc') then ini.Add('fetchmailrc=0')else ini.Add('fetchmailrc=1')
   end;
ini.Add(dansguardian.DANSGUARDIAN_STATUS());
ini.Add(miltergreylist.STATUS());
ini.Add(Cpureftpd.PURE_FTPD_STATUS());
ini.Add(CCYRUS.CYRUS_STATUS());
ini.Add(OBM_APACHE_STATUS());
ini.Add(ntpd.NTPD_STATUS());
ini.Add(MAILFROMD_STATUS());
ini.Add(IPTABLES_STATUS());
ini.Add(ARTICA_TAIL_STATUS());
ini.Add(KAS_MILTER_STATUS());
ini.Add(lighttpd.STATUS());
ini.Add(clamav.CLAMAV_STATUS());
ini.Add(clamav.MILTER_STATUS());
ini.Add(clamav.FRESHCLAM_STATUS());
ini.Add(spamass.SPAMASSASSIN_STATUS());
ini.Add(spamass.MILTER_STATUS());
ini.Add(samba.SAMBA_STATUS());
ini.Add(spfm.SPFMILTER_STATUS());
ini.Add(mimedef.MIMEDEFANG_STATUS());
ini.Add(stunnel.STUNNEL_STATUS());
ini.add(dkim.STATUS());
ini.Add(mailgraph.STATUS());
ini.Add(roundcube.STATUS());
ini.Add(kav4samba.STATUS());





ini.Add('[SASLAUTHD]');
if FileExists('/opt/artica/bin/saslauthd') then  begin
      if SYSTEM_PROCESS_EXIST(SASLAUTHD_PID()) then ini.Add('running=1') else  ini.Add('running=0');
      ini.Add('application_installed=1');
      ini.Add('master_pid='+ SASLAUTHD_PID());
      ini.Add('master_memory=' + IntToStr(SYSTEM_PROCESS_MEMORY(SASLAUTHD_PID())));
      ini.Add('master_version=' + SASLAUTHD_VERSION());
      ini.Add('status='+SYSTEM_PROCESS_STATUS(SASLAUTHD_PID()));
      ini.Add('service_name=APP_SASLAUTHD');
   end;


   result:=ini.Text;
   ini.Free;
end;
//#########################################################################################

FUNCTION myconf.KAS_MILTER_STATUS():string;
var
   ini:TstringList;
begin
ini:=TstringList.Create;
ini.Add('[KAS_MILTER]');
if FileExists('/usr/local/ap-mailfilter3/bin/kas-milter') then  begin
      if SYSTEM_PROCESS_EXIST(KAS_MILTER_PID()) then ini.Add('running=1') else  ini.Add('running=0');
      ini.Add('application_installed=1');
      ini.Add('master_pid='+ KAS_MILTER_PID());
      ini.Add('master_memory=' + IntToStr(SYSTEM_PROCESS_MEMORY(KAS_MILTER_PID())));
      ini.Add('master_version=' + KAS_VERSION());
      ini.Add('status='+SYSTEM_PROCESS_STATUS(KAS_MILTER_PID()));
      ini.Add('service_name=APP_KAS3_MILTER');
   end;

result:=ini.Text;
ini.free
end;
//#########################################################################################

FUNCTION myconf.OBM_APACHE_STATUS():string;
var
   ini:TstringList;
begin
ini:=TstringList.Create;

  ini.Add('[OBM_APACHE]');
  if SYSTEM_PROCESS_EXIST(APACHE_OBM_PID()) then ini.Add('running=1') else  ini.Add('running=0');
  ini.Add('application_installed=1');
  ini.Add('application_enabled=' +get_INFOS('OBMEnabled'));
      ini.Add('master_pid='+ APACHE_OBM_PID());
      ini.Add('master_memory=' + IntToStr(SYSTEM_PROCESS_MEMORY(APACHE_OBM_PID())));
      ini.Add('master_version=' + APACHE_VERSION());
      ini.Add('status='+SYSTEM_PROCESS_STATUS(APACHE_OBM_PID()));
      ini.Add('service_name=APP_OBM_APACHE');


result:=ini.Text;
ini.free
end;
//#########################################################################################
FUNCTION myconf.ARTICA_TAIL_STATUS():string;
var
   ini:TstringList;
begin
ini:=TstringList.Create;

  ini.Add('[ARTICA_TAIL]');
  if SYSTEM_PROCESS_EXIST(ARTICA_TAIL_PID()) then ini.Add('running=1') else  ini.Add('running=0');
  ini.Add('application_installed=1');
  ini.Add('application_enabled=1');
      ini.Add('master_pid='+ ARTICA_TAIL_PID());
      ini.Add('master_memory=' + IntToStr(SYSTEM_PROCESS_MEMORY(ARTICA_TAIL_PID())));
      ini.Add('master_version=' + ARTICA_VERSION());
      ini.Add('status='+SYSTEM_PROCESS_STATUS(ARTICA_TAIL_PID()));
      ini.Add('service_name=APP_ARTICA_TAIL');
      ini.Add('service_cmd=tail');
result:=ini.Text;
ini.free
end;
//#########################################################################################
FUNCTION myconf.MAILFROMD_STATUS():string;
var
   ini:TstringList;
   pid     :string;
begin
ini:=TstringList.Create;
pid:=MAILFROMD_PID();
  ini.Add('[MAILFROMD]');
  if FileExists(MAILFROMD_PATH()) then begin
     if SYSTEM_PROCESS_EXIST(pid) then ini.Add('running=1') else  ini.Add('running=0');
      ini.Add('application_installed=1');
      ini.Add('application_enabled=' +get_INFOS('MailFromdEnabled'));
      ini.Add('master_pid='+ pid);
      ini.Add('master_memory=' + IntToStr(SYSTEM_PROCESS_MEMORY(pid)));
      ini.Add('master_version=' + MAILFROMD_VALUES('version'));
      ini.Add('status='+SYSTEM_PROCESS_STATUS(pid));
      ini.Add('service_name=APP_MAILFROMD');
  end;
     

result:=ini.Text;
ini.free
end;
//#########################################################################################
FUNCTION myconf.IPTABLES_STATUS():string;
var
   ini:TstringList;
begin

ini:=TstringList.Create;
  ini.Add('[IPTABLES]');
  if FileExists(IPTABLES_PATH())then ini.Add('running=1') else  ini.Add('running=0');
  if FileExists(IPTABLES_PATH())then ini.Add('application_installed=1');
  ini.Add('application_enabled=' +get_INFOS('IptablesEnabled'));
      ini.Add('master_pid=0');
      ini.Add('master_memory=0');
      try
         ini.Add('master_version=' + IPTABLES_VERSION());
      except
         ini.Add('master_version=ERROR');
      end;
      ini.Add('status=kernel');
      ini.Add('service_name=APP_IPTABLES');
result:=ini.Text;
ini.free
end;
//#########################################################################################
FUNCTION myconf.BACKUP_ARTICA_STATUS():string;
var
   ini:TstringList;
   conf:TiniFile;
   mailpath:string;
   SYS:Tsystem;
begin
SYS:=Tsystem.Create();
if not FileExists('/etc/artica-postfix/artica-backup.conf') then exit;
conf:=TiniFile.Create('/etc/artica-postfix/artica-backup.conf');
mailpath:=conf.ReadString('backup','backup_path','/opt/artica/backup');
ini:=TstringList.Create;
  ini.Add('[ARTICA_BACKUP]');
  if FileExists('/etc/cron.d/artica.cron.backups') then begin
     ini.Add('running=1');
     ini.Add('application_enabled=1');

 end else begin
     ini.Add('running=0');
     ini.Add('application_enabled=0');
 end;

      ini.Add('master_pid=0');
      ini.Add('master_memory='+IntToStr(SYS.FOLDER_SIZE(mailpath)));
      ini.Add('master_version=' +conf.ReadString('backup','backup_time','03:00'));
      ini.Add('status=task');
      ini.Add('service_name=APP_ARTICA_BACKUP');
result:=ini.Text;
ini.free
end;
//#########################################################################################
FUNCTION myconf.IPTABLES_LIST_NICS():string;
var
   l:Tstringlist;
   RegExpr:TRegExpr;
   i:integer;
   logs:Tlogs;
begin
result:='';
  l:=Tstringlist.Create;
  l.LoadFromFile('/proc/net/dev');
  logs:=Tlogs.Create;
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='^(.+?):';
  for i:=0 to l.Count-1 do begin
      if RegExpr.Exec(l.Strings[i]) then begin
          if trim(RegExpr.Match[1])<>'lo' then result:=result + trim(RegExpr.Match[1]) + ';';
      end else begin
         logs.logs('IPTABLES_LIST_NICS:: unable to match ' +l.Strings[i] );
      end;
  
  end;
  RegExpr.Free;
  l.free;

end;
//#########################################################################################
FUNCTION myconf.IPTABLES_CURRENT_RULES():string;
var
   l:Tstringlist;
begin
  if not fileExists(IPTABLES_PATH()) then exit;
  fpsystem(IPTABLES_PATH() + ' -L -v -n >/opt/artica/logs/iptables.tmp 2>&1');
  if not FileExists('/opt/artica/logs/iptables.tmp') then exit;
  l:=Tstringlist.Create;
  l.LoadFromFile('/opt/artica/logs/iptables.tmp');
  DeleteFile('/opt/artica/logs/iptables.tmp');
  result:=l.Text;
  l.free;

end;
//#########################################################################################
FUNCTION myconf.IPTABLES_EVENTS():string;
var
   l:Tstringlist;
begin
  if not fileExists(IPTABLES_PATH()) then exit;
  fpsystem('/bin/cat /var/log/messages|/usr/bin/tail -n 100|grep IN= >/opt/artica/logs/iptables.tmp');
  if not FileExists('/opt/artica/logs/iptables.tmp') then exit;
  l:=Tstringlist.Create;
  l.LoadFromFile('/opt/artica/logs/iptables.tmp');
  DeleteFile('/opt/artica/logs/iptables.tmp');
  result:=l.Text;
  l.free;

end;
//#########################################################################################
FUNCTION myconf.CYRUS_IMAP_GET_VALUE(key:string):string;
var
   l:TstringList;
   RegExpr:TRegExpr;
   i:integer;
begin

  if not FileExists('/etc/imapd.conf') then exit;
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='^'+key+':(.+)';
  l:=TstringList.Create;
  l.LoadFromFile('/etc/imapd.conf');
  for i:=0 to l.Count-1 do begin
    if RegExpr.Exec(l.Strings[i]) then begin
       result:=trim(RegExpr.Match[1]);
       RegExpr.free;
       l.free;
       exit;
    end;
  end;
 RegExpr.free;
l.free;
end;
//#########################################################################################

FUNCTION myconf.ADD_PROCESS_QUEUE(command:string):string;
var
   l:TstringList;
   logs:Tlogs;
begin
   result:='';
   l:=TstringList.Create;
   logs:=Tlogs.Create;
   logs.logs('ADD_PROCESS_QUEUE:: -> ' + command);
   logs.Debuglogs('ADD_PROCESS_QUEUE:: -> ' + command);
   if FileExists('/etc/artica-postfix/orders.queue') then l.LoadFromFile('/etc/artica-postfix/orders.queue');
   l.Add(command);
   l.SaveToFile('/etc/artica-postfix/orders.queue');
   l.Free;
end;
//#########################################################################################
procedure myconf.deb_files_extists_between(patha:string;pathb:string);
var
lista:TstringList;
z:Tsystem;
i:integer;
thepath:string;
begin
lista:=Tstringlist.Create;
z:=Tsystem.Create;
lista:=z.RecusiveListFiles(patha);
 for i:=0 to lista.Count-1 do begin
        thepath:=AnsiReplaceText(lista.Strings[i],patha,pathb);
        if not PathIsDirectory(thepath) then begin
           if FileExists(thepath) then writeln(thepath);
        end;
 end;
end;
//#########################################################################################
function myconf.MYSQL_DATABASE_CHECK_LIST(BasePath:string):Tstringlist;
var  l:TstringList;
begin

l:=TstringList.CReate;
l.Add(BasePath + '/mysql/proc.frm');
l.Add(BasePath + '/mysql/host.MYD');
l.Add(BasePath + '/mysql/user.MYI');
l.Add(BasePath + '/mysql/func.MYD');
l.Add(BasePath + '/mysql/help_relation.frm');
l.Add(BasePath + '/mysql/time_zone.frm');
l.Add(BasePath + '/mysql/time_zone_transition.MYI');
l.Add(BasePath + '/mysql/help_category.frm');
l.Add(BasePath + '/mysql/db.MYD');
l.Add(BasePath + '/mysql/help_keyword.MYI');
l.Add(BasePath + '/mysql/slow_log.CSV');
l.Add(BasePath + '/mysql/time_zone_leap_second.MYD');
l.Add(BasePath + '/mysql/procs_priv.frm');
l.Add(BasePath + '/mysql/slow_log.frm');
l.Add(BasePath + '/mysql/time_zone.MYD');
l.Add(BasePath + '/mysql/slow_log.CSM');
l.Add(BasePath + '/mysql/time_zone_transition.MYD');
l.Add(BasePath + '/mysql/help_relation.MYD');
l.Add(BasePath + '/mysql/procs_priv.MYI');
l.Add(BasePath + '/mysql/time_zone_transition_type.MYI');
l.Add(BasePath + '/mysql/host.frm');
l.Add(BasePath + '/mysql/tables_priv.MYI');
l.Add(BasePath + '/mysql/tables_priv.MYD');
l.Add(BasePath + '/mysql/event.MYI');
l.Add(BasePath + '/mysql/time_zone_transition_type.MYD');
l.Add(BasePath + '/mysql/time_zone_name.MYD');
l.Add(BasePath + '/mysql/ndb_binlog_index.frm');
l.Add(BasePath + '/mysql/func.frm');
l.Add(BasePath + '/mysql/user.MYD');
l.Add(BasePath + '/mysql/ndb_binlog_index.MYI');
l.Add(BasePath + '/mysql/user.frm');
l.Add(BasePath + '/mysql/time_zone_name.frm');
l.Add(BasePath + '/mysql/servers.frm');
l.Add(BasePath + '/mysql/help_topic.frm');
l.Add(BasePath + '/mysql/procs_priv.MYD');
l.Add(BasePath + '/mysql/columns_priv.MYI');
l.Add(BasePath + '/mysql/general_log.CSV');
l.Add(BasePath + '/mysql/help_keyword.MYD');
l.Add(BasePath + '/mysql/db.frm');
l.Add(BasePath + '/mysql/proc.MYI');
l.Add(BasePath + '/mysql/ndb_binlog_index.MYD');
l.Add(BasePath + '/mysql/time_zone_leap_second.frm');
l.Add(BasePath + '/mysql/host.MYI');
l.Add(BasePath + '/mysql/event.MYD');
l.Add(BasePath + '/mysql/event.frm');
l.Add(BasePath + '/mysql/time_zone_transition.frm');
l.Add(BasePath + '/mysql/db.MYI');
l.Add(BasePath + '/mysql/columns_priv.frm');
l.Add(BasePath + '/mysql/time_zone_leap_second.MYI');
l.Add(BasePath + '/mysql/help_category.MYI');
l.Add(BasePath + '/mysql/plugin.MYI');
l.Add(BasePath + '/mysql/func.MYI');
l.Add(BasePath + '/mysql/tables_priv.frm');
l.Add(BasePath + '/mysql/servers.MYI');
l.Add(BasePath + '/mysql/help_relation.MYI');
l.Add(BasePath + '/mysql/proc.MYD');
l.Add(BasePath + '/mysql/help_topic.MYI');
l.Add(BasePath + '/mysql/time_zone_transition_type.frm');
l.Add(BasePath + '/mysql/plugin.MYD');
l.Add(BasePath + '/mysql/help_topic.MYD');
l.Add(BasePath + '/mysql/time_zone.MYI');
l.Add(BasePath + '/mysql/plugin.frm');
l.Add(BasePath + '/mysql/general_log.CSM');
l.Add(BasePath + '/mysql/servers.MYD');
l.Add(BasePath + '/mysql/help_keyword.frm');
l.Add(BasePath + '/mysql/columns_priv.MYD');
l.Add(BasePath + '/mysql/general_log.frm');
l.Add(BasePath + '/mysql/time_zone_name.MYI');
l.Add(BasePath + '/mysql/help_category.MYD');
result:=l;
end;
//#########################################################################################

procedure myconf.OPENSSL_CERTIFCATE_CONFIG();
var
  mysys:Tsystem;
begin
   mysys:=Tsystem.Create;
   mysys.OPENSSL_CERTIFCATE_CONFIG();
end;
//#########################################################################################
function myconf.SYSTEM_LOCAL_SID():string;
var
   FILI        :TstringList;
   RegExpr     :TRegExpr;
   i           :integer;
   
begin
  forceDirectories('/opt/artica/logs');
  fpsystem('/usr/bin/net getlocalsid >/opt/artica/logs/getlocalsid.tmp 2>&1');
  FILI:=TstringList.Create;
  FILI.LoadFromFile('/opt/artica/logs/getlocalsid.tmp');
  RegExpr:=TRegExpr.Create;
  RegExpr.Expression:='is:\s+(.+)';
  for i:=0 to FILI.Count-1 do begin
     if RegExpr.Exec(FILI.Strings[i]) then begin
        result:=RegExpr.Match[1];
        break;
     end;
  end;

  RegExpr.Free;
  FILI.free;
end;
//#########################################################################################
procedure myconf.SYSTEM_CHANGE_MOTD();
var l:TstringList;
begin
forceDirectories('/opt/artica/logs');
fpsystem('/bin/uname -a >/opt/artica/logs/uname.tmp');



if Not FileExists('/etc/motd') then exit;
l:=TstringList.Create;
l.Add(get_LINUX_DISTRI());
l.Add(ReadFileIntoString('/opt/artica/logs/uname.tmp'));
l.Add('');
l.Add('Some programs included with the artica system are free software;');
l.Add('the exact distribution terms for each program are described in the');
l.Add('individual files in /usr/share/doc/*/copyright.');
l.Add('Only Kaspersky products requires a licence file, see according README');
l.Add('Artica & this system comes with ABSOLUTELY NO WARRANTY, to the extent permitted by');
l.Add('applicable law.');
l.Add('To access official Artica documentation, please visit:');
l.Add('http://www.artica.fr');
l.SaveToFile('/etc/motd');
l.free;
end;


 //#########################################################################################
procedure myconf.ParseMyqlQueue();
var
   QueuePath     :string;
   target_path   :string;
   i             :integer;
   database_name :string;
   SYS:Tsystem;
   D:boolean;
   mysys:Tsystem;
begin

  logs.Debuglogs('');
  logs.Debuglogs('');
  logs.Debuglogs('ParseMyqlQueue #########################################################################################');
  
  D:=COMMANDLINE_PARAMETERS('verbose');
  SYS:=TSystem.Create;
  i:=0;
  QueuePath:='/opt/artica/mysql/artica-queue';
  if not DirectoryExists(QueuePath) then forcedirectories(Queuepath);
  
  mysys:=Tsystem.Create;
  mysys.PROCESS_LIST_PID(ParamStr(0) + ' --ParseMyqlQueue');

  if mysys.PLISTPID.Count>6 then begin
     logs.Debuglogs('ParseMyqlQueue()::Maximum process for parsing mysql queue is reach...');
     mysys.free;
     exit;
  end;

  if get_INFOS('BadMysqlPassword')='1' then begin
     logs.Debuglogs('ParseMyqlQueue():: Bad mysql password aborting...');
     logs.Debuglogs('#########################################################################################');
     exit;
  end;



   if D then writeln('run in verbose mode');


  SYS.DirFiles(QueuePath , '*');
  if SYS.DirListFiles.Count=0 then begin
     logs.Debuglogs('ParseMyqlQueue():: 0 files in queue');
     logs.Debuglogs('#########################################################################################');
     SYS.Free;
     exit;
  end;
  
  logs.Debuglogs('ParseMyqlQueue():: ' + IntToStr(SYS.DirListFiles.Count) + ' files in queue');
  if not logs.Connect() then begin
        if(SYS.DirListFiles.Count)>100 then fpsystem('/bin/rm -rf  /opt/artica/mysql/artica-queue/*');
        logs.Debuglogs('ParseMyqlQueue():: unable to connect, aborting');
        logs.Debuglogs('#########################################################################################');
        exit;
  end;
  logs.Debuglogs('ParseMyqlQueue():: ' + IntToStr(SYS.DirListFiles.Count) + ' files in queue');

  for i:=0 to SYS.DirListFiles.Count-1 do begin
      target_path:=QueuePath + '/' + SYS.DirListFiles.Strings[i];
      if fileExists(target_path) then begin
         database_name:=MYSQL_DETERMINE_DATABASE_IN_FILEQUERY(target_path);
         if length(database_name)>0 then begin
         
            if logs.QUERY_SQL(pChar(ReadFileIntoString(target_path)),database_name) then begin
               LOGS.logs('ParseMyqlQueue():: Success execute mysql queue file ' + target_path);
               logs.Debuglogs('ParseMyqlQueue():: Process SQL file: ' + target_path + ' (success) file ' + IntToStr(i) + '/' + intToStr(SYS.DirListFiles.Count));
               DeleteFile(target_path);
            end else begin
               LOGS.logs('ParseMyqlQueue():: Failed execute mysql queue file ' + target_path);
               logs.Debuglogs('ParseMyqlQueue():: sProcess SQL file: ' + target_path + '(failed) file ' + IntToStr(i) + '/' + intToStr(SYS.DirListFiles.Count));
            end;
         end;

      end;

  end;
  logs.Disconnect();
        logs.Debuglogs('#########################################################################################');
  halt(0);
end;
//#########################################################################################
function myconf.Explode(const Separator, S: string; Limit: Integer = 0):TStringDynArray;
var
  SepLen       : Integer;
  F, P         : PChar;
  ALen, Index  : Integer;
begin
  SetLength(Result, 0);
  if (S = '') or (Limit < 0) then
    Exit;
  if Separator = '' then
  begin
    SetLength(Result, 1);
    Result[0] := S;
    Exit;
  end;
  SepLen := Length(Separator);
  ALen := Limit;
  SetLength(Result, ALen);

  Index := 0;
  P := PChar(S);
  while P^ <> #0 do
  begin
    F := P;
    P := StrPos(P, PChar(Separator));
    if (P = nil) or ((Limit > 0) and (Index = Limit - 1)) then
      P := StrEnd(F);
    if Index >= ALen then
    begin
      Inc(ALen, 5); // mehrere auf einmal um schneller arbeiten zu können
      SetLength(Result, ALen);
    end;
    SetString(Result[Index], F, P - F);
    Inc(Index);
    if P^ <> #0 then
      Inc(P, SepLen);
  end;
  if Index < ALen then
    SetLength(Result, Index); // wirkliche Länge festlegen
end;
//#########################################################################################

procedure myconf.splitexample(s:string;sep:string);
var
   tb:TStringDynArray;
   i:integer;
begin
    writeln('Explode ' + s + ' by sep=' + sep);
    tb:=Explode(sep,s);
    for i:=0 to length(tb) do begin
        writeln(i,' ',tb[i]);
    
    end;


end;
//#########################################################################################
procedure myconf.PERL_CREATE_DEFAULT_SCRIPTS();
var
   l:TstringList;
   rootpath:string;
   
begin
  rootpath:=get_ARTICA_PHP_PATH();
  l:=TstringList.Create;
if Not FileExists(rootpath+'/bin/install/kavgroup/kas-compile-artica.pl') then begin
writeln('PERL_CREATE_DEFAULT_SCRIPTS():: Creating '+rootpath+'/bin/install/kavgroup/kas-compile-artica.pl');
l.Add('#!/usr/local/ap-mailfilter3/bin/perl -w');
l.Add('use strict;');
l.Add('');
l.Add('use FindBin qw($Bin);');
l.Add('use lib "/usr/local/ap-mailfilter3/control/lib";');
l.Add('');
l.Add('use vars qw($CONST $CONFIG $LANG $MENU @ERR);');
l.Add('');
l.Add('use CGI qw(:standard);');
l.Add('use CGI::Carp;');
l.Add('#use POSIX qw(strftime);');
l.Add('use Data::Dumper;');
l.Add('');
l.Add('BEGIN {');
l.Add('  require "cgiutil.pl";');
l.Add('  require "config.pl";');
l.Add('  require "stsconfig.pl";');
l.Add('  require "rc/design.pl";');
l.Add('  require "utils.pl";');
l.Add('};');
l.Add('');
l.Add('my %param = GetParams();');
l.Add('my %error;');
l.Add('');
l.Add('my ($checks,$defines,$basedef);');
l.Add('');
l.Add('$error{error} = $LANG->{error}{cant_access_policy_data} unless( STSCFG_IsReady() );');
l.Add('');
l.Add('if(!defined($error{error}) )');
l.Add('{');
l.Add('  STSConfig::compile();');
l.Add('  if( STSCFG_Succeeded(\%error,''STSConfig::compile'',$LANG->{error}{cant_build_profiles}, $LANG->{error}{warn_build_profiles}) )');
l.Add('  {');
l.Add('    $error{notice} = $LANG->{message}{applied};');
l.Add('  }');
l.Add('');
l.Add('  RestartHelper(\%error);');
l.Add('}');
l.Add('');
l.Add('STSCFG_PushErrorLog() if( $error{warning} || $error{error} );');
l.Add('');
l.Add('');
l.Add('# Build page');
l.Add('');
l.Add('');
l.Add('ErrorBlock( top=>1, %error ) if( $error{warning} || $error{error} );');
l.Add('ErrorBlock( %error );');
l.Add('');
forcedirectories(rootpath+'/bin/install/kavgroup');
l.SaveToFile(rootpath+'/bin/install/kavgroup/kas-compile-artica.pl');
fpsystem('/bin/chmod 777 ' + rootpath+'/bin/install/kavgroup/kas-compile-artica.pl');
l.Clear;
end;


if not FileExists(rootpath+'/bin/install/parse_avstat.pl') then begin
writeln('PERL_CREATE_DEFAULT_SCRIPTS():: Creating '+rootpath+'/bin/install/parse_avstat.pl');
l.Add('#!/usr/bin/perl -w');
l.Add('#');
l.Add('# Really useful when script is run from the relative path');
l.Add('BEGIN { unshift @INC, $1 if $0 =~ /(.*)[\/]/; }');
l.Add('');
l.Add('use Time::Local;');
l.Add('use File::Copy;');
l.Add('use Shell;');
l.Add('use strict;');
l.Add('');
l.Add('require ''stat-lib.pl'';');
l.Add('');
l.Add('sub usage');
l.Add('{');
l.Add('    print "parse_avstat.pl {-n=day_num|-ds=dd.mm.yyyy [-de=dd.mm.yyyy]} {-sd=stat_dir} {-h} {parse_log_name}\n";');
l.Add('    print "   parse_log_name - analyse parse_log_name file\n\n";');
l.Add('    print "   -n=day_num     - get statistics for day_num last days\n";');
l.Add('    print "   -ds=dd.mm.yyyy - get statistics from -ds date to -de(or to now).\n";');
l.Add('    print "   -sd=stat_dir   - save statistics to stat_dir\n";');
l.Add('    print "   -r             - reanalyse log.\n";');
l.Add('    print "   -h             - this message\n";');
l.Add('    print "   -x             - don''t move file\n";');
l.Add('    print "   -d             - delete log file after processing\n";');
l.Add('    exit;');
l.Add('}');
l.Add('');
l.Add('');
l.Add('if( $#ARGV == -1 ){');
l.Add('    usage;');
l.Add('}');
l.Add('');
l.Add('my $arg;');
l.Add('my $stat_dir="./";');
l.Add('my $daysec = 86400;');
l.Add('my $list_breaker='','';');
l.Add('my $cur_time = time;');
l.Add('my @tm = localtime($cur_time);');
l.Add('my $start_time;');
l.Add('my $start_timestamp=0;');
l.Add('my $end_time = $tm[3].".".($tm[4]+1).".".($tm[5]+1900);');
l.Add('my $end_timestamp=$cur_time;');
l.Add('my $log_filename="";');
l.Add('my $append_data=1;');
l.Add('my $move_file=1;');
l.Add('my $delete_stat=0;');
l.Add('');
l.Add('foreach $arg (@ARGV){');
l.Add('	if( $arg=~/^-n=(\d+)/){');
l.Add('		my $ndays = $1;');
l.Add('		@tm = localtime($cur_time-$ndays*$daysec);');
l.Add('		$start_time = $tm[3].".".($tm[4]+1).".".($tm[5]+1900);');
l.Add('		$start_timestamp = timelocal(0,0,0,$tm[3],$tm[4],$tm[5]);');
l.Add('	}elsif( $arg=~/^-ds=(\d+).(\d+).(\d+)/){');
l.Add('		$start_time = int($1).".".int($2).".".int($3);');
l.Add('		$start_timestamp = timelocal(0,0,0,int($1),int($2)-1,int($3)-1900);');
l.Add('	}elsif( $arg=~/^-de=(\d+).(\d+).(\d+)/){');
l.Add('		$end_time = int($1).".".int($2).".".int($3);');
l.Add('		$end_timestamp = timelocal(0,0,0,int($1),int($2)-1,int($3)-1900);');
l.Add('		$move_file=0;');
l.Add('	}elsif( $arg=~/^-sd=(.*)/){');
l.Add('		$stat_dir=$1;');
l.Add('	}elsif( $arg=~/^-r/){');
l.Add('		$append_data=0;');
l.Add('	}elsif( $arg=~/^-d/){');
l.Add('		$delete_stat=1;');
l.Add('	}elsif( $arg=~/^-x/){');
l.Add('		$move_file=0;');
l.Add('	}elsif( $arg=~/^-h/){');
l.Add('		usage;');
l.Add('	}elsif( $arg=~/^-/){');
l.Add('		print "Unknown option ''$arg'' or missed required argument.\n\n";');
l.Add('		usage;');
l.Add('	}else{');
l.Add('		$log_filename=trim_string($arg);');
l.Add('		');
l.Add('	}');
l.Add('}');
l.Add('if($log_filename eq ""){');
l.Add('	print "Logfile name is empty\n";');
l.Add('	exit;');
l.Add('}');
l.Add('#print "Start time: $start_time\n";');
l.Add('#print "End time: $end_time\n";');
l.Add('#print "End timestamp: ".localtime($end_timestamp)."\n";');
l.Add('#exit;');
l.Add('if(!($stat_dir=~/[\\\/]$/)){');
l.Add('	$stat_dir=$stat_dir."/";');
l.Add('}');
l.Add('');
l.Add('if (!-d $stat_dir) {');
l.Add('	print "Directory ''$stat_dir'' does not exist\n";');
l.Add('	exit;');
l.Add('}');
l.Add('');
l.Add('if (!-f $log_filename) {');
l.Add('	print "Logfile ''$log_filename'' does not exist\n";');
l.Add('	exit;');
l.Add('}');
l.Add('');
l.Add('my $rcpt_stat=$stat_dir."rcpt.stat";');
l.Add('my $sndr_stat=$stat_dir."sndr.stat";');
l.Add('my $virs_stat=$stat_dir."virs.stat";');
l.Add('my $ip_stat=$stat_dir."ip.stat";');
l.Add('my $total_stat=$stat_dir."total.stat";');
l.Add('my $time_stat=$stat_dir."time.stat";');
l.Add('my $line;');
l.Add('my $msg_id;');
l.Add('my %stats=();');
l.Add('load_stat(\%stats, $rcpt_stat, "rcpt");');
l.Add('load_stat(\%stats, $sndr_stat, "sndr");');
l.Add('load_stat(\%stats, $virs_stat, "virs");');
l.Add('load_stat(\%stats, $ip_stat, "ip");');
l.Add('load_stat(\%stats, $total_stat, "result");');
l.Add('load_time_stat(\%stats, $time_stat);');
l.Add('if(!$append_data){');
l.Add('	set_delete_flag(\%stats, $start_timestamp, $end_timestamp);');
l.Add('}');
l.Add('#delete_stat(\%stats, $start_timestamp, $end_timestamp);');
l.Add('');
l.Add('my $new_log_filename;');
l.Add('if($move_file){');
l.Add('#    $new_log_filename = $stat_dir.$log_filename."_".$end_timestamp;');
l.Add('    $new_log_filename = $log_filename."_".$end_timestamp;');
l.Add('    touch($log_filename);');
l.Add('    move($log_filename, $new_log_filename) or die "move ''$log_filename'' to ''$new_log_filename'' failed: $!";');
l.Add('#    touch($log_filename);');
l.Add('    $log_filename = $new_log_filename;');
l.Add('}');
l.Add('');
l.Add('open(LOG, "<$log_filename")         or die "can''t open $log_filename: $!";');
l.Add('while(<LOG>){');
l.Add('	$line = $_;');
l.Add('	if( !parse_stat_line($line, $start_timestamp, $end_timestamp, \%stats) )');
l.Add('	{');
l.Add('	    print("Bad line: $line\n");');
l.Add('	}');
l.Add('	');
l.Add('}');
l.Add('close LOG;');
l.Add('');
l.Add('save_stat(\%stats, $rcpt_stat, "rcpt");');
l.Add('save_stat(\%stats, $sndr_stat, "sndr");');
l.Add('save_stat(\%stats, $virs_stat, "virs");');
l.Add('save_stat(\%stats, $ip_stat, "ip");');
l.Add('save_stat(\%stats, $total_stat, "result");');
l.Add('save_time_stat(\%stats, $time_stat);');
l.Add('');
l.Add('');
l.SaveToFile(rootpath+'/bin/install/parse_avstat.pl');
fpsystem('/bin/chmod 777 ' + rootpath+'/bin/install/parse_avstat.pl');
end;

l.free;

end;




end.
